import {
  Alert,
  Badge,
  Button,
  Card,
  Icon,
  Input,
  Progress
} from "./chunk-4QSTRJYN.js";
import "./chunk-TXWG4WBF.js";
import "./chunk-BC4K4ZOO.js";
import "./chunk-R22ZQZEH.js";
import "./chunk-S2T7PHXB.js";
import "./chunk-5MM2ORHA.js";
import "./chunk-TDQL2RD6.js";
import "./chunk-E5JPOPMV.js";
import "./chunk-CTAEXN73.js";
import "./chunk-4LNVX564.js";
import "./chunk-OTP3FXEA.js";
import "./chunk-QG4K2J32.js";
import "./chunk-SJJXBOT7.js";
import "./chunk-T6K2JVC3.js";
import "./chunk-3XBVTSKT.js";
import "./chunk-VEBNUUMV.js";
import "./chunk-IU3QFP7E.js";
import "./chunk-R3KZOC3R.js";
import "./chunk-NEEEL3XU.js";
import "./chunk-6JCWOCCU.js";
import "./chunk-HEFVNISR.js";
import {
  cn
} from "./chunk-GDBXIXOE.js";
import "./chunk-OIGUBL5Q.js";
import "./chunk-SQC57HEE.js";
import "./chunk-GW7YTEOE.js";
import "./chunk-ZYTAZ2LT.js";
import "./chunk-CKXQGZWK.js";
import "./chunk-552A6ZKJ.js";
import "./chunk-HNKYCAI5.js";
import "./chunk-RMOJXNDH.js";
import "./chunk-ZBYQSCBL.js";
import "./chunk-FOZ4PPQW.js";
import "./chunk-SC4INN4A.js";
import "./chunk-PPJHRTTM.js";
import "./chunk-HC5QDNQJ.js";
import "./chunk-K4F3KB2Y.js";
import "./chunk-46H5WXDV.js";
import "./chunk-MPE5GGRJ.js";
import "./chunk-TS3JNNVA.js";
import "./chunk-MZE2JMUW.js";
import "./chunk-DIZX2WDK.js";
import "./chunk-AZOQSLXG.js";
import "./chunk-35EINVXG.js";
import "./chunk-26JI4GM3.js";
import "./chunk-AD5XTJKA.js";
import "./chunk-CN4Y6LVA.js";
import "./chunk-UDCKICQF.js";
import "./chunk-ZHZVNHID.js";
import "./chunk-MWSGYS3J.js";
import {
  require_jsx_runtime
} from "./chunk-ZJWUZLUK.js";
import "./chunk-XODSPUEP.js";
import {
  require_react
} from "./chunk-USEVLOEB.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// packages/workspace/src/components/management/WorkspaceContextProvider.tsx
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var WorkspaceContextContext = (0, import_react.createContext)(null);
var useWorkspace = () => {
  const context = (0, import_react.useContext)(WorkspaceContextContext);
  if (!context) {
    throw new Error("useWorkspace must be used within a WorkspaceContextProvider");
  }
  return context;
};
var saveContextState = async (context) => {
  try {
    localStorage.setItem(`workspace_${context.workspace.id}`, JSON.stringify({
      state: context.state,
      settings: context.settings,
      lastAccessed: (/* @__PURE__ */ new Date()).toISOString()
    }));
  } catch (error) {
    console.error("Failed to save context state:", error);
  }
};
var loadWorkspaceContext = async (workspace, user) => {
  try {
    const saved = localStorage.getItem(`workspace_${workspace.id}`);
    const savedData = saved ? JSON.parse(saved) : {};
    return {
      workspace: {
        ...workspace,
        state: {
          ...workspace.state,
          ...savedData.state,
          lastAccessed: /* @__PURE__ */ new Date()
        },
        settings: {
          ...workspace.settings,
          ...savedData.settings
        }
      },
      user,
      permissions: [],
      // Will be loaded from API
      roles: user.roles,
      settings: workspace.settings,
      state: workspace.state,
      hasPermission: () => false,
      // Will be implemented
      switchContext: async () => {
      }
      // Will be implemented
    };
  } catch (error) {
    console.error("Failed to load workspace context:", error);
    throw error;
  }
};
var subscribeToWorkspaceUpdates = (workspaceId, handler) => {
  const interval = setInterval(() => {
    if (Math.random() > 0.95) {
      handler({
        workspaceId,
        changes: {
          state: {
            lastAccessed: /* @__PURE__ */ new Date()
          }
        }
      });
    }
  }, 5e3);
  return () => clearInterval(interval);
};
var WorkspaceContextProvider = ({
  workspace,
  user,
  permissions,
  onContextChange,
  onPermissionDenied,
  children,
  securityMode = "strict",
  auditEnabled = true
}) => {
  const [context, setContext] = (0, import_react.useState)({
    workspace,
    user,
    permissions,
    roles: user.roles,
    settings: workspace.settings,
    state: workspace.state,
    hasPermission: () => false,
    switchContext: async () => {
    }
  });
  const [auditLog, setAuditLog] = (0, import_react.useState)([]);
  const hasPermission = (0, import_react.useCallback)((permission) => {
    const hasAccess = context.permissions.includes(permission) || securityMode === "permissive" && context.roles.includes("admin");
    if (auditEnabled) {
      const auditEvent = {
        id: `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        timestamp: /* @__PURE__ */ new Date(),
        user: context.user,
        action: "permission_check",
        resource: permission,
        details: { hasAccess, securityMode },
        workspaceId: context.workspace.id,
        severity: hasAccess ? "low" : "medium"
      };
      setAuditLog((prev) => [auditEvent, ...prev.slice(0, 99)]);
    }
    if (!hasAccess) {
      onPermissionDenied == null ? void 0 : onPermissionDenied(permission);
    }
    return hasAccess;
  }, [context.permissions, context.roles, context.user, context.workspace.id, securityMode, auditEnabled, onPermissionDenied]);
  const switchContext = (0, import_react.useCallback)(async (newWorkspace) => {
    try {
      if (!hasPermission("workspace:switch")) {
        throw new Error("Permission denied: workspace:switch");
      }
      await saveContextState(context);
      const newContext = await loadWorkspaceContext(newWorkspace, user);
      const updatedContext = {
        ...newContext,
        hasPermission,
        switchContext
      };
      setContext(updatedContext);
      onContextChange == null ? void 0 : onContextChange(updatedContext);
      if (auditEnabled) {
        const auditEvent = {
          id: `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          timestamp: /* @__PURE__ */ new Date(),
          user: context.user,
          action: "context_switch",
          resource: "workspace",
          details: {
            fromWorkspace: workspace.id,
            toWorkspace: newWorkspace.id
          },
          workspaceId: newWorkspace.id,
          severity: "medium"
        };
        setAuditLog((prev) => [auditEvent, ...prev.slice(0, 99)]);
      }
    } catch (error) {
      console.error("Context switch failed:", error);
      if (auditEnabled) {
        const auditEvent = {
          id: `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          timestamp: /* @__PURE__ */ new Date(),
          user: context.user,
          action: "context_switch_failed",
          resource: "workspace",
          details: {
            error: error instanceof Error ? error.message : "Unknown error",
            fromWorkspace: workspace.id,
            toWorkspace: newWorkspace.id
          },
          workspaceId: workspace.id,
          severity: "high"
        };
        setAuditLog((prev) => [auditEvent, ...prev.slice(0, 99)]);
      }
      throw error;
    }
  }, [context, hasPermission, user, workspace.id, auditEnabled, onContextChange]);
  (0, import_react.useEffect)(() => {
    const syncHandler = (update) => {
      if (update.workspaceId === workspace.id) {
        setContext((prev) => ({
          ...prev,
          ...update.changes
        }));
      }
    };
    const unsubscribe = subscribeToWorkspaceUpdates(workspace.id, syncHandler);
    return unsubscribe;
  }, [workspace.id]);
  (0, import_react.useEffect)(() => {
    setContext((prev) => ({
      ...prev,
      hasPermission,
      switchContext,
      auditLog: auditEnabled ? auditLog : void 0
    }));
  }, [hasPermission, switchContext, auditLog, auditEnabled]);
  const value = {
    ...context,
    hasPermission,
    switchContext,
    auditLog: auditEnabled ? auditLog : void 0
  };
  return (0, import_jsx_runtime.jsx)(WorkspaceContextContext.Provider, { value, children });
};

// packages/workspace/src/components/management/WorkspaceRouter.tsx
var import_react2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var DefaultLoading = () => (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center justify-center min-h-64", children: [
  (0, import_jsx_runtime2.jsx)("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-amber-600" }),
  (0, import_jsx_runtime2.jsx)("span", { className: "ml-2 text-gray-600", children: "Loading..." })
] });
var DefaultError = ({ error }) => (0, import_jsx_runtime2.jsxs)("div", { className: "flex flex-col items-center justify-center min-h-64 p-6", children: [
  (0, import_jsx_runtime2.jsx)("div", { className: "text-red-600 mb-4", children: (0, import_jsx_runtime2.jsx)("svg", { className: "w-12 h-12", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, import_jsx_runtime2.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" }) }) }),
  (0, import_jsx_runtime2.jsx)("h3", { className: "text-lg font-semibold text-gray-900 mb-2", children: "Something went wrong" }),
  (0, import_jsx_runtime2.jsx)("p", { className: "text-gray-600 text-center mb-4", children: error.message }),
  (0, import_jsx_runtime2.jsx)(
    "button",
    {
      onClick: () => window.location.reload(),
      className: "px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700 transition-colors",
      children: "Reload Page"
    }
  )
] });
var DefaultPermissionDenied = ({ route, onBack }) => {
  var _a;
  return (0, import_jsx_runtime2.jsxs)("div", { className: "flex flex-col items-center justify-center min-h-64 p-6", children: [
    (0, import_jsx_runtime2.jsx)("div", { className: "text-amber-600 mb-4", children: (0, import_jsx_runtime2.jsx)("svg", { className: "w-12 h-12", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, import_jsx_runtime2.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 15v2m-6 0h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" }) }) }),
    (0, import_jsx_runtime2.jsx)("h3", { className: "text-lg font-semibold text-gray-900 mb-2", children: "Access Denied" }),
    (0, import_jsx_runtime2.jsx)("p", { className: "text-gray-600 text-center mb-4", children: "You don't have permission to access this page." }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "text-sm text-gray-500 mb-4", children: [
      "Required permissions: ",
      ((_a = route.permissions) == null ? void 0 : _a.join(", ")) || "None specified"
    ] }),
    (0, import_jsx_runtime2.jsx)(
      "button",
      {
        onClick: onBack,
        className: "px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors",
        children: "Go Back"
      }
    )
  ] });
};
var RouteContainer = ({ children }) => (0, import_jsx_runtime2.jsx)("div", { className: "workspace-route-container", children });
var findMatchingRoute = (routes, path) => {
  for (const route of routes) {
    if (route.exact && route.path === path) {
      return route;
    }
    if (!route.exact && path.startsWith(route.path)) {
      if (route.children) {
        const childMatch = findMatchingRoute(route.children, path);
        if (childMatch) return childMatch;
      }
      return route;
    }
    if (route.children) {
      const childMatch = findMatchingRoute(route.children, path);
      if (childMatch) return childMatch;
    }
  }
  return null;
};
var normalizeRoute = (route) => ({
  ...route,
  path: route.path.startsWith("/") ? route.path : `/${route.path}`,
  permissions: route.permissions || [],
  roles: route.roles || [],
  workspaceTypes: route.workspaceTypes || [],
  exact: route.exact ?? false
});
var WorkspaceRouter = ({
  routes,
  currentPath,
  onRouteChange,
  fallbackRoute = "/unauthorized",
  loadingComponent: Loading = DefaultLoading,
  errorComponent: ErrorComponent = DefaultError,
  permissionDeniedComponent: PermissionDenied = DefaultPermissionDenied
}) => {
  const { workspace, hasPermission, user } = useWorkspace();
  const [loading, setLoading] = (0, import_react2.useState)(true);
  const [error, setError] = (0, import_react2.useState)(null);
  const normalizedRoutes = (0, import_react2.useMemo)(
    () => routes.map(normalizeRoute),
    [routes]
  );
  const matchedRoute = (0, import_react2.useMemo)(() => {
    try {
      const route = findMatchingRoute(normalizedRoutes, currentPath);
      setError(null);
      return route;
    } catch (err) {
      setError(err instanceof Error ? err : new Error("Route matching failed"));
      return null;
    }
  }, [normalizedRoutes, currentPath]);
  const canAccessRoute = (0, import_react2.useMemo)(() => {
    if (!matchedRoute) return false;
    try {
      if (matchedRoute.workspaceTypes && matchedRoute.workspaceTypes.length > 0) {
        if (!matchedRoute.workspaceTypes.includes(workspace.type)) {
          return false;
        }
      }
      if (matchedRoute.permissions && matchedRoute.permissions.length > 0) {
        const hasAllPermissions = matchedRoute.permissions.every((perm) => hasPermission(perm));
        if (!hasAllPermissions) {
          return false;
        }
      }
      if (matchedRoute.roles && matchedRoute.roles.length > 0) {
        const hasRequiredRole = matchedRoute.roles.some((role) => user.roles.includes(role));
        if (!hasRequiredRole) {
          return false;
        }
      }
      return true;
    } catch (err) {
      setError(err instanceof Error ? err : new Error("Permission check failed"));
      return false;
    }
  }, [matchedRoute, workspace.type, hasPermission, user.roles]);
  (0, import_react2.useEffect)(() => {
    if (matchedRoute == null ? void 0 : matchedRoute.redirect) {
      onRouteChange(matchedRoute.redirect);
    }
  }, [matchedRoute, onRouteChange]);
  (0, import_react2.useEffect)(() => {
    setLoading(true);
    const timer = setTimeout(() => {
      setLoading(false);
    }, 100);
    return () => clearTimeout(timer);
  }, [currentPath]);
  if (loading) {
    return (0, import_jsx_runtime2.jsx)(Loading, {});
  }
  if (error) {
    return (0, import_jsx_runtime2.jsx)(ErrorComponent, { error });
  }
  if (!matchedRoute) {
    return (0, import_jsx_runtime2.jsxs)("div", { className: "flex flex-col items-center justify-center min-h-64 p-6", children: [
      (0, import_jsx_runtime2.jsx)("div", { className: "text-gray-400 mb-4", children: (0, import_jsx_runtime2.jsx)("svg", { className: "w-12 h-12", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, import_jsx_runtime2.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.5-.816-6.207-2.175C5.25 12.09 5.25 11.438 5.25 10.5V7.5c0-.938 0-1.59.543-2.325C6.336 4.44 7.164 4 8.25 4h7.5c1.086 0 1.914.44 2.457 1.175.543.735.543 1.387.543 2.325v3c0 .938 0 1.59-.543 2.325-.543.735-1.371 1.175-2.457 1.175H12z" }) }) }),
      (0, import_jsx_runtime2.jsx)("h3", { className: "text-lg font-semibold text-gray-900 mb-2", children: "Page Not Found" }),
      (0, import_jsx_runtime2.jsx)("p", { className: "text-gray-600 text-center mb-4", children: "The page you're looking for doesn't exist." }),
      (0, import_jsx_runtime2.jsx)(
        "button",
        {
          onClick: () => onRouteChange("/"),
          className: "px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700 transition-colors",
          children: "Go Home"
        }
      )
    ] });
  }
  if (!canAccessRoute) {
    return (0, import_jsx_runtime2.jsx)(
      PermissionDenied,
      {
        route: matchedRoute,
        onBack: () => onRouteChange(fallbackRoute)
      }
    );
  }
  const RouteComponent = matchedRoute.component;
  return (0, import_jsx_runtime2.jsx)(RouteContainer, { children: (0, import_jsx_runtime2.jsx)(RouteComponent, {}) });
};
var createRoute = (path, component, options = {}) => ({
  path,
  component,
  ...options
});
var createProtectedRoute = (path, component, permissions, options = {}) => ({
  path,
  component,
  permissions,
  ...options
});
var createWorkspaceRoute = (path, component, workspaceTypes, options = {}) => ({
  path,
  component,
  workspaceTypes,
  ...options
});

// packages/workspace/src/components/WorkspaceArchive.tsx
var import_react3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var formatDate = (date) => {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit"
  }).format(date);
};
var formatFileSize = (bytes) => {
  const units = ["B", "KB", "MB", "GB", "TB"];
  let size = bytes;
  let unitIndex = 0;
  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024;
    unitIndex++;
  }
  return `${size.toFixed(1)} ${units[unitIndex]}`;
};
var WorkspaceArchive = ({
  workspace,
  archives,
  policies,
  onArchiveCreate,
  onArchiveRestore,
  onArchiveDelete,
  onPolicyUpdate,
  context = "neutral",
  showPolicies = true,
  showCompliance = true,
  permissions = [],
  className = ""
}) => {
  const [activeTab, setActiveTab] = (0, import_react3.useState)("archives");
  const [selectedArchive, setSelectedArchive] = (0, import_react3.useState)(null);
  const [showCreateModal, setShowCreateModal] = (0, import_react3.useState)(false);
  const [showRestoreModal, setShowRestoreModal] = (0, import_react3.useState)(false);
  const [archiveFilter, setArchiveFilter] = (0, import_react3.useState)("all");
  const [searchQuery, setSearchQuery] = (0, import_react3.useState)("");
  const [sortBy, setSortBy] = (0, import_react3.useState)("date");
  const [sortOrder, setSortOrder] = (0, import_react3.useState)("desc");
  const canCreateArchive = permissions.includes("archive:create") || context === "admin";
  const canRestoreArchive = permissions.includes("archive:restore") || context === "admin";
  const canDeleteArchive = permissions.includes("archive:delete") || context === "admin";
  const canManagePolicies = permissions.includes("archive:manage_policies") || context === "admin";
  const filteredArchives = (0, import_react3.useMemo)(() => {
    let filtered = archives.filter((archive) => {
      if (archiveFilter !== "all" && archive.status !== archiveFilter) {
        return false;
      }
      if (searchQuery && !archive.name.toLowerCase().includes(searchQuery.toLowerCase()) && !archive.description.toLowerCase().includes(searchQuery.toLowerCase())) {
        return false;
      }
      return true;
    });
    filtered.sort((a, b) => {
      let comparison = 0;
      switch (sortBy) {
        case "name":
          comparison = a.name.localeCompare(b.name);
          break;
        case "date":
          comparison = new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
          break;
        case "size":
          comparison = a.size - b.size;
          break;
      }
      return sortOrder === "asc" ? comparison : -comparison;
    });
    return filtered;
  }, [archives, archiveFilter, searchQuery, sortBy, sortOrder]);
  const getStatusBadge = (status) => {
    switch (status) {
      case "active":
        return { variant: "success", label: "Active" };
      case "archived":
        return { variant: "secondary", label: "Archived" };
      case "deleted":
        return { variant: "error", label: "Deleted" };
      default:
        return { variant: "secondary", label: status };
    }
  };
  const getTypeBadge = (type) => {
    switch (type) {
      case "full":
        return { variant: "primary", label: "Full Backup" };
      case "incremental":
        return { variant: "secondary", label: "Incremental" };
      default:
        return { variant: "secondary", label: type };
    }
  };
  const complianceStatus = (0, import_react3.useMemo)(() => {
    const totalArchives = archives.length;
    const compliantArchives = archives.filter((archive) => {
      const policy = policies.find((p) => p.id === archive.retentionPolicy.id);
      if (!policy) return false;
      const daysSinceCreation = Math.floor(
        (Date.now() - new Date(archive.createdAt).getTime()) / (1e3 * 60 * 60 * 24)
      );
      return daysSinceCreation <= policy.retentionPeriod;
    }).length;
    return {
      total: totalArchives,
      compliant: compliantArchives,
      percentage: totalArchives > 0 ? Math.round(compliantArchives / totalArchives * 100) : 100
    };
  }, [archives, policies]);
  const handleCreateArchive = (0, import_react3.useCallback)((data) => {
    onArchiveCreate == null ? void 0 : onArchiveCreate(data);
    setShowCreateModal(false);
  }, [onArchiveCreate]);
  const handleRestoreArchive = (0, import_react3.useCallback)((archive) => {
    onArchiveRestore == null ? void 0 : onArchiveRestore(archive);
    setShowRestoreModal(false);
    setSelectedArchive(null);
  }, [onArchiveRestore]);
  const handleDeleteArchive = (0, import_react3.useCallback)((archive) => {
    if (window.confirm(`Are you sure you want to delete archive "${archive.name}"? This action cannot be undone.`)) {
      onArchiveDelete == null ? void 0 : onArchiveDelete(archive);
      setSelectedArchive(null);
    }
  }, [onArchiveDelete]);
  return (0, import_jsx_runtime3.jsxs)("div", { className: cn("workspace-archive", className), children: [
    (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between mb-6", children: [
      (0, import_jsx_runtime3.jsxs)("div", { children: [
        (0, import_jsx_runtime3.jsx)("h2", { className: "text-2xl font-semibold text-gray-900 dark:text-white", children: "Archive Management" }),
        (0, import_jsx_runtime3.jsxs)("p", { className: "text-sm text-gray-600 dark:text-gray-400 mt-1", children: [
          "Manage data archival and retention for ",
          workspace.name
        ] })
      ] }),
      canCreateArchive && (0, import_jsx_runtime3.jsxs)(
        Button,
        {
          variant: "outline",
          onClick: () => setShowCreateModal(true),
          className: "flex items-center gap-2",
          children: [
            (0, import_jsx_runtime3.jsx)(Icon, { name: "Archive", size: "sm" }),
            "Create Archive"
          ]
        }
      )
    ] }),
    (0, import_jsx_runtime3.jsx)("div", { className: "border-b border-gray-200 mb-6", children: (0, import_jsx_runtime3.jsxs)("nav", { className: "-mb-px flex space-x-8", children: [
      (0, import_jsx_runtime3.jsxs)(
        "button",
        {
          onClick: () => setActiveTab("archives"),
          className: cn(
            "py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2",
            activeTab === "archives" ? "border-blue-500 text-blue-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
          ),
          children: [
            (0, import_jsx_runtime3.jsx)(Icon, { name: "Archive", size: "sm" }),
            "Archives (",
            archives.length,
            ")"
          ]
        }
      ),
      showPolicies && (0, import_jsx_runtime3.jsxs)(
        "button",
        {
          onClick: () => setActiveTab("policies"),
          className: cn(
            "py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2",
            activeTab === "policies" ? "border-blue-500 text-blue-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
          ),
          children: [
            (0, import_jsx_runtime3.jsx)(Icon, { name: "FileText", size: "sm" }),
            "Policies (",
            policies.length,
            ")"
          ]
        }
      ),
      showCompliance && (0, import_jsx_runtime3.jsxs)(
        "button",
        {
          onClick: () => setActiveTab("compliance"),
          className: cn(
            "py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2",
            activeTab === "compliance" ? "border-blue-500 text-blue-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
          ),
          children: [
            (0, import_jsx_runtime3.jsx)(Icon, { name: "ShieldCheck", size: "sm" }),
            "Compliance (",
            complianceStatus.percentage,
            "%)"
          ]
        }
      )
    ] }) }),
    activeTab === "archives" && (0, import_jsx_runtime3.jsxs)("div", { className: "space-y-4", children: [
      (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between", children: [
        (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col sm:flex-row gap-3 flex-1", children: [
          (0, import_jsx_runtime3.jsx)(
            Input,
            {
              name: "search",
              placeholder: "Search archives...",
              value: searchQuery,
              onChange: (e) => setSearchQuery(e.target.value),
              className: "sm:max-w-xs"
            }
          ),
          (0, import_jsx_runtime3.jsxs)(
            "select",
            {
              value: archiveFilter,
              onChange: (e) => setArchiveFilter(e.target.value),
              className: "px-3 py-2 border border-gray-300 rounded-md text-sm",
              children: [
                (0, import_jsx_runtime3.jsx)("option", { value: "all", children: "All Archives" }),
                (0, import_jsx_runtime3.jsx)("option", { value: "active", children: "Active" }),
                (0, import_jsx_runtime3.jsx)("option", { value: "archived", children: "Archived" }),
                (0, import_jsx_runtime3.jsx)("option", { value: "deleted", children: "Deleted" })
              ]
            }
          )
        ] }),
        (0, import_jsx_runtime3.jsxs)("div", { className: "flex gap-2", children: [
          (0, import_jsx_runtime3.jsxs)(
            "select",
            {
              value: sortBy,
              onChange: (e) => setSortBy(e.target.value),
              className: "px-3 py-2 border border-gray-300 rounded-md text-sm",
              children: [
                (0, import_jsx_runtime3.jsx)("option", { value: "date", children: "Sort by Date" }),
                (0, import_jsx_runtime3.jsx)("option", { value: "name", children: "Sort by Name" }),
                (0, import_jsx_runtime3.jsx)("option", { value: "size", children: "Sort by Size" })
              ]
            }
          ),
          (0, import_jsx_runtime3.jsx)(
            Button,
            {
              variant: "ghost",
              size: "sm",
              onClick: () => setSortOrder(sortOrder === "asc" ? "desc" : "asc"),
              children: (0, import_jsx_runtime3.jsx)(Icon, { name: sortOrder === "asc" ? "ArrowUp" : "ArrowDown", size: "sm" })
            }
          )
        ] })
      ] }),
      (0, import_jsx_runtime3.jsx)("div", { className: "grid gap-4", children: filteredArchives.length === 0 ? (0, import_jsx_runtime3.jsxs)(Card, { className: "p-8 text-center", children: [
        (0, import_jsx_runtime3.jsx)(Icon, { name: "Archive", size: "lg", className: "mx-auto mb-4 text-gray-400" }),
        (0, import_jsx_runtime3.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-white mb-2", children: "No archives found" }),
        (0, import_jsx_runtime3.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-4", children: searchQuery || archiveFilter !== "all" ? "Try adjusting your search or filters" : "Create your first archive to get started" }),
        canCreateArchive && !searchQuery && archiveFilter === "all" && (0, import_jsx_runtime3.jsx)(Button, { variant: "outline", onClick: () => setShowCreateModal(true), children: "Create Archive" })
      ] }) : filteredArchives.map((archive) => {
        const statusBadge = getStatusBadge(archive.status);
        const typeBadge = getTypeBadge(archive.type);
        const policy = policies.find((p) => p.id === archive.retentionPolicy.id);
        return (0, import_jsx_runtime3.jsx)(Card, { className: "p-6", children: (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-start justify-between", children: [
          (0, import_jsx_runtime3.jsxs)("div", { className: "flex-1", children: [
            (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center gap-3 mb-2", children: [
              (0, import_jsx_runtime3.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-white", children: archive.name }),
              (0, import_jsx_runtime3.jsx)(Badge, { variant: statusBadge.variant, children: statusBadge.label }),
              (0, import_jsx_runtime3.jsx)(Badge, { variant: typeBadge.variant, children: typeBadge.label }),
              archive.encryption && (0, import_jsx_runtime3.jsxs)(Badge, { variant: "info", children: [
                (0, import_jsx_runtime3.jsx)(Icon, { name: "Lock", size: "xs" }),
                "Encrypted"
              ] })
            ] }),
            (0, import_jsx_runtime3.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-4", children: archive.description }),
            (0, import_jsx_runtime3.jsxs)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [
              (0, import_jsx_runtime3.jsxs)("div", { children: [
                (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "Created:" }),
                (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: formatDate(archive.createdAt) })
              ] }),
              (0, import_jsx_runtime3.jsxs)("div", { children: [
                (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "Size:" }),
                (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: formatFileSize(archive.size) })
              ] }),
              (0, import_jsx_runtime3.jsxs)("div", { children: [
                (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "Policy:" }),
                (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: (policy == null ? void 0 : policy.name) || "Unknown" })
              ] }),
              archive.expiresAt && (0, import_jsx_runtime3.jsxs)("div", { children: [
                (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "Expires:" }),
                (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: formatDate(archive.expiresAt) })
              ] })
            ] })
          ] }),
          (0, import_jsx_runtime3.jsxs)("div", { className: "flex gap-2 ml-4", children: [
            (0, import_jsx_runtime3.jsxs)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                onClick: () => setSelectedArchive(archive),
                children: [
                  (0, import_jsx_runtime3.jsx)(Icon, { name: "Eye", size: "sm" }),
                  "View"
                ]
              }
            ),
            canRestoreArchive && archive.status === "archived" && (0, import_jsx_runtime3.jsxs)(
              Button,
              {
                variant: "outline",
                size: "sm",
                onClick: () => {
                  setSelectedArchive(archive);
                  setShowRestoreModal(true);
                },
                children: [
                  (0, import_jsx_runtime3.jsx)(Icon, { name: "RefreshCw", size: "sm" }),
                  "Restore"
                ]
              }
            ),
            canDeleteArchive && archive.status !== "deleted" && (0, import_jsx_runtime3.jsxs)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                onClick: () => handleDeleteArchive(archive),
                className: "text-red-600 hover:text-red-700",
                children: [
                  (0, import_jsx_runtime3.jsx)(Icon, { name: "Trash2", size: "sm" }),
                  "Delete"
                ]
              }
            )
          ] })
        ] }) }, archive.id);
      }) })
    ] }),
    activeTab === "policies" && showPolicies && (0, import_jsx_runtime3.jsxs)("div", { className: "space-y-4", children: [
      (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between", children: [
        (0, import_jsx_runtime3.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-white", children: "Retention Policies" }),
        canManagePolicies && (0, import_jsx_runtime3.jsxs)(Button, { variant: "outline", size: "sm", children: [
          (0, import_jsx_runtime3.jsx)(Icon, { name: "Plus", size: "sm" }),
          "Add Policy"
        ] })
      ] }),
      (0, import_jsx_runtime3.jsx)("div", { className: "grid gap-4", children: policies.map((policy) => (0, import_jsx_runtime3.jsx)(Card, { className: "p-6", children: (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-start justify-between", children: [
        (0, import_jsx_runtime3.jsxs)("div", { className: "flex-1", children: [
          (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center gap-3 mb-2", children: [
            (0, import_jsx_runtime3.jsx)("h4", { className: "text-lg font-medium text-gray-900 dark:text-white", children: policy.name }),
            (0, import_jsx_runtime3.jsx)(Badge, { variant: "secondary", children: policy.category })
          ] }),
          (0, import_jsx_runtime3.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-4", children: policy.description }),
          (0, import_jsx_runtime3.jsxs)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [
            (0, import_jsx_runtime3.jsxs)("div", { children: [
              (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "Retention:" }),
              (0, import_jsx_runtime3.jsxs)("div", { className: "font-medium", children: [
                policy.retentionPeriod,
                " days"
              ] })
            ] }),
            (0, import_jsx_runtime3.jsxs)("div", { children: [
              (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "Auto Delete:" }),
              (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: policy.autoDelete ? "Enabled" : "Disabled" })
            ] }),
            (0, import_jsx_runtime3.jsxs)("div", { children: [
              (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "Compression:" }),
              (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: policy.compressionEnabled ? "Enabled" : "Disabled" })
            ] }),
            (0, import_jsx_runtime3.jsxs)("div", { children: [
              (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "Encryption:" }),
              (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: policy.encryptionRequired ? "Required" : "Optional" })
            ] })
          ] })
        ] }),
        canManagePolicies && (0, import_jsx_runtime3.jsx)("div", { className: "flex gap-2 ml-4", children: (0, import_jsx_runtime3.jsxs)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            onClick: () => onPolicyUpdate == null ? void 0 : onPolicyUpdate(policy),
            children: [
              (0, import_jsx_runtime3.jsx)(Icon, { name: "Edit", size: "sm" }),
              "Edit"
            ]
          }
        ) })
      ] }) }, policy.id)) })
    ] }),
    activeTab === "compliance" && showCompliance && (0, import_jsx_runtime3.jsxs)("div", { className: "space-y-6", children: [
      (0, import_jsx_runtime3.jsxs)("div", { children: [
        (0, import_jsx_runtime3.jsx)("h3", { className: "text-lg font-medium text-gray-900 dark:text-white mb-4", children: "Compliance Overview" }),
        (0, import_jsx_runtime3.jsxs)(Card, { className: "p-6", children: [
          (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [
            (0, import_jsx_runtime3.jsxs)("div", { children: [
              (0, import_jsx_runtime3.jsx)("h4", { className: "text-lg font-medium text-gray-900 dark:text-white", children: "Overall Compliance Score" }),
              (0, import_jsx_runtime3.jsxs)("p", { className: "text-gray-600 dark:text-gray-400", children: [
                complianceStatus.compliant,
                " of ",
                complianceStatus.total,
                " archives compliant"
              ] })
            ] }),
            (0, import_jsx_runtime3.jsx)("div", { className: "text-right", children: (0, import_jsx_runtime3.jsxs)("div", { className: "text-3xl font-bold text-gray-900 dark:text-white", children: [
              complianceStatus.percentage,
              "%"
            ] }) })
          ] }),
          (0, import_jsx_runtime3.jsx)(
            Progress,
            {
              value: complianceStatus.percentage,
              className: "mb-4"
            }
          ),
          complianceStatus.percentage < 100 && (0, import_jsx_runtime3.jsxs)(Alert, { variant: "warning", children: [
            (0, import_jsx_runtime3.jsx)(Icon, { name: "AlertTriangle", size: "sm" }),
            "Some archives may not be compliant with retention policies. Review and update as needed."
          ] })
        ] })
      ] }),
      (0, import_jsx_runtime3.jsxs)("div", { children: [
        (0, import_jsx_runtime3.jsx)("h4", { className: "text-lg font-medium text-gray-900 dark:text-white mb-4", children: "Policy Compliance Breakdown" }),
        (0, import_jsx_runtime3.jsx)("div", { className: "grid gap-4", children: policies.map((policy) => {
          const policyArchives = archives.filter((a) => a.retentionPolicy.id === policy.id);
          const compliantCount = policyArchives.filter((archive) => {
            const daysSinceCreation = Math.floor(
              (Date.now() - new Date(archive.createdAt).getTime()) / (1e3 * 60 * 60 * 24)
            );
            return daysSinceCreation <= policy.retentionPeriod;
          }).length;
          const complianceRate = policyArchives.length > 0 ? Math.round(compliantCount / policyArchives.length * 100) : 100;
          return (0, import_jsx_runtime3.jsx)(Card, { className: "p-4", children: (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between", children: [
            (0, import_jsx_runtime3.jsxs)("div", { children: [
              (0, import_jsx_runtime3.jsx)("h5", { className: "font-medium text-gray-900 dark:text-white", children: policy.name }),
              (0, import_jsx_runtime3.jsxs)("p", { className: "text-sm text-gray-600 dark:text-gray-400", children: [
                compliantCount,
                " of ",
                policyArchives.length,
                " archives compliant"
              ] })
            ] }),
            (0, import_jsx_runtime3.jsxs)("div", { className: "text-right", children: [
              (0, import_jsx_runtime3.jsxs)("div", { className: "text-lg font-semibold text-gray-900 dark:text-white", children: [
                complianceRate,
                "%"
              ] }),
              (0, import_jsx_runtime3.jsx)(
                Badge,
                {
                  variant: complianceRate >= 90 ? "success" : complianceRate >= 70 ? "warning" : "error",
                  children: complianceRate >= 90 ? "Compliant" : complianceRate >= 70 ? "Warning" : "Non-compliant"
                }
              )
            ] })
          ] }) }, policy.id);
        }) })
      ] })
    ] }),
    showCreateModal && (0, import_jsx_runtime3.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: (0, import_jsx_runtime3.jsxs)(Card, { className: "p-6 max-w-md w-full mx-4", children: [
      (0, import_jsx_runtime3.jsx)("h3", { className: "text-lg font-medium mb-4", children: "Create Archive" }),
      (0, import_jsx_runtime3.jsx)("p", { className: "text-gray-600 mb-4", children: "Archive creation modal would go here." }),
      (0, import_jsx_runtime3.jsxs)("div", { className: "flex justify-end gap-2", children: [
        (0, import_jsx_runtime3.jsx)(Button, { variant: "ghost", onClick: () => setShowCreateModal(false), children: "Cancel" }),
        (0, import_jsx_runtime3.jsx)(Button, { onClick: () => setShowCreateModal(false), children: "Create" })
      ] })
    ] }) }),
    showRestoreModal && selectedArchive && (0, import_jsx_runtime3.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: (0, import_jsx_runtime3.jsxs)(Card, { className: "p-6 max-w-md w-full mx-4", children: [
      (0, import_jsx_runtime3.jsx)("h3", { className: "text-lg font-medium mb-4", children: "Restore Archive" }),
      (0, import_jsx_runtime3.jsxs)(Alert, { variant: "warning", className: "mb-4", children: [
        (0, import_jsx_runtime3.jsx)(Icon, { name: "AlertTriangle", size: "sm" }),
        "Restoring an archive will overwrite current workspace data. This action cannot be undone."
      ] }),
      (0, import_jsx_runtime3.jsxs)("div", { className: "flex justify-end gap-2", children: [
        (0, import_jsx_runtime3.jsx)(Button, { variant: "ghost", onClick: () => {
          setShowRestoreModal(false);
          setSelectedArchive(null);
        }, children: "Cancel" }),
        (0, import_jsx_runtime3.jsx)(Button, { onClick: () => handleRestoreArchive(selectedArchive), children: "Restore Archive" })
      ] })
    ] }) }),
    selectedArchive && !showRestoreModal && (0, import_jsx_runtime3.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: (0, import_jsx_runtime3.jsxs)(Card, { className: "p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto", children: [
      (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [
        (0, import_jsx_runtime3.jsx)("h3", { className: "text-lg font-medium", children: "Archive Details" }),
        (0, import_jsx_runtime3.jsx)(Button, { variant: "ghost", size: "sm", onClick: () => setSelectedArchive(null), children: (0, import_jsx_runtime3.jsx)(Icon, { name: "X", size: "sm" }) })
      ] }),
      (0, import_jsx_runtime3.jsx)("div", { className: "space-y-4", children: (0, import_jsx_runtime3.jsxs)("div", { children: [
        (0, import_jsx_runtime3.jsx)("h4", { className: "font-medium text-gray-900 dark:text-white mb-2", children: "Basic Information" }),
        (0, import_jsx_runtime3.jsxs)("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [
          (0, import_jsx_runtime3.jsxs)("div", { children: [
            (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500", children: "Name:" }),
            (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: selectedArchive.name })
          ] }),
          (0, import_jsx_runtime3.jsxs)("div", { children: [
            (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500", children: "Type:" }),
            (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: selectedArchive.type })
          ] }),
          (0, import_jsx_runtime3.jsxs)("div", { children: [
            (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500", children: "Status:" }),
            (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: selectedArchive.status })
          ] }),
          (0, import_jsx_runtime3.jsxs)("div", { children: [
            (0, import_jsx_runtime3.jsx)("span", { className: "text-gray-500", children: "Size:" }),
            (0, import_jsx_runtime3.jsx)("div", { className: "font-medium", children: formatFileSize(selectedArchive.size) })
          ] })
        ] })
      ] }) })
    ] }) })
  ] });
};
var WorkspaceArchive_default = WorkspaceArchive;
export {
  WorkspaceArchive_default as WorkspaceArchive,
  WorkspaceContextProvider,
  WorkspaceRouter,
  createProtectedRoute,
  createRoute,
  createWorkspaceRoute,
  useWorkspace
};
//# sourceMappingURL=@wheel_workspace.js.map
