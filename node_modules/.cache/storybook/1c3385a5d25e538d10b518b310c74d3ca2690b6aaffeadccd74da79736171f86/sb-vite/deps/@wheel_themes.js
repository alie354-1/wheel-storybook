import {
  require_jsx_runtime
} from "./chunk-ZJWUZLUK.js";
import {
  require_react
} from "./chunk-USEVLOEB.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// packages/themes/src/ThemeContext.tsx
var import_react = __toESM(require_react());

// packages/themes/src/defaults.ts
var primaryColorScale = {
  50: "#e0e7ff",
  100: "#c7d2fe",
  200: "#a5b4fc",
  300: "#818cf8",
  400: "#6366f1",
  500: "#1e1b4b",
  // Base midnight blue
  600: "#312e81",
  700: "#3730a3",
  800: "#4338ca",
  900: "#0f0c29"
};
var secondaryColorScale = {
  50: "#fffbeb",
  100: "#fef3c7",
  200: "#fde68a",
  300: "#fcd34d",
  400: "var(--warning)",
  500: "var(--warning)",
  // Base amber
  600: "#d97706",
  700: "#b45309",
  800: "#92400e",
  900: "#78350f"
};
var accentColorScale = {
  50: "#e8f4fd",
  100: "#d1e9fb",
  200: "#a3d3f7",
  300: "#75bdf3",
  400: "#47a6ef",
  500: "#6366f1",
  // Blend of primary and secondary
  600: "#1273bc",
  700: "#0e568d",
  800: "#0a395e",
  900: "#051d2f"
};
var successColorScale = {
  50: "#f3faf7",
  100: "#def7ec",
  200: "#bcf0da",
  300: "#84e1bc",
  400: "#31c48d",
  500: "#0e9f6e",
  600: "#057a55",
  700: "#046c4e",
  800: "#03543f",
  900: "#014737"
};
var warningColorScale = {
  50: "#fdfdea",
  100: "#fdf6b2",
  200: "#fce96a",
  300: "#faca15",
  400: "#e3a008",
  500: "#c27803",
  600: "#9f580a",
  700: "#8e4b10",
  800: "#723b13",
  900: "#633112"
};
var dangerColorScale = {
  50: "#fdf2f2",
  100: "#fde8e8",
  200: "#fbd5d5",
  300: "#f8b4b4",
  400: "#f98080",
  500: "#f05252",
  600: "#e02424",
  700: "#c81e1e",
  800: "#9b1c1c",
  900: "#771d1d"
};
var infoColorScale = {
  50: "#e8f4fd",
  100: "#d1e9fb",
  200: "#a3d3f7",
  300: "#75bdf3",
  400: "#47a6ef",
  500: "#1a90eb",
  600: "#1273bc",
  700: "#0e568d",
  800: "#0a395e",
  900: "#051d2f"
};
var neutralColorScale = {
  50: "var(--bg-secondary)",
  100: "var(--bg-secondary)",
  200: "var(--border-default)",
  300: "var(--border-default)",
  400: "var(--text-disabled)",
  500: "var(--text-secondary)",
  600: "var(--text-secondary)",
  700: "var(--text-secondary)",
  800: "var(--text-primary)",
  900: "var(--text-primary)"
};
var semanticColors = {
  // Background colors
  bgPrimary: "var(--bg-secondary)",
  bgSecondary: "var(--bg-secondary)",
  bgTertiary: "var(--border-default)",
  bgCard: "var(--bg-primary)",
  bgModal: "#ffffff",
  bgHover: "rgba(0, 0, 0, 0.05)",
  bgActive: "var(--shadow-color-light)",
  bgDisabled: "var(--border-default)",
  // Text colors
  textPrimary: "#1e1b4b",
  // Updated to midnight blue
  textSecondary: "var(--text-secondary)",
  textTertiary: "var(--text-disabled)",
  textDisabled: "var(--border-default)",
  textInverted: "var(--bg-primary)",
  textLink: "#3730a3",
  // Updated to midnight blue
  textLinkHover: "var(--warning)",
  // Updated to amber
  // Border colors
  borderDefault: "var(--border-default)",
  borderFocus: "#3730a3",
  // Updated to midnight blue
  borderDisabled: "var(--border-default)",
  // Other semantic colors
  shadow: "var(--shadow-color-light)",
  overlay: "var(--overlay-background)",
  // Gradient backgrounds
  bgGradientPrimary: "linear-gradient(135deg, #0f0c29 0%, #1e1b4b 25%, #312e81 50%, #d97706 75%, var(--warning) 100%)",
  bgGradientMidnight: "linear-gradient(135deg, #1e1b4b 0%, #3730a3 100%)",
  bgGradientAmber: "linear-gradient(135deg, var(--warning) 0%, #d97706 100%)",
  bgGradientJourney: "linear-gradient(135deg, var(--warning) 0%, #d97706 50%, #b45309 100%)"
};
var typography = {
  fonts: {
    sans: "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif",
    serif: "Georgia, Cambria, 'Times New Roman', Times, serif",
    mono: "Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace"
  },
  fontSizes: {
    xs: "0.75rem",
    sm: "0.875rem",
    base: "1rem",
    md: "1.125rem",
    lg: "1.25rem",
    xl: "1.5rem",
    "2xl": "1.875rem",
    "3xl": "2.25rem",
    "4xl": "3rem",
    "5xl": "4rem"
  },
  fontWeights: {
    thin: 100,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  lineHeights: {
    none: "1",
    tight: "1.25",
    snug: "1.375",
    normal: "1.5",
    relaxed: "1.625",
    loose: "2"
  },
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  }
};
var spacing = {
  0: "0",
  1: "0.25rem",
  2: "0.5rem",
  3: "0.75rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  8: "2rem",
  10: "2.5rem",
  12: "3rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  32: "8rem",
  40: "10rem",
  48: "12rem",
  56: "14rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};
var borders = {
  width: {
    none: "0",
    thin: "1px",
    base: "2px",
    thick: "4px",
    thicker: "8px"
  },
  radius: {
    none: "0",
    sm: "0.125rem",
    base: "0.25rem",
    md: "0.375rem",
    lg: "0.5rem",
    xl: "0.75rem",
    full: "9999px"
  },
  styles: {
    solid: "solid",
    dashed: "dashed",
    dotted: "dotted",
    double: "double"
  }
};
var shadows = {
  none: "none",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 var(--shadow-color-light), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px var(--shadow-color-light), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px var(--shadow-color-light), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px var(--shadow-color-light), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  inner: "inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)",
  outline: "0 0 0 3px rgba(55, 48, 163, 0.5)"
  // Updated to midnight blue
};
var animations = {
  durations: {
    fastest: "50ms",
    fast: "100ms",
    normal: "200ms",
    slow: "300ms",
    slowest: "500ms"
  },
  easings: {
    linear: "linear",
    ease: "ease",
    easeIn: "ease-in",
    easeOut: "ease-out",
    easeInOut: "ease-in-out"
  },
  transitions: {
    default: "all 200ms ease",
    slow: "all 300ms ease",
    fast: "all 100ms ease"
  },
  keyframes: {
    spin: "@keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }",
    ping: "@keyframes ping { 0% { transform: scale(1); opacity: 1; } 75%, 100% { transform: scale(2); opacity: 0; } }",
    pulse: "@keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: .5; } }",
    bounce: "@keyframes bounce { 0%, 100% { transform: translateY(-25%); animation-timing-function: cubic-bezier(0.8, 0, 1, 1); } 50% { transform: translateY(0); animation-timing-function: cubic-bezier(0, 0, 0.2, 1); } }",
    ambient: "@keyframes ambient { 0% { opacity: 0.8; transform: scale(1); } 100% { opacity: 1; transform: scale(1.05); } }"
  }
};
var breakpoints = {
  xs: "480px",
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px",
  "2xl": "1536px"
};
var zIndices = {
  hide: -1,
  auto: 0,
  base: 1,
  dropdown: 1e3,
  sticky: 1100,
  fixed: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  toast: 1600,
  tooltip: 1700
};
var defaultTheme = {
  // Metadata
  id: "default",
  name: "THE WHEEL Default Theme",
  description: "The default theme for The Wheel",
  version: "1.0.0",
  author: "The Wheel Team",
  isPublic: true,
  // Core theme properties
  colors: {
    primary: primaryColorScale,
    secondary: secondaryColorScale,
    accent: accentColorScale,
    success: successColorScale,
    warning: warningColorScale,
    danger: dangerColorScale,
    info: infoColorScale,
    neutral: neutralColorScale
  },
  semanticColors,
  typography,
  spacing,
  borders,
  shadows,
  animations,
  breakpoints,
  zIndices,
  // Custom settings
  custom: {
    assets: {
      logoUrl: "/logos/wheel_logo_primary.svg"
    }
  }
};
var platformHeroTheme = {
  ...defaultTheme,
  name: "Platform Hero",
  description: "A bold theme for landing pages and hero sections",
  semanticColors: {
    ...defaultTheme.semanticColors,
    bgPrimary: "linear-gradient(135deg, #0f0c29 0%, #1e1b4b 25%, #312e81 50%, #d97706 75%, var(--warning) 100%)",
    bgModal: "#1e1b4b",
    textPrimary: "var(--bg-primary)",
    textSecondary: "#e0e0e0",
    textTertiary: "#a0a0a0",
    borderDefault: "#3d3d3d"
  },
  custom: {
    ...defaultTheme.custom,
    assets: {
      logoUrl: "/logos/wheel_logo_stacked.svg"
    }
  }
};
var founderDashboardTheme = {
  ...defaultTheme,
  name: "Founder Dashboard",
  description: "A dark theme for founder dashboards",
  semanticColors: {
    ...defaultTheme.semanticColors,
    bgPrimary: "#121212",
    bgSecondary: "#1e1e1e",
    bgTertiary: "#2d2d2d",
    bgCard: "#2d2d2d",
    bgModal: "#1e1e1e",
    textPrimary: "var(--bg-primary)",
    textSecondary: "#e0e0e0",
    textTertiary: "#a0a0a0",
    borderDefault: "#3d3d3d"
  },
  custom: {
    ...defaultTheme.custom,
    assets: {
      logoUrl: "/logos/wheel_logo_dashboard.svg"
    }
  }
};
var vcPortalTheme = {
  ...defaultTheme,
  name: "VC Portal",
  description: "A professional light theme for VC portals",
  semanticColors: {
    ...defaultTheme.semanticColors,
    bgPrimary: "var(--bg-primary)",
    bgSecondary: "#f8fafc",
    bgTertiary: "#f1f5f9",
    bgCard: "var(--bg-primary)",
    bgModal: "#ffffff",
    textPrimary: "#1e1b4b",
    textSecondary: "#334155",
    textTertiary: "#64748b",
    borderDefault: "#e2e8f0"
  },
  custom: {
    ...defaultTheme.custom,
    assets: {
      logoUrl: "/logos/wheel_logo_vc_portfolio.svg"
    }
  }
};
var journeyEnergyTheme = {
  ...defaultTheme,
  name: "Journey Energy",
  description: "An energetic theme for journey milestones",
  colors: {
    ...defaultTheme.colors,
    primary: secondaryColorScale,
    // Use amber as primary
    secondary: primaryColorScale
    // Use midnight blue as secondary
  },
  semanticColors: {
    ...defaultTheme.semanticColors,
    bgPrimary: "linear-gradient(135deg, var(--warning) 0%, #d97706 50%, #b45309 100%)",
    bgModal: "#b45309",
    textPrimary: "var(--bg-primary)",
    textSecondary: "#fef3c7",
    textTertiary: "var(--warning)",
    borderDefault: "#b45309"
  },
  custom: {
    ...defaultTheme.custom,
    assets: {
      logoUrl: "/logos/wheel_logo_journey_energy.svg"
    }
  }
};

// node_modules/tinycolor2/esm/tinycolor.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
var trimLeft = /^\s+/;
var trimRight = /\s+$/;
function tinycolor(color, opts) {
  color = color ? color : "";
  opts = opts || {};
  if (color instanceof tinycolor) {
    return color;
  }
  if (!(this instanceof tinycolor)) {
    return new tinycolor(color, opts);
  }
  var rgb = inputToRGB(color);
  this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
  this._gradientType = opts.gradientType;
  if (this._r < 1) this._r = Math.round(this._r);
  if (this._g < 1) this._g = Math.round(this._g);
  if (this._b < 1) this._b = Math.round(this._b);
  this._ok = rgb.ok;
}
tinycolor.prototype = {
  isDark: function isDark() {
    return this.getBrightness() < 128;
  },
  isLight: function isLight() {
    return !this.isDark();
  },
  isValid: function isValid() {
    return this._ok;
  },
  getOriginalInput: function getOriginalInput() {
    return this._originalInput;
  },
  getFormat: function getFormat() {
    return this._format;
  },
  getAlpha: function getAlpha() {
    return this._a;
  },
  getBrightness: function getBrightness() {
    var rgb = this.toRgb();
    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
  },
  getLuminance: function getLuminance() {
    var rgb = this.toRgb();
    var RsRGB, GsRGB, BsRGB, R, G, B;
    RsRGB = rgb.r / 255;
    GsRGB = rgb.g / 255;
    BsRGB = rgb.b / 255;
    if (RsRGB <= 0.03928) R = RsRGB / 12.92;
    else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    if (GsRGB <= 0.03928) G = GsRGB / 12.92;
    else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    if (BsRGB <= 0.03928) B = BsRGB / 12.92;
    else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    return 0.2126 * R + 0.7152 * G + 0.0722 * B;
  },
  setAlpha: function setAlpha(value) {
    this._a = boundAlpha(value);
    this._roundA = Math.round(100 * this._a) / 100;
    return this;
  },
  toHsv: function toHsv() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v,
      a: this._a
    };
  },
  toHsvString: function toHsvString() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    var h = Math.round(hsv.h * 360), s = Math.round(hsv.s * 100), v = Math.round(hsv.v * 100);
    return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
  },
  toHsl: function toHsl() {
    var hsl = rgbToHsl(this._r, this._g, this._b);
    return {
      h: hsl.h * 360,
      s: hsl.s,
      l: hsl.l,
      a: this._a
    };
  },
  toHslString: function toHslString() {
    var hsl = rgbToHsl(this._r, this._g, this._b);
    var h = Math.round(hsl.h * 360), s = Math.round(hsl.s * 100), l = Math.round(hsl.l * 100);
    return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
  },
  toHex: function toHex(allow3Char) {
    return rgbToHex(this._r, this._g, this._b, allow3Char);
  },
  toHexString: function toHexString(allow3Char) {
    return "#" + this.toHex(allow3Char);
  },
  toHex8: function toHex8(allow4Char) {
    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
  },
  toHex8String: function toHex8String(allow4Char) {
    return "#" + this.toHex8(allow4Char);
  },
  toRgb: function toRgb() {
    return {
      r: Math.round(this._r),
      g: Math.round(this._g),
      b: Math.round(this._b),
      a: this._a
    };
  },
  toRgbString: function toRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
  },
  toPercentageRgb: function toPercentageRgb() {
    return {
      r: Math.round(bound01(this._r, 255) * 100) + "%",
      g: Math.round(bound01(this._g, 255) * 100) + "%",
      b: Math.round(bound01(this._b, 255) * 100) + "%",
      a: this._a
    };
  },
  toPercentageRgbString: function toPercentageRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
  },
  toName: function toName() {
    if (this._a === 0) {
      return "transparent";
    }
    if (this._a < 1) {
      return false;
    }
    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
  },
  toFilter: function toFilter(secondColor) {
    var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
    var secondHex8String = hex8String;
    var gradientType = this._gradientType ? "GradientType = 1, " : "";
    if (secondColor) {
      var s = tinycolor(secondColor);
      secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
    }
    return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
  },
  toString: function toString(format) {
    var formatSet = !!format;
    format = format || this._format;
    var formattedString = false;
    var hasAlpha = this._a < 1 && this._a >= 0;
    var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
    if (needsAlphaFormat) {
      if (format === "name" && this._a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format === "hex" || format === "hex6") {
      formattedString = this.toHexString();
    }
    if (format === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format === "name") {
      formattedString = this.toName();
    }
    if (format === "hsl") {
      formattedString = this.toHslString();
    }
    if (format === "hsv") {
      formattedString = this.toHsvString();
    }
    return formattedString || this.toHexString();
  },
  clone: function clone() {
    return tinycolor(this.toString());
  },
  _applyModification: function _applyModification(fn, args) {
    var color = fn.apply(null, [this].concat([].slice.call(args)));
    this._r = color._r;
    this._g = color._g;
    this._b = color._b;
    this.setAlpha(color._a);
    return this;
  },
  lighten: function lighten() {
    return this._applyModification(_lighten, arguments);
  },
  brighten: function brighten() {
    return this._applyModification(_brighten, arguments);
  },
  darken: function darken() {
    return this._applyModification(_darken, arguments);
  },
  desaturate: function desaturate() {
    return this._applyModification(_desaturate, arguments);
  },
  saturate: function saturate() {
    return this._applyModification(_saturate, arguments);
  },
  greyscale: function greyscale() {
    return this._applyModification(_greyscale, arguments);
  },
  spin: function spin() {
    return this._applyModification(_spin, arguments);
  },
  _applyCombination: function _applyCombination(fn, args) {
    return fn.apply(null, [this].concat([].slice.call(args)));
  },
  analogous: function analogous() {
    return this._applyCombination(_analogous, arguments);
  },
  complement: function complement() {
    return this._applyCombination(_complement, arguments);
  },
  monochromatic: function monochromatic() {
    return this._applyCombination(_monochromatic, arguments);
  },
  splitcomplement: function splitcomplement() {
    return this._applyCombination(_splitcomplement, arguments);
  },
  // Disabled until https://github.com/bgrins/TinyColor/issues/254
  // polyad: function (number) {
  //   return this._applyCombination(polyad, [number]);
  // },
  triad: function triad() {
    return this._applyCombination(polyad, [3]);
  },
  tetrad: function tetrad() {
    return this._applyCombination(polyad, [4]);
  }
};
tinycolor.fromRatio = function(color, opts) {
  if (_typeof(color) == "object") {
    var newColor = {};
    for (var i in color) {
      if (color.hasOwnProperty(i)) {
        if (i === "a") {
          newColor[i] = color[i];
        } else {
          newColor[i] = convertToPercentage(color[i]);
        }
      }
    }
    color = newColor;
  }
  return tinycolor(color, opts);
};
function inputToRGB(color) {
  var rgb = {
    r: 0,
    g: 0,
    b: 0
  };
  var a = 1;
  var s = null;
  var v = null;
  var l = null;
  var ok = false;
  var format = false;
  if (typeof color == "string") {
    color = stringInputToObject(color);
  }
  if (_typeof(color) == "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s = convertToPercentage(color.s);
      v = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s, v);
      ok = true;
      format = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s = convertToPercentage(color.s);
      l = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s, l);
      ok = true;
      format = "hsl";
    }
    if (color.hasOwnProperty("a")) {
      a = color.a;
    }
  }
  a = boundAlpha(a);
  return {
    ok,
    format: color.format || format,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a
  };
}
function rgbToRgb(r, g, b) {
  return {
    r: bound01(r, 255) * 255,
    g: bound01(g, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b), min = Math.min(r, g, b);
  var h, s, l = (max + min) / 2;
  if (max == min) {
    h = s = 0;
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h,
    s,
    l
  };
}
function hslToRgb(h, s, l) {
  var r, g, b;
  h = bound01(h, 360);
  s = bound01(s, 100);
  l = bound01(l, 100);
  function hue2rgb(p2, q2, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p2 + (q2 - p2) * 6 * t;
    if (t < 1 / 2) return q2;
    if (t < 2 / 3) return p2 + (q2 - p2) * (2 / 3 - t) * 6;
    return p2;
  }
  if (s === 0) {
    r = g = b = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}
function rgbToHsv(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b), min = Math.min(r, g, b);
  var h, s, v = max;
  var d = max - min;
  s = max === 0 ? 0 : d / max;
  if (max == min) {
    h = 0;
  } else {
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h,
    s,
    v
  };
}
function hsvToRgb(h, s, v) {
  h = bound01(h, 360) * 6;
  s = bound01(s, 100);
  v = bound01(v, 100);
  var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [v, q, p, p, t, v][mod], g = [t, v, v, q, p, p][mod], b = [p, p, t, v, v, q][mod];
  return {
    r: r * 255,
    g: g * 255,
    b: b * 255
  };
}
function rgbToHex(r, g, b, allow3Char) {
  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
  if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
  }
  return hex.join("");
}
function rgbaToHex(r, g, b, a, allow4Char) {
  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];
  if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
  }
  return hex.join("");
}
function rgbaToArgbHex(r, g, b, a) {
  var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
  return hex.join("");
}
tinycolor.equals = function(color1, color2) {
  if (!color1 || !color2) return false;
  return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};
tinycolor.random = function() {
  return tinycolor.fromRatio({
    r: Math.random(),
    g: Math.random(),
    b: Math.random()
  });
};
function _desaturate(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl = tinycolor(color).toHsl();
  hsl.s -= amount / 100;
  hsl.s = clamp01(hsl.s);
  return tinycolor(hsl);
}
function _saturate(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl = tinycolor(color).toHsl();
  hsl.s += amount / 100;
  hsl.s = clamp01(hsl.s);
  return tinycolor(hsl);
}
function _greyscale(color) {
  return tinycolor(color).desaturate(100);
}
function _lighten(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl = tinycolor(color).toHsl();
  hsl.l += amount / 100;
  hsl.l = clamp01(hsl.l);
  return tinycolor(hsl);
}
function _brighten(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var rgb = tinycolor(color).toRgb();
  rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
  rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
  rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
  return tinycolor(rgb);
}
function _darken(color, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl = tinycolor(color).toHsl();
  hsl.l -= amount / 100;
  hsl.l = clamp01(hsl.l);
  return tinycolor(hsl);
}
function _spin(color, amount) {
  var hsl = tinycolor(color).toHsl();
  var hue = (hsl.h + amount) % 360;
  hsl.h = hue < 0 ? 360 + hue : hue;
  return tinycolor(hsl);
}
function _complement(color) {
  var hsl = tinycolor(color).toHsl();
  hsl.h = (hsl.h + 180) % 360;
  return tinycolor(hsl);
}
function polyad(color, number) {
  if (isNaN(number) || number <= 0) {
    throw new Error("Argument to polyad must be a positive number");
  }
  var hsl = tinycolor(color).toHsl();
  var result = [tinycolor(color)];
  var step = 360 / number;
  for (var i = 1; i < number; i++) {
    result.push(tinycolor({
      h: (hsl.h + i * step) % 360,
      s: hsl.s,
      l: hsl.l
    }));
  }
  return result;
}
function _splitcomplement(color) {
  var hsl = tinycolor(color).toHsl();
  var h = hsl.h;
  return [tinycolor(color), tinycolor({
    h: (h + 72) % 360,
    s: hsl.s,
    l: hsl.l
  }), tinycolor({
    h: (h + 216) % 360,
    s: hsl.s,
    l: hsl.l
  })];
}
function _analogous(color, results, slices) {
  results = results || 6;
  slices = slices || 30;
  var hsl = tinycolor(color).toHsl();
  var part = 360 / slices;
  var ret = [tinycolor(color)];
  for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
    hsl.h = (hsl.h + part) % 360;
    ret.push(tinycolor(hsl));
  }
  return ret;
}
function _monochromatic(color, results) {
  results = results || 6;
  var hsv = tinycolor(color).toHsv();
  var h = hsv.h, s = hsv.s, v = hsv.v;
  var ret = [];
  var modification = 1 / results;
  while (results--) {
    ret.push(tinycolor({
      h,
      s,
      v
    }));
    v = (v + modification) % 1;
  }
  return ret;
}
tinycolor.mix = function(color1, color2, amount) {
  amount = amount === 0 ? 0 : amount || 50;
  var rgb1 = tinycolor(color1).toRgb();
  var rgb2 = tinycolor(color2).toRgb();
  var p = amount / 100;
  var rgba = {
    r: (rgb2.r - rgb1.r) * p + rgb1.r,
    g: (rgb2.g - rgb1.g) * p + rgb1.g,
    b: (rgb2.b - rgb1.b) * p + rgb1.b,
    a: (rgb2.a - rgb1.a) * p + rgb1.a
  };
  return tinycolor(rgba);
};
tinycolor.readability = function(color1, color2) {
  var c1 = tinycolor(color1);
  var c2 = tinycolor(color2);
  return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
};
tinycolor.isReadable = function(color1, color2, wcag2) {
  var readability = tinycolor.readability(color1, color2);
  var wcag2Parms, out;
  out = false;
  wcag2Parms = validateWCAG2Parms(wcag2);
  switch (wcag2Parms.level + wcag2Parms.size) {
    case "AAsmall":
    case "AAAlarge":
      out = readability >= 4.5;
      break;
    case "AAlarge":
      out = readability >= 3;
      break;
    case "AAAsmall":
      out = readability >= 7;
      break;
  }
  return out;
};
tinycolor.mostReadable = function(baseColor, colorList, args) {
  var bestColor = null;
  var bestScore = 0;
  var readability;
  var includeFallbackColors, level, size;
  args = args || {};
  includeFallbackColors = args.includeFallbackColors;
  level = args.level;
  size = args.size;
  for (var i = 0; i < colorList.length; i++) {
    readability = tinycolor.readability(baseColor, colorList[i]);
    if (readability > bestScore) {
      bestScore = readability;
      bestColor = tinycolor(colorList[i]);
    }
  }
  if (tinycolor.isReadable(baseColor, bestColor, {
    level,
    size
  }) || !includeFallbackColors) {
    return bestColor;
  } else {
    args.includeFallbackColors = false;
    return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
  }
};
var names = tinycolor.names = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "0ff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "00f",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  burntsienna: "ea7e5d",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "0ff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "f0f",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "663399",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
var hexNames = tinycolor.hexNames = flip(names);
function flip(o) {
  var flipped = {};
  for (var i in o) {
    if (o.hasOwnProperty(i)) {
      flipped[o[i]] = i;
    }
  }
  return flipped;
}
function boundAlpha(a) {
  a = parseFloat(a);
  if (isNaN(a) || a < 0 || a > 1) {
    a = 1;
  }
  return a;
}
function bound01(n, max) {
  if (isOnePointZero(n)) n = "100%";
  var processPercent = isPercentage(n);
  n = Math.min(max, Math.max(0, parseFloat(n)));
  if (processPercent) {
    n = parseInt(n * max, 10) / 100;
  }
  if (Math.abs(n - max) < 1e-6) {
    return 1;
  }
  return n % max / parseFloat(max);
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function isOnePointZero(n) {
  return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") != -1;
}
function pad2(c) {
  return c.length == 1 ? "0" + c : "" + c;
}
function convertToPercentage(n) {
  if (n <= 1) {
    n = n * 100 + "%";
  }
  return n;
}
function convertDecimalToHex(d) {
  return Math.round(parseFloat(d) * 255).toString(16);
}
function convertHexToDecimal(h) {
  return parseIntFromHex(h) / 255;
}
var matchers = function() {
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  return {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
}();
function isValidCSSUnit(color) {
  return !!matchers.CSS_UNIT.exec(color);
}
function stringInputToObject(color) {
  color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
  var named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color == "transparent") {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 0,
      format: "name"
    };
  }
  var match;
  if (match = matchers.rgb.exec(color)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3]
    };
  }
  if (match = matchers.rgba.exec(color)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsl.exec(color)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3]
    };
  }
  if (match = matchers.hsla.exec(color)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsv.exec(color)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3]
    };
  }
  if (match = matchers.hsva.exec(color)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hex8.exec(color)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  if (match = matchers.hex6.exec(color)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  if (match = matchers.hex4.exec(color)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      a: convertHexToDecimal(match[4] + "" + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  if (match = matchers.hex3.exec(color)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function validateWCAG2Parms(parms) {
  var level, size;
  parms = parms || {
    level: "AA",
    size: "small"
  };
  level = (parms.level || "AA").toUpperCase();
  size = (parms.size || "small").toLowerCase();
  if (level !== "AA" && level !== "AAA") {
    level = "AA";
  }
  if (size !== "small" && size !== "large") {
    size = "small";
  }
  return {
    level,
    size
  };
}

// packages/themes/src/utils.ts
function mergeThemes(base, override) {
  var _a, _b, _c;
  const result = JSON.parse(JSON.stringify(base));
  if (override.id) result.id = override.id;
  if (override.name) result.name = override.name;
  if (override.description) result.description = override.description;
  if (override.version) result.version = override.version;
  if (override.author) result.author = override.author;
  if (override.isPublic !== void 0) result.isPublic = override.isPublic;
  if (override.colors) {
    Object.keys(override.colors).forEach((colorKey) => {
      var _a2;
      const overrideColor = (_a2 = override.colors) == null ? void 0 : _a2[colorKey];
      if (overrideColor) {
        if (!result.colors[colorKey]) {
          result.colors[colorKey] = { ...overrideColor };
        } else {
          result.colors[colorKey] = {
            ...result.colors[colorKey],
            ...overrideColor
          };
        }
      }
    });
  }
  if (override.semanticColors) {
    result.semanticColors = { ...result.semanticColors, ...override.semanticColors };
  }
  if (override.typography) {
    result.typography = {
      fonts: { ...result.typography.fonts, ...override.typography.fonts },
      fontSizes: { ...result.typography.fontSizes, ...override.typography.fontSizes },
      fontWeights: { ...result.typography.fontWeights, ...override.typography.fontWeights },
      lineHeights: { ...result.typography.lineHeights, ...override.typography.lineHeights },
      letterSpacings: { ...result.typography.letterSpacings, ...override.typography.letterSpacings }
    };
  }
  if (override.spacing) {
    result.spacing = { ...result.spacing, ...override.spacing };
  }
  if (override.borders) {
    result.borders = {
      width: { ...result.borders.width, ...override.borders.width },
      radius: { ...result.borders.radius, ...override.borders.radius },
      styles: override.borders.styles ? {
        ...result.borders.styles || {},
        ...override.borders.styles,
        // Ensure required properties are present
        solid: override.borders.styles.solid || (((_a = result.borders.styles) == null ? void 0 : _a.solid) || "solid")
      } : result.borders.styles || { solid: "solid" }
    };
  }
  if (override.shadows) {
    result.shadows = { ...result.shadows, ...override.shadows };
  }
  if (override.animations && result.animations) {
    const safeEasings = override.animations.easings ? {
      ...result.animations.easings,
      ...override.animations.easings,
      // Ensure required properties are present with non-undefined values
      ease: override.animations.easings.ease || result.animations.easings.ease || "ease"
    } : result.animations.easings;
    const safeTransitions = override.animations.transitions ? {
      ...result.animations.transitions,
      ...override.animations.transitions,
      // Ensure required properties are present with non-undefined values
      default: ((_b = override.animations.transitions) == null ? void 0 : _b.default) || ((_c = result.animations.transitions) == null ? void 0 : _c.default) || "all 0.3s ease"
    } : result.animations.transitions;
    result.animations = {
      durations: { ...result.animations.durations, ...override.animations.durations },
      easings: safeEasings,
      transitions: safeTransitions,
      keyframes: { ...result.animations.keyframes, ...override.animations.keyframes }
    };
  } else if (override.animations) {
    const defaultEasings = {
      ease: "ease",
      linear: "linear",
      easeIn: "ease-in",
      easeOut: "ease-out",
      easeInOut: "ease-in-out"
    };
    const defaultTransitions = {
      default: "all 0.3s ease"
    };
    result.animations = {
      ...override.animations,
      easings: override.animations.easings ? { ...defaultEasings, ...override.animations.easings } : defaultEasings,
      transitions: override.animations.transitions ? { ...defaultTransitions, ...override.animations.transitions } : defaultTransitions
    };
  }
  if (override.breakpoints) {
    result.breakpoints = { ...result.breakpoints, ...override.breakpoints };
  }
  if (override.zIndices) {
    result.zIndices = { ...result.zIndices, ...override.zIndices };
  }
  if (override.custom) {
    if (!result.custom) result.custom = {};
    if (override.custom.assets) {
      if (!result.custom.assets) result.custom.assets = {};
      result.custom.assets = { ...result.custom.assets, ...override.custom.assets };
    }
    if (override.custom.components) {
      if (!result.custom.components) result.custom.components = {};
      result.custom.components = { ...result.custom.components, ...override.custom.components };
    }
    if (override.custom.css) result.custom.css = override.custom.css;
    if (override.custom.javascript) result.custom.javascript = override.custom.javascript;
  }
  return result;
}
function validateTheme(theme) {
  if (!theme) throw new Error("Theme is required");
  if (typeof theme !== "object") throw new Error("Theme must be an object");
  if (!theme.name) throw new Error("Theme name is required");
  if (!theme.colors) throw new Error("Theme colors are required");
  if (!theme.semanticColors) throw new Error("Theme semantic colors are required");
  if (!theme.typography) throw new Error("Theme typography is required");
  if (!theme.borders) throw new Error("Theme borders are required");
  if (!theme.colors.primary) throw new Error("Primary color is required");
  if (!theme.colors.secondary) throw new Error("Secondary color is required");
  if (!theme.colors.accent) throw new Error("Accent color is required");
  if (!theme.semanticColors.bgPrimary) throw new Error("Background primary color is required");
  if (!theme.semanticColors.textPrimary) throw new Error("Text primary color is required");
  if (!theme.semanticColors.bgCard) throw new Error("Card background color is required");
  if (!theme.semanticColors.borderDefault) throw new Error("Border default color is required");
  if (!theme.typography.fonts || !theme.typography.fonts.sans) {
    throw new Error("Sans font is required");
  }
  if (!theme.typography.fontSizes || !theme.typography.fontSizes.base) {
    throw new Error("Base font size is required");
  }
  if (!theme.typography.fontWeights || theme.typography.fontWeights.normal === void 0 || theme.typography.fontWeights.bold === void 0) {
    throw new Error("Normal and bold font weights are required");
  }
  if (!theme.typography.lineHeights || !theme.typography.lineHeights.normal) {
    throw new Error("Normal line height is required");
  }
  if (!theme.typography.letterSpacings || !theme.typography.letterSpacings.normal) {
    throw new Error("Normal letter spacing is required");
  }
  if (!theme.borders.width || !theme.borders.width.base) {
    throw new Error("Base border width is required");
  }
  if (!theme.borders.radius || !theme.borders.radius.base) {
    throw new Error("Base border radius is required");
  }
  return theme;
}
function generateColorScale(baseColor) {
  const color = tinycolor(baseColor);
  return {
    50: tinycolor.mix(color, tinycolor("var(--bg-primary)"), 90).toHexString(),
    100: tinycolor.mix(color, tinycolor("var(--bg-primary)"), 80).toHexString(),
    200: tinycolor.mix(color, tinycolor("var(--bg-primary)"), 60).toHexString(),
    300: tinycolor.mix(color, tinycolor("var(--bg-primary)"), 40).toHexString(),
    400: tinycolor.mix(color, tinycolor("var(--bg-primary)"), 20).toHexString(),
    // 500 is the base color, provided by the caller
    600: tinycolor.mix(color, tinycolor("var(--text-primary)"), 10).toHexString(),
    700: tinycolor.mix(color, tinycolor("var(--text-primary)"), 20).toHexString(),
    800: tinycolor.mix(color, tinycolor("var(--text-primary)"), 30).toHexString(),
    900: tinycolor.mix(color, tinycolor("var(--text-primary)"), 40).toHexString()
  };
}
function themeToCSS(theme) {
  var _a;
  let css = ":root {\n";
  Object.entries(theme.colors).forEach(([colorName, colorScale]) => {
    Object.entries(colorScale).forEach(([shade, value]) => {
      css += `  --color-${colorName}-${shade}: ${value};
`;
    });
  });
  Object.entries(theme.semanticColors).forEach(([name, value]) => {
    if (value) {
      css += `  --${kebabCase(name)}: ${value};
`;
    }
  });
  Object.entries(theme.typography.fonts).forEach(([name, value]) => {
    if (value) {
      css += `  --font-${name}: ${value};
`;
    }
  });
  Object.entries(theme.typography.fontSizes).forEach(([name, value]) => {
    if (value) {
      css += `  --font-size-${kebabCase(name)}: ${value};
`;
    }
  });
  Object.entries(theme.typography.fontWeights).forEach(([name, value]) => {
    if (value) {
      css += `  --font-weight-${kebabCase(name)}: ${value};
`;
    }
  });
  Object.entries(theme.typography.lineHeights).forEach(([name, value]) => {
    if (value) {
      css += `  --line-height-${kebabCase(name)}: ${value};
`;
    }
  });
  Object.entries(theme.typography.letterSpacings).forEach(([name, value]) => {
    if (value) {
      css += `  --letter-spacing-${kebabCase(name)}: ${value};
`;
    }
  });
  if (theme.spacing) {
    Object.entries(theme.spacing).forEach(([name, value]) => {
      if (value) {
        css += `  --spacing-${name}: ${value};
`;
      }
    });
  }
  Object.entries(theme.borders.width).forEach(([name, value]) => {
    if (value) {
      css += `  --border-width-${kebabCase(name)}: ${value};
`;
    }
  });
  Object.entries(theme.borders.radius).forEach(([name, value]) => {
    if (value) {
      css += `  --border-radius-${kebabCase(name)}: ${value};
`;
    }
  });
  if (theme.borders.styles) {
    Object.entries(theme.borders.styles).forEach(([name, value]) => {
      if (value) {
        css += `  --border-style-${kebabCase(name)}: ${value};
`;
      }
    });
  }
  if (theme.shadows) {
    Object.entries(theme.shadows).forEach(([name, value]) => {
      if (value) {
        css += `  --shadow-${kebabCase(name)}: ${value};
`;
      }
    });
  }
  if (theme.animations) {
    Object.entries(theme.animations.durations).forEach(([name, value]) => {
      if (value) {
        css += `  --duration-${kebabCase(name)}: ${value};
`;
      }
    });
    Object.entries(theme.animations.easings).forEach(([name, value]) => {
      if (value) {
        css += `  --easing-${kebabCase(name)}: ${value};
`;
      }
    });
    if (theme.animations.transitions) {
      Object.entries(theme.animations.transitions).forEach(([name, value]) => {
        if (value) {
          css += `  --transition-${kebabCase(name)}: ${value};
`;
        }
      });
    }
  }
  if (theme.zIndices) {
    Object.entries(theme.zIndices).forEach(([name, value]) => {
      if (value !== void 0) {
        css += `  --z-index-${kebabCase(name)}: ${value};
`;
      }
    });
  }
  if (theme.breakpoints) {
    Object.entries(theme.breakpoints).forEach(([name, value]) => {
      if (value) {
        css += `  --breakpoint-${kebabCase(name)}: ${value};
`;
      }
    });
  }
  if ((_a = theme.custom) == null ? void 0 : _a.css) {
    css += `
  /* Custom CSS */
${theme.custom.css}
`;
  }
  css += "}\n";
  return css;
}
function getEffectiveTheme(theme, mode) {
  var _a, _b, _c;
  const effectiveTheme = { ...theme };
  if (mode.mode === "dark" && ((_a = theme.custom) == null ? void 0 : _a.darkMode)) {
    return mergeThemes(effectiveTheme, theme.custom.darkMode);
  } else if (mode.mode === "high-contrast" && ((_b = theme.custom) == null ? void 0 : _b.highContrast)) {
    return mergeThemes(effectiveTheme, theme.custom.highContrast);
  } else if (mode.customMode && ((_c = theme.custom) == null ? void 0 : _c[mode.customMode])) {
    return mergeThemes(effectiveTheme, theme.custom[mode.customMode]);
  }
  return effectiveTheme;
}
function kebabCase(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[\s_]+/g, "-").toLowerCase();
}

// packages/themes/src/ThemeContext.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
function themeToLegacy(theme) {
  return {
    primaryColor: theme.colors.primary[500],
    secondaryColor: theme.colors.secondary[500],
    backgroundColor: theme.semanticColors.bgPrimary,
    textColor: theme.semanticColors.textPrimary
  };
}
var ThemeContext = (0, import_react.createContext)({
  theme: defaultTheme,
  setTheme: () => {
  },
  mode: "light",
  setMode: () => {
  },
  legacyTheme: themeToLegacy(defaultTheme),
  applyTheme: () => {
  },
  resetTheme: () => {
  },
  isLoading: false,
  error: null
});
var useTheme = () => (0, import_react.useContext)(ThemeContext);
var ThemeProvider = ({ children }) => {
  const [theme, setThemeState] = (0, import_react.useState)(defaultTheme);
  const [mode, setModeState] = (0, import_react.useState)("light");
  const [
    isLoading
    /* setIsLoading */
  ] = (0, import_react.useState)(false);
  const [error, setError] = (0, import_react.useState)(null);
  const effectiveTheme = getEffectiveTheme(theme, mode);
  const legacyTheme = themeToLegacy(effectiveTheme);
  const applyTheme = (0, import_react.useCallback)(() => {
    const css = themeToCSS(effectiveTheme);
    const styleElement = document.getElementById("wheel-theme-styles");
    if (styleElement) {
      styleElement.innerHTML = css;
    } else {
      const newStyleElement = document.createElement("style");
      newStyleElement.id = "wheel-theme-styles";
      newStyleElement.innerHTML = css;
      document.head.appendChild(newStyleElement);
    }
  }, [effectiveTheme]);
  const setTheme = (0, import_react.useCallback)((newTheme) => {
    try {
      setThemeState(newTheme);
    } catch (e) {
      setError("Invalid theme format");
    }
  }, []);
  const resetTheme = (0, import_react.useCallback)(() => {
    setThemeState(defaultTheme);
    setModeState("light");
  }, []);
  (0, import_react.useEffect)(() => {
    applyTheme();
  }, [applyTheme]);
  return (0, import_jsx_runtime.jsx)(
    ThemeContext.Provider,
    {
      value: {
        theme,
        setTheme,
        mode,
        setMode: setModeState,
        legacyTheme,
        applyTheme,
        resetTheme,
        isLoading,
        error
      },
      children
    }
  );
};
export {
  ThemeProvider,
  defaultTheme,
  founderDashboardTheme,
  generateColorScale,
  getEffectiveTheme,
  journeyEnergyTheme,
  mergeThemes,
  platformHeroTheme,
  themeToCSS,
  useTheme,
  validateTheme,
  vcPortalTheme
};
//# sourceMappingURL=@wheel_themes.js.map
