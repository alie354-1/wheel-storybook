import {
  withHistory
} from "./chunk-TXWG4WBF.js";
import {
  Editable,
  Slate,
  withReact
} from "./chunk-BC4K4ZOO.js";
import {
  createEditor
} from "./chunk-R22ZQZEH.js";
import {
  es_default
} from "./chunk-S2T7PHXB.js";
import {
  Check,
  ChevronDown,
  ChevronRight,
  Circle,
  X,
  lucide_react_exports
} from "./chunk-TDQL2RD6.js";
import {
  CurrencyInput
} from "./chunk-E5JPOPMV.js";
import {
  c
} from "./chunk-CTAEXN73.js";
import {
  DayPicker
} from "./chunk-4LNVX564.js";
import {
  Resizable
} from "./chunk-OTP3FXEA.js";
import {
  isPossiblePhoneNumber,
  min_default
} from "./chunk-SJJXBOT7.js";
import {
  Close,
  Content,
  Description,
  Overlay,
  Portal,
  Root as Root3,
  Title
} from "./chunk-3XBVTSKT.js";
import {
  Root as Root5,
  Thumb
} from "./chunk-VEBNUUMV.js";
import {
  Content as Content3,
  List,
  Root2 as Root22,
  Trigger as Trigger2
} from "./chunk-IU3QFP7E.js";
import {
  Root
} from "./chunk-R3KZOC3R.js";
import {
  format
} from "./chunk-NEEEL3XU.js";
import {
  cva
} from "./chunk-6JCWOCCU.js";
import {
  Indicator,
  Root as Root4
} from "./chunk-HEFVNISR.js";
import {
  cn
} from "./chunk-GDBXIXOE.js";
import {
  Checkbox,
  CheckboxIndicator
} from "./chunk-CKXQGZWK.js";
import {
  CheckboxItem2,
  Content2,
  Item2,
  ItemIndicator2,
  Label2,
  Portal2,
  RadioItem2,
  Root2,
  Separator2,
  SubContent2,
  SubTrigger2,
  Trigger
} from "./chunk-HNKYCAI5.js";
import {
  require_jsx_runtime
} from "./chunk-ZJWUZLUK.js";
import {
  require_react
} from "./chunk-USEVLOEB.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// packages/ui/src/components/addressinput.tsx
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var AddressInput = ({
  value = { street: "", city: "", state: "", zip: "" },
  onChange,
  disabled = false,
  className = ""
}) => {
  const [address, setAddress] = (0, import_react.useState)(value);
  const handleChange = (e) => {
    const { name, value: value2 } = e.target;
    const newAddress = { ...address, [name]: value2 };
    setAddress(newAddress);
    if (onChange) {
      onChange(newAddress);
    }
  };
  return (0, import_jsx_runtime.jsxs)("div", { className: cn("grid grid-cols-1 gap-4", className), children: [
    (0, import_jsx_runtime.jsx)(
      "input",
      {
        type: "text",
        name: "street",
        value: address.street,
        onChange: handleChange,
        disabled,
        className: cn(
          "border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm",
          disabled ? "bg-gray-100" : ""
        ),
        placeholder: "Street"
      }
    ),
    (0, import_jsx_runtime.jsxs)("div", { className: "grid grid-cols-3 gap-4", children: [
      (0, import_jsx_runtime.jsx)(
        "input",
        {
          type: "text",
          name: "city",
          value: address.city,
          onChange: handleChange,
          disabled,
          className: cn(
            "border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm col-span-2",
            disabled ? "bg-gray-100" : ""
          ),
          placeholder: "City"
        }
      ),
      (0, import_jsx_runtime.jsx)(
        "input",
        {
          type: "text",
          name: "state",
          value: address.state,
          onChange: handleChange,
          disabled,
          className: cn(
            "border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm",
            disabled ? "bg-gray-100" : ""
          ),
          placeholder: "State"
        }
      )
    ] }),
    (0, import_jsx_runtime.jsx)(
      "input",
      {
        type: "text",
        name: "zip",
        value: address.zip,
        onChange: handleChange,
        disabled,
        className: cn(
          "border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50 rounded-md shadow-sm",
          disabled ? "bg-gray-100" : ""
        ),
        placeholder: "ZIP Code"
      }
    )
  ] });
};

// packages/ui/src/components/alert.tsx
var import_react2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var Alert = (0, import_react2.forwardRef)(({
  variant = "info",
  urgency = "medium",
  context = "neutral",
  title,
  description,
  actions,
  dismissible = false,
  onClose,
  className,
  children,
  ...props
}, ref) => {
  const getVariantClasses2 = () => {
    switch (variant) {
      case "success":
        return "bg-green-100 border-green-500 text-green-800";
      case "warning":
        return "bg-yellow-100 border-yellow-500 text-yellow-800";
      case "error":
        return "bg-red-100 border-red-500 text-red-800";
      case "info":
        return "bg-sky-100 border-sky-500 text-sky-800";
      default:
        return "bg-gray-100 border-gray-500 text-gray-800";
    }
  };
  const getContextClasses = () => {
    if (variant !== "info") return "";
    switch (context) {
      case "consultant":
        return "bg-blue-100 border-blue-500 text-blue-800";
      case "client":
        return "bg-green-100 border-green-500 text-green-800";
      case "admin":
        return "bg-gray-100 border-gray-500 text-gray-800";
      case "expert":
        return "bg-purple-100 border-purple-500 text-purple-800";
      case "toolCreator":
        return "bg-indigo-100 border-indigo-500 text-indigo-800";
      case "founder":
        return "bg-orange-100 border-orange-500 text-orange-800";
      default:
        return "";
    }
  };
  const alertClasses = cn(
    "p-4 border-l-4 rounded-r-lg",
    getContextClasses() || getVariantClasses2(),
    className
  );
  return (0, import_jsx_runtime2.jsx)("div", { ref, className: alertClasses, role: "alert", ...props, children: (0, import_jsx_runtime2.jsxs)("div", { className: "flex", children: [
    (0, import_jsx_runtime2.jsx)("div", { className: "flex-shrink-0" }),
    (0, import_jsx_runtime2.jsxs)("div", { className: "ml-3", children: [
      title && (0, import_jsx_runtime2.jsx)("h3", { className: "text-sm font-medium", children: title }),
      (0, import_jsx_runtime2.jsxs)("div", { className: "mt-2 text-sm", children: [
        description && (0, import_jsx_runtime2.jsx)("p", { children: description }),
        children
      ] }),
      actions && (0, import_jsx_runtime2.jsx)("div", { className: "mt-4", children: actions })
    ] }),
    dismissible && (0, import_jsx_runtime2.jsx)("div", { className: "ml-auto pl-3", children: (0, import_jsx_runtime2.jsx)("div", { className: "-mx-1.5 -my-1.5", children: (0, import_jsx_runtime2.jsxs)(
      "button",
      {
        type: "button",
        onClick: onClose,
        className: "inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2",
        children: [
          (0, import_jsx_runtime2.jsx)("span", { className: "sr-only", children: "Dismiss" }),
          (0, import_jsx_runtime2.jsx)(X, { className: "h-5 w-5" })
        ]
      }
    ) }) })
  ] }) });
});
Alert.displayName = "Alert";

// packages/ui/src/components/index.ts
import { Avatar } from "/Users/alexandracohen/Design-System/packages/ui/src/components/Avatar.tsx";
import { Badge } from "/Users/alexandracohen/Design-System/packages/ui/src/components/badge.tsx";

// packages/ui/src/components/billingstatus.tsx
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var BillingStatus = ({
  status,
  className = ""
}) => {
  const statusStyles = {
    paid: "bg-green-100 text-green-800",
    pending: "bg-yellow-100 text-yellow-800",
    overdue: "bg-red-100 text-red-800",
    draft: "bg-gray-100 text-gray-800"
  };
  return (0, import_jsx_runtime3.jsx)(
    "div",
    {
      className: cn(
        "inline-flex items-center rounded-full px-3 py-1 text-sm font-semibold",
        statusStyles[status],
        className
      ),
      children: status.charAt(0).toUpperCase() + status.slice(1)
    }
  );
};

// packages/ui/src/components/index.ts
import { BreadcrumbItem, Breadcrumbs } from "/Users/alexandracohen/Design-System/packages/ui/src/components/Breadcrumbs.tsx";
import { Button } from "/Users/alexandracohen/Design-System/packages/ui/src/components/button.tsx";
import { Card } from "/Users/alexandracohen/Design-System/packages/ui/src/components/card.tsx";

// packages/ui/src/components/checkbox.tsx
var React2 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var Checkbox2 = React2.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime4.jsx)(
  Checkbox,
  {
    ref,
    className: cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-slate-300 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-700 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-slate-700 data-[state=checked]:text-white",
      className
    ),
    ...props,
    children: (0, import_jsx_runtime4.jsx)(
      CheckboxIndicator,
      {
        className: cn("flex items-center justify-center text-current"),
        children: (0, import_jsx_runtime4.jsx)(Check, { className: "h-4 w-4" })
      }
    )
  }
));
Checkbox2.displayName = Checkbox.displayName;

// packages/ui/src/components/clientbadge.tsx
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var ClientBadge = ({
  client,
  className = ""
}) => {
  return (0, import_jsx_runtime5.jsxs)(
    "div",
    {
      className: cn(
        "inline-flex items-center rounded-full px-3 py-1 text-sm font-semibold bg-gray-100 text-gray-800",
        className
      ),
      children: [
        client.logo && (0, import_jsx_runtime5.jsx)(
          "img",
          {
            src: client.logo,
            alt: `${client.name} logo`,
            className: "w-5 h-5 rounded-full mr-2"
          }
        ),
        (0, import_jsx_runtime5.jsx)("span", { children: client.name })
      ]
    }
  );
};

// packages/ui/src/components/collaboratoravatar.tsx
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var CollaboratorAvatar = ({
  collaborator,
  size = "md",
  className = ""
}) => {
  const sizeClasses = {
    sm: "w-8 h-8",
    md: "w-10 h-10",
    lg: "w-12 h-12"
  };
  const getInitials = (name) => {
    return name.split(" ").map((n) => n[0]).join("").substring(0, 2).toUpperCase();
  };
  return (0, import_jsx_runtime6.jsx)(
    "div",
    {
      className: cn(
        "rounded-full flex items-center justify-center bg-gray-200 text-gray-700 font-bold",
        sizeClasses[size],
        className
      ),
      title: collaborator.name,
      children: collaborator.avatarUrl ? (0, import_jsx_runtime6.jsx)(
        "img",
        {
          src: collaborator.avatarUrl,
          alt: collaborator.name,
          className: "w-full h-full rounded-full"
        }
      ) : (0, import_jsx_runtime6.jsx)("span", { children: getInitials(collaborator.name) })
    }
  );
};

// packages/ui/src/components/colorpicker.tsx
var import_react3 = __toESM(require_react());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var ColorPicker = (0, import_react3.forwardRef)(({
  context = "neutral",
  value = "#000000",
  onChange,
  format: format2 = "hex",
  presets = ["#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#FF00FF", "#00FFFF"],
  allowCustom = true,
  validationState = "none",
  helperText,
  errorMessage,
  warningMessage,
  successMessage,
  label,
  required = false,
  disabled = false,
  name,
  id
}, ref) => {
  const [selectedColor, setSelectedColor] = (0, import_react3.useState)(value);
  const [isOpen, setIsOpen] = (0, import_react3.useState)(false);
  const dropdownRef = (0, import_react3.useRef)(null);
  const colorPickerId = id || `colorpicker-${Math.random().toString(36).substr(2, 9)}`;
  (0, import_react3.useEffect)(() => {
    setSelectedColor(value);
  }, [value]);
  const handleColorChange = (color) => {
    setSelectedColor(color);
    if (onChange) {
      onChange(color);
    }
  };
  const handlePresetSelect = (preset) => {
    handleColorChange(preset);
    setIsOpen(false);
  };
  (0, import_react3.useEffect)(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "border-blue-400 focus-within:ring-blue-500";
      case "client":
        return "border-green-400 focus-within:ring-green-500";
      case "admin":
        return "border-gray-400 focus-within:ring-gray-500";
      case "expert":
        return "border-purple-400 focus-within:ring-purple-500";
      case "toolCreator":
        return "border-indigo-400 focus-within:ring-indigo-500";
      case "founder":
        return "border-orange-400 focus-within:ring-orange-500";
      default:
        return "border-slate-300 focus-within:ring-slate-500";
    }
  };
  const getValidationClasses = () => {
    switch (validationState) {
      case "error":
        return "border-red-500 focus-within:ring-red-500";
      case "warning":
        return "border-yellow-500 focus-within:ring-yellow-500";
      case "success":
        return "border-green-500 focus-within:ring-green-500";
      default:
        return "";
    }
  };
  const containerClasses = [
    "relative inline-flex items-center p-1 border rounded-lg shadow-sm",
    "disabled:cursor-not-allowed disabled:opacity-50 transition-colors duration-200",
    validationState !== "none" ? getValidationClasses() : getContextClasses()
  ].filter(Boolean).join(" ");
  const currentMessage = (() => {
    if (errorMessage && validationState === "error") return { type: "error", message: errorMessage };
    if (warningMessage && validationState === "warning") return { type: "warning", message: warningMessage };
    if (successMessage && validationState === "success") return { type: "success", message: successMessage };
    if (helperText) return { type: "helper", message: helperText };
    return null;
  })();
  return (0, import_jsx_runtime7.jsxs)("div", { ref, children: [
    label && (0, import_jsx_runtime7.jsxs)("label", { htmlFor: colorPickerId, className: "block text-sm font-medium text-slate-700 mb-1", children: [
      label,
      required && (0, import_jsx_runtime7.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
    ] }),
    (0, import_jsx_runtime7.jsxs)("div", { className: containerClasses, ref: dropdownRef, children: [
      (0, import_jsx_runtime7.jsx)(
        "button",
        {
          type: "button",
          id: colorPickerId,
          className: "w-8 h-8 rounded-md border border-slate-300",
          style: { backgroundColor: selectedColor },
          onClick: () => setIsOpen(!isOpen),
          disabled,
          "aria-haspopup": "true",
          "aria-expanded": isOpen
        }
      ),
      (0, import_jsx_runtime7.jsx)(
        "input",
        {
          type: "text",
          className: "ml-2 p-1 w-32 border-none focus:ring-0",
          value: selectedColor,
          onChange: (e) => handleColorChange(e.target.value),
          disabled
        }
      ),
      isOpen && (0, import_jsx_runtime7.jsxs)("div", { className: "absolute top-full left-0 mt-2 p-4 bg-white border rounded-lg shadow-lg z-10", children: [
        (0, import_jsx_runtime7.jsx)("div", { className: "grid grid-cols-6 gap-2 mb-4", children: presets.map((preset) => (0, import_jsx_runtime7.jsx)(
          "button",
          {
            type: "button",
            className: "w-8 h-8 rounded-full border",
            style: { backgroundColor: preset },
            onClick: () => handlePresetSelect(preset)
          },
          preset
        )) }),
        allowCustom && (0, import_jsx_runtime7.jsx)(
          "input",
          {
            type: "color",
            className: "w-full h-10 p-0 border-none cursor-pointer",
            value: selectedColor,
            onChange: (e) => handleColorChange(e.target.value)
          }
        )
      ] })
    ] }),
    currentMessage && (0, import_jsx_runtime7.jsx)(
      "p",
      {
        className: `mt-1 text-sm ${currentMessage.type === "error" ? "text-red-600" : currentMessage.type === "warning" ? "text-yellow-600" : currentMessage.type === "success" ? "text-green-600" : "text-slate-600"}`,
        children: currentMessage.message
      }
    )
  ] });
});
ColorPicker.displayName = "ColorPicker";

// packages/ui/src/components/consenttoggle.tsx
var import_react4 = __toESM(require_react());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var ConsentToggle = ({
  onConsentChange,
  className = "",
  label,
  initialConsent = false
}) => {
  const [consent, setConsent] = (0, import_react4.useState)(initialConsent);
  const handleToggle = () => {
    const newConsent = !consent;
    setConsent(newConsent);
    onConsentChange(newConsent);
  };
  return (0, import_jsx_runtime8.jsxs)("div", { className: cn("flex items-center", className), children: [
    (0, import_jsx_runtime8.jsx)(
      "button",
      {
        type: "button",
        onClick: handleToggle,
        className: cn(
          "relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500",
          consent ? "bg-indigo-600" : "bg-gray-200"
        ),
        "aria-pressed": consent,
        children: (0, import_jsx_runtime8.jsx)(
          "span",
          {
            "aria-hidden": "true",
            className: cn(
              "pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200",
              consent ? "translate-x-5" : "translate-x-0"
            )
          }
        )
      }
    ),
    (0, import_jsx_runtime8.jsx)("span", { className: "ml-3 text-sm font-medium text-gray-900", children: label })
  ] });
};

// packages/ui/src/components/currencyinput.tsx
var import_react5 = __toESM(require_react());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var CustomCurrencyInput = (0, import_react5.forwardRef)(({
  context = "neutral",
  validationState = "none",
  helperText,
  errorMessage,
  warningMessage,
  successMessage,
  label,
  required = false,
  className = "",
  ...props
}, ref) => {
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "border-blue-400 focus:border-blue-600 focus:ring-blue-500 bg-blue-50";
      case "client":
        return "border-green-400 focus:border-green-600 focus:ring-green-500 bg-green-50";
      case "admin":
        return "border-gray-400 focus:border-gray-600 focus:ring-gray-500 bg-gray-50";
      case "expert":
        return "border-purple-400 focus:border-purple-600 focus:ring-purple-500 bg-purple-50";
      case "toolCreator":
        return "border-indigo-400 focus:border-indigo-600 focus:ring-indigo-500 bg-indigo-50";
      case "founder":
        return "border-orange-400 focus:border-orange-600 focus:ring-orange-500 bg-orange-50";
      default:
        return "border-slate-300 focus:border-slate-500 focus:ring-slate-500 bg-white";
    }
  };
  const getValidationClasses = () => {
    switch (validationState) {
      case "error":
        return "border-red-500 focus:border-red-500 focus:ring-red-500";
      case "warning":
        return "border-yellow-500 focus:border-yellow-500 focus:ring-yellow-500";
      case "success":
        return "border-green-500 focus:border-green-500 focus:ring-green-500";
      default:
        return "";
    }
  };
  const inputClasses = [
    "w-full px-3 py-2 text-base rounded-lg shadow-sm placeholder:text-slate-400",
    "focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-0",
    "disabled:cursor-not-allowed disabled:opacity-50 transition-colors duration-200",
    validationState !== "none" ? getValidationClasses() : getContextClasses(),
    className
  ].filter(Boolean).join(" ");
  const currentMessage = (() => {
    if (errorMessage && validationState === "error") return { type: "error", message: errorMessage };
    if (warningMessage && validationState === "warning") return { type: "warning", message: warningMessage };
    if (successMessage && validationState === "success") return { type: "success", message: successMessage };
    if (helperText) return { type: "helper", message: helperText };
    return null;
  })();
  const inputId = props.id || `currency-input-${Math.random().toString(36).substr(2, 9)}`;
  return (0, import_jsx_runtime9.jsxs)("div", { children: [
    label && (0, import_jsx_runtime9.jsxs)("label", { htmlFor: inputId, className: "block text-sm font-medium text-slate-700 mb-1", children: [
      label,
      required && (0, import_jsx_runtime9.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
    ] }),
    (0, import_jsx_runtime9.jsx)(
      CurrencyInput,
      {
        id: inputId,
        className: inputClasses,
        ref,
        ...props
      }
    ),
    currentMessage && (0, import_jsx_runtime9.jsx)(
      "p",
      {
        className: `mt-1 text-sm ${currentMessage.type === "error" ? "text-red-600" : currentMessage.type === "warning" ? "text-yellow-600" : currentMessage.type === "success" ? "text-green-600" : "text-slate-600"}`,
        children: currentMessage.message
      }
    )
  ] });
});
CustomCurrencyInput.displayName = "CurrencyInput";

// packages/ui/src/components/datepicker.tsx
var import_react6 = __toESM(require_react());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
import "/Users/alexandracohen/Design-System/node_modules/react-day-picker/src/style.css";
var DatePicker = (0, import_react6.forwardRef)(({
  context = "neutral",
  value,
  onChange,
  timezone,
  format: displayFormat = "PPP",
  minDate,
  maxDate,
  validationState = "none",
  helperText,
  errorMessage,
  warningMessage,
  successMessage,
  label,
  required = false,
  disabled = false,
  placeholder = "Select a date",
  name,
  id
}, ref) => {
  const [selectedDate, setSelectedDate] = (0, import_react6.useState)(value);
  const [isOpen, setIsOpen] = (0, import_react6.useState)(false);
  const dropdownRef = (0, import_react6.useRef)(null);
  const datePickerId = id || `datepicker-${Math.random().toString(36).substr(2, 9)}`;
  (0, import_react6.useEffect)(() => {
    setSelectedDate(value);
  }, [value]);
  const handleDateSelect = (date) => {
    setSelectedDate(date);
    if (onChange) {
      onChange(date);
    }
    setIsOpen(false);
  };
  (0, import_react6.useEffect)(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "border-blue-400 focus:border-blue-600 focus:ring-blue-500 bg-blue-50";
      case "client":
        return "border-green-400 focus:border-green-600 focus:ring-green-500 bg-green-50";
      case "admin":
        return "border-gray-400 focus:border-gray-600 focus:ring-gray-500 bg-gray-50";
      case "expert":
        return "border-purple-400 focus:border-purple-600 focus:ring-purple-500 bg-purple-50";
      case "toolCreator":
        return "border-indigo-400 focus:border-indigo-600 focus:ring-indigo-500 bg-indigo-50";
      case "founder":
        return "border-orange-400 focus:border-orange-600 focus:ring-orange-500 bg-orange-50";
      default:
        return "border-slate-300 focus:border-slate-500 focus:ring-slate-500 bg-white";
    }
  };
  const getValidationClasses = () => {
    switch (validationState) {
      case "error":
        return "border-red-500 focus:border-red-500 focus:ring-red-500";
      case "warning":
        return "border-yellow-500 focus:border-yellow-500 focus:ring-yellow-500";
      case "success":
        return "border-green-500 focus:border-green-500 focus:ring-green-500";
      default:
        return "";
    }
  };
  const inputClasses = [
    "w-full px-3 py-2 text-base rounded-lg shadow-sm placeholder:text-slate-400",
    "focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-0",
    "disabled:cursor-not-allowed disabled:opacity-50 transition-colors duration-200",
    validationState !== "none" ? getValidationClasses() : getContextClasses()
  ].filter(Boolean).join(" ");
  const currentMessage = (() => {
    if (errorMessage && validationState === "error") return { type: "error", message: errorMessage };
    if (warningMessage && validationState === "warning") return { type: "warning", message: warningMessage };
    if (successMessage && validationState === "success") return { type: "success", message: successMessage };
    if (helperText) return { type: "helper", message: helperText };
    return null;
  })();
  const formatDate = (date) => {
    return format(date, displayFormat);
  };
  return (0, import_jsx_runtime10.jsxs)("div", { className: "w-full", ref, children: [
    label && (0, import_jsx_runtime10.jsxs)("label", { htmlFor: datePickerId, className: "block text-sm font-medium text-slate-700 mb-1", children: [
      label,
      required && (0, import_jsx_runtime10.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
    ] }),
    (0, import_jsx_runtime10.jsxs)("div", { className: "relative", ref: dropdownRef, children: [
      (0, import_jsx_runtime10.jsx)(
        "input",
        {
          type: "text",
          id: datePickerId,
          name,
          className: inputClasses,
          value: selectedDate ? formatDate(selectedDate) : "",
          onClick: () => setIsOpen(!isOpen),
          onFocus: () => setIsOpen(true),
          readOnly: true,
          placeholder,
          disabled,
          "aria-invalid": validationState === "error",
          "aria-describedby": currentMessage ? `${datePickerId}-message` : void 0
        }
      ),
      isOpen && (0, import_jsx_runtime10.jsx)("div", { className: "absolute z-10 mt-1 bg-white border border-slate-300 rounded-md shadow-lg", children: (0, import_jsx_runtime10.jsx)(
        DayPicker,
        {
          mode: "single",
          selected: selectedDate,
          onSelect: handleDateSelect,
          fromDate: minDate,
          toDate: maxDate,
          disabled,
          initialFocus: true
        }
      ) })
    ] }),
    currentMessage && (0, import_jsx_runtime10.jsx)(
      "p",
      {
        id: `${datePickerId}-message`,
        className: `mt-1 text-sm ${currentMessage.type === "error" ? "text-red-600" : currentMessage.type === "warning" ? "text-yellow-600" : currentMessage.type === "success" ? "text-green-600" : "text-slate-600"}`,
        children: currentMessage.message
      }
    )
  ] });
});
DatePicker.displayName = "DatePicker";

// packages/ui/src/components/documenttype.tsx
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var DocumentType = ({
  type,
  className = ""
}) => {
  const getIcon = () => {
    switch (type) {
      case "document":
        return "📄";
      case "spreadsheet":
        return "📊";
      case "presentation":
        return "📈";
      case "pdf":
        return " L";
      case "image":
        return "🖼️";
      case "video":
        return "📹";
      default:
        return "📁";
    }
  };
  return (0, import_jsx_runtime11.jsx)(
    "div",
    {
      className: cn(
        "inline-flex items-center justify-center w-8 h-8 rounded-full bg-gray-200 text-gray-700",
        className
      ),
      children: (0, import_jsx_runtime11.jsx)("span", { className: "text-lg", children: getIcon() })
    }
  );
};

// packages/ui/src/components/dropdown-menu.tsx
var React4 = __toESM(require_react());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var DropdownMenu = Root2;
var DropdownMenuTrigger = Trigger;
var DropdownMenuSubTrigger = React4.forwardRef(({ className, inset, children, ...props }, ref) => (0, import_jsx_runtime12.jsxs)(
  SubTrigger2,
  {
    ref,
    className: cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    ),
    ...props,
    children: [
      children,
      (0, import_jsx_runtime12.jsx)(ChevronRight, { className: "ml-auto h-4 w-4" })
    ]
  }
));
DropdownMenuSubTrigger.displayName = SubTrigger2.displayName;
var DropdownMenuSubContent = React4.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime12.jsx)(
  SubContent2,
  {
    ref,
    className: cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-background-primary p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    ...props
  }
));
DropdownMenuSubContent.displayName = SubContent2.displayName;
var DropdownMenuContent = React4.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (0, import_jsx_runtime12.jsx)(Portal2, { children: (0, import_jsx_runtime12.jsx)(
  Content2,
  {
    ref,
    sideOffset,
    className: cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-background-primary p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    ),
    ...props
  }
) }));
DropdownMenuContent.displayName = Content2.displayName;
var DropdownMenuItem = React4.forwardRef(({ className, inset, ...props }, ref) => (0, import_jsx_runtime12.jsx)(
  Item2,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    ),
    ...props
  }
));
DropdownMenuItem.displayName = Item2.displayName;
var DropdownMenuCheckboxItem = React4.forwardRef(({ className, children, checked, ...props }, ref) => (0, import_jsx_runtime12.jsxs)(
  CheckboxItem2,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    ),
    checked,
    ...props,
    children: [
      (0, import_jsx_runtime12.jsx)("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: (0, import_jsx_runtime12.jsx)(ItemIndicator2, { children: (0, import_jsx_runtime12.jsx)(Check, { className: "h-4 w-4" }) }) }),
      children
    ]
  }
));
DropdownMenuCheckboxItem.displayName = CheckboxItem2.displayName;
var DropdownMenuRadioItem = React4.forwardRef(({ className, children, ...props }, ref) => (0, import_jsx_runtime12.jsxs)(
  RadioItem2,
  {
    ref,
    className: cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    ),
    ...props,
    children: [
      (0, import_jsx_runtime12.jsx)("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center", children: (0, import_jsx_runtime12.jsx)(ItemIndicator2, { children: (0, import_jsx_runtime12.jsx)(Circle, { className: "h-2 w-2 fill-current" }) }) }),
      children
    ]
  }
));
DropdownMenuRadioItem.displayName = RadioItem2.displayName;
var DropdownMenuLabel = React4.forwardRef(({ className, inset, ...props }, ref) => (0, import_jsx_runtime12.jsx)(
  Label2,
  {
    ref,
    className: cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    ),
    ...props
  }
));
DropdownMenuLabel.displayName = Label2.displayName;
var DropdownMenuSeparator = React4.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime12.jsx)(
  Separator2,
  {
    ref,
    className: cn("-mx-1 my-1 h-px bg-muted", className),
    ...props
  }
));
DropdownMenuSeparator.displayName = Separator2.displayName;
var DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (0, import_jsx_runtime12.jsx)(
    "span",
    {
      className: cn("ml-auto text-xs tracking-widest opacity-60", className),
      ...props
    }
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

// packages/ui/src/components/EmptyState.tsx
var import_react7 = __toESM(require_react());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var EmptyState = (0, import_react7.forwardRef)(({
  title,
  description,
  icon,
  actions,
  className,
  ...props
}, ref) => {
  return (0, import_jsx_runtime13.jsxs)(
    "div",
    {
      ref,
      className: cn(
        "flex flex-col items-center justify-center text-center p-8 border-2 border-dashed rounded-lg",
        className
      ),
      ...props,
      children: [
        icon && (0, import_jsx_runtime13.jsx)("div", { className: "mb-4 text-gray-400", children: icon }),
        (0, import_jsx_runtime13.jsx)("h3", { className: "text-lg font-semibold text-gray-900", children: title }),
        description && (0, import_jsx_runtime13.jsx)("p", { className: "mt-2 text-sm text-gray-500", children: description }),
        actions && (0, import_jsx_runtime13.jsx)("div", { className: "mt-6", children: actions })
      ]
    }
  );
});
EmptyState.displayName = "EmptyState";

// packages/ui/src/components/expertisetag.tsx
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var ExpertiseTag = ({
  tag,
  className = ""
}) => {
  return (0, import_jsx_runtime14.jsx)(
    "div",
    {
      className: cn(
        "inline-flex items-center rounded-full px-3 py-1 text-sm font-semibold bg-gray-100 text-gray-800",
        className
      ),
      children: tag
    }
  );
};

// packages/ui/src/components/icon.tsx
var import_react8 = __toESM(require_react());
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var Icon = (0, import_react8.forwardRef)(({
  name,
  as,
  size = "md",
  color = "primary",
  context = "neutral",
  rotation = 0,
  title,
  className,
  ...props
}, ref) => {
  const LucideIcon = as || (name ? lucide_react_exports[name] : null);
  if (!LucideIcon) {
    return null;
  }
  const sizeClasses = {
    xs: "w-3 h-3",
    sm: "w-4 h-4",
    md: "w-5 h-5",
    lg: "w-6 h-6",
    xl: "w-8 h-8"
  };
  const getContextClasses = () => {
    if (color !== "primary") return "";
    switch (context) {
      case "consultant":
        return "text-blue-600";
      case "client":
        return "text-green-600";
      case "admin":
        return "text-gray-600";
      case "expert":
        return "text-purple-600";
      case "toolCreator":
        return "text-indigo-600";
      case "founder":
        return "text-orange-600";
      default:
        return "";
    }
  };
  const colorClasses = {
    primary: "text-slate-900",
    secondary: "text-slate-700",
    muted: "text-slate-500",
    error: "text-red-600",
    warning: "text-yellow-600",
    success: "text-green-600"
  };
  const rotationClasses = {
    0: "rotate-0",
    90: "rotate-90",
    180: "rotate-180",
    270: "rotate-270"
  };
  const iconClasses = cn(
    sizeClasses[size],
    getContextClasses() || colorClasses[color],
    rotationClasses[rotation],
    className
  );
  const iconProps = {
    className: iconClasses,
    ...props
  };
  return (0, import_jsx_runtime15.jsx)(LucideIcon, { ...iconProps, ref });
});
Icon.displayName = "Icon";

// packages/ui/src/components/image.tsx
var import_react9 = __toESM(require_react());
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var Image = (0, import_react9.forwardRef)(({
  src,
  alt,
  context = "neutral",
  aspectRatio,
  fit = "cover",
  lazy = true,
  placeholder,
  error,
  className,
  onLoad,
  onError,
  ...props
}, ref) => {
  const [isLoading, setIsLoading] = (0, import_react9.useState)(true);
  const [hasError, setHasError] = (0, import_react9.useState)(false);
  const handleLoad = () => {
    setIsLoading(false);
    if (onLoad) onLoad();
  };
  const handleError = () => {
    setIsLoading(false);
    setHasError(true);
    if (onError) onError();
  };
  const fitClasses = {
    cover: "object-cover",
    contain: "object-contain",
    fill: "object-fill"
  };
  const imageClasses = cn(
    "w-full h-full",
    fitClasses[fit],
    { "opacity-0": isLoading || hasError },
    className
  );
  return (0, import_jsx_runtime16.jsxs)(
    "div",
    {
      className: cn("relative bg-gray-200", aspectRatio),
      style: { aspectRatio: aspectRatio ? void 0 : "16 / 9" },
      children: [
        (isLoading || hasError) && (0, import_jsx_runtime16.jsx)("div", { className: "absolute inset-0 flex items-center justify-center", children: hasError ? error : placeholder }),
        (0, import_jsx_runtime16.jsx)(
          "img",
          {
            ref,
            src,
            alt,
            loading: lazy ? "lazy" : "eager",
            className: imageClasses,
            onLoad: handleLoad,
            onError: handleError,
            ...props
          }
        )
      ]
    }
  );
});
Image.displayName = "Image";

// packages/ui/src/components/input.tsx
var import_react11 = __toESM(require_react());

// packages/ui/src/components/validationcontext.tsx
var import_react10 = __toESM(require_react());
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var ValidationContext = (0, import_react10.createContext)(void 0);
var useValidation = () => {
  const context = (0, import_react10.useContext)(ValidationContext);
  return context || null;
};

// packages/ui/src/components/input.tsx
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var Input = (0, import_react11.forwardRef)(({
  context = "neutral",
  validationState = "none",
  helperText,
  errorMessage,
  warningMessage,
  successMessage,
  label,
  required = false,
  inputSize = "md",
  leftIcon,
  rightIcon,
  fullWidth = false,
  loading = false,
  loadingText,
  mask,
  hasError,
  // deprecated
  description,
  className = "",
  id,
  name,
  disabled,
  ...props
}, ref) => {
  const validation = useValidation();
  const finalValidationState = hasError ? "error" : validationState;
  const contextError = validation ? validation.errors[name] : "";
  const finalErrorMessage = errorMessage || contextError;
  const handleChange = (e) => {
    if (validation) {
      validation.validate(name, e.target.value);
    }
    if (props.onChange) {
      props.onChange(e);
    }
  };
  const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;
  const getContextClasses = () => {
    const baseClasses = "transition-colors duration-200";
    switch (context) {
      case "consultant":
        return `${baseClasses} border-blue-400 focus:border-blue-600 focus:ring-blue-500 bg-blue-50 focus:bg-blue-100`;
      case "client":
        return `${baseClasses} border-green-400 focus:border-green-600 focus:ring-green-500 bg-green-50 focus:bg-green-100`;
      case "admin":
        return `${baseClasses} border-gray-400 focus:border-gray-600 focus:ring-gray-500 bg-gray-50 focus:bg-gray-100`;
      case "expert":
        return `${baseClasses} border-purple-400 focus:border-purple-600 focus:ring-purple-500 bg-purple-50 focus:bg-purple-100`;
      case "toolCreator":
        return `${baseClasses} border-indigo-400 focus:border-indigo-600 focus:ring-indigo-500 bg-indigo-50 focus:bg-indigo-100`;
      case "founder":
        return `${baseClasses} border-orange-400 focus:border-orange-600 focus:ring-orange-500 bg-orange-50 focus:bg-orange-100`;
      default:
        return `${baseClasses} border-slate-300 focus:border-slate-500 focus:ring-slate-500 bg-white`;
    }
  };
  const getValidationClasses = () => {
    switch (finalValidationState) {
      case "error":
        return "border-red-500 focus:border-red-500 focus:ring-red-500 text-red-900 placeholder-red-300";
      case "warning":
        return "border-yellow-500 focus:border-yellow-500 focus:ring-yellow-500";
      case "success":
        return "border-green-500 focus:border-green-500 focus:ring-green-500";
      default:
        return "";
    }
  };
  const getSizeClasses = () => {
    switch (inputSize) {
      case "xs":
        return "px-2 py-1 text-xs";
      case "sm":
        return "px-2.5 py-1.5 text-sm";
      case "md":
        return "px-3 py-2 text-base";
      case "lg":
        return "px-4 py-2.5 text-lg";
      case "xl":
        return "px-5 py-3 text-xl";
      default:
        return "px-3 py-2 text-base";
    }
  };
  const inputClasses = [
    "flex w-full rounded-lg bg-white shadow-sm placeholder:text-slate-400",
    "focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-0",
    "disabled:cursor-not-allowed disabled:opacity-50",
    "transition-colors duration-200",
    leftIcon ? inputSize === "xs" ? "pl-7" : inputSize === "sm" ? "pl-8" : "pl-10" : "",
    rightIcon || loading ? inputSize === "xs" ? "pr-7" : inputSize === "sm" ? "pr-8" : "pr-10" : "",
    getSizeClasses(),
    finalValidationState !== "none" ? getValidationClasses() : getContextClasses(),
    className
  ].filter(Boolean).join(" ");
  const getCurrentMessage = () => {
    if (finalErrorMessage) return { type: "error", message: finalErrorMessage };
    if (warningMessage && finalValidationState === "warning") return { type: "warning", message: warningMessage };
    if (successMessage && finalValidationState === "success") return { type: "success", message: successMessage };
    if (helperText) return { type: "helper", message: helperText };
    return null;
  };
  const currentMessage = getCurrentMessage();
  const LoadingSpinner = () => (0, import_jsx_runtime18.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent" });
  return (0, import_jsx_runtime18.jsxs)("div", { className: fullWidth ? "w-full" : "", children: [
    label && (0, import_jsx_runtime18.jsxs)("label", { htmlFor: inputId, className: "block text-sm font-medium text-slate-700 mb-1", children: [
      label,
      required && (0, import_jsx_runtime18.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
    ] }),
    (0, import_jsx_runtime18.jsxs)("div", { className: "relative", children: [
      leftIcon && (0, import_jsx_runtime18.jsx)("div", { className: "absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none", children: (0, import_jsx_runtime18.jsx)("div", { className: inputSize === "xs" ? "w-3 h-3" : inputSize === "sm" ? "w-4 h-4" : "w-5 h-5", children: leftIcon }) }),
      (0, import_jsx_runtime18.jsx)(
        "input",
        {
          ref,
          id: inputId,
          name,
          className: inputClasses,
          disabled: disabled || loading,
          "aria-invalid": finalValidationState === "error" ? "true" : "false",
          "aria-describedby": [
            currentMessage ? `${inputId}-message` : "",
            description ? `${inputId}-description` : ""
          ].filter(Boolean).join(" ") || void 0,
          "aria-required": required,
          onChange: handleChange,
          ...props
        }
      ),
      (rightIcon || loading) && (0, import_jsx_runtime18.jsx)("div", { className: "absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none", children: (0, import_jsx_runtime18.jsx)("div", { className: inputSize === "xs" ? "w-3 h-3" : inputSize === "sm" ? "w-4 h-4" : "w-5 h-5", children: loading ? (0, import_jsx_runtime18.jsx)(LoadingSpinner, {}) : rightIcon }) })
    ] }),
    description && (0, import_jsx_runtime18.jsx)("p", { id: `${inputId}-description`, className: "mt-1 text-sm text-slate-500", children: description }),
    currentMessage && (0, import_jsx_runtime18.jsx)(
      "p",
      {
        id: `${inputId}-message`,
        className: `mt-1 text-sm ${currentMessage.type === "error" ? "text-red-600" : currentMessage.type === "warning" ? "text-yellow-600" : currentMessage.type === "success" ? "text-green-600" : "text-slate-600"}`,
        children: currentMessage.message
      }
    ),
    loading && loadingText && (0, import_jsx_runtime18.jsx)("p", { className: "mt-1 text-sm text-slate-500", children: loadingText })
  ] });
});
Input.displayName = "Input";

// packages/ui/src/components/label.tsx
var React7 = __toESM(require_react());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);
var Label = React7.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime19.jsx)(
  Root,
  {
    ref,
    className: cn(labelVariants(), className),
    ...props
  }
));
Label.displayName = Root.displayName;

// packages/ui/src/components/loadingoverlay.tsx
var import_react13 = __toESM(require_react());

// packages/ui/src/components/spinner.tsx
var import_react12 = __toESM(require_react());
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var Spinner = (0, import_react12.forwardRef)(({
  size = "md",
  context = "neutral",
  className,
  ...props
}, ref) => {
  const sizeClasses = {
    sm: "w-4 h-4 border-2",
    md: "w-8 h-8 border-4",
    lg: "w-12 h-12 border-4"
  };
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "border-blue-600";
      case "client":
        return "border-green-600";
      case "admin":
        return "border-gray-600";
      case "expert":
        return "border-purple-600";
      case "toolCreator":
        return "border-indigo-600";
      case "founder":
        return "border-orange-600";
      default:
        return "border-slate-600";
    }
  };
  const spinnerClasses = cn(
    "animate-spin rounded-full border-t-transparent",
    sizeClasses[size],
    getContextClasses(),
    className
  );
  return (0, import_jsx_runtime20.jsx)("div", { ref, className: spinnerClasses, role: "status", ...props, children: (0, import_jsx_runtime20.jsx)("span", { className: "sr-only", children: "Loading..." }) });
});
Spinner.displayName = "Spinner";

// packages/ui/src/components/loadingoverlay.tsx
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var LoadingOverlay = (0, import_react13.forwardRef)(({
  isLoading,
  children,
  className,
  ...props
}, ref) => {
  return (0, import_jsx_runtime21.jsxs)("div", { ref, className: cn("relative", className), ...props, children: [
    isLoading && (0, import_jsx_runtime21.jsx)("div", { className: "absolute inset-0 z-10 flex items-center justify-center bg-white bg-opacity-75", children: (0, import_jsx_runtime21.jsx)(Spinner, {}) }),
    children
  ] });
});
LoadingOverlay.displayName = "LoadingOverlay";

// packages/ui/src/components/index.ts
import { Logo } from "/Users/alexandracohen/Design-System/packages/ui/src/components/Logo.tsx";

// packages/ui/src/components/modal.tsx
var React8 = __toESM(require_react());
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var Dialog = Root3;
var DialogPortal = Portal;
var DialogOverlay = React8.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime22.jsx)(
  Overlay,
  {
    ref,
    className: cn(
      "fixed inset-0 z-50 bg-black bg-opacity-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    ...props
  }
));
DialogOverlay.displayName = Overlay.displayName;
var DialogContent = React8.forwardRef(({ className, children, ...props }, ref) => (0, import_jsx_runtime22.jsxs)(DialogPortal, { children: [
  (0, import_jsx_runtime22.jsx)(DialogOverlay, {}),
  (0, import_jsx_runtime22.jsxs)(
    Content,
    {
      ref,
      className: cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] rounded-lg",
        className
      ),
      ...props,
      children: [
        (0, import_jsx_runtime22.jsx)(DialogDescription, { className: "sr-only", children: "Modal dialog" }),
        children,
        (0, import_jsx_runtime22.jsxs)(Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-slate-700 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-slate-100 data-[state=open]:text-slate-500", children: [
          (0, import_jsx_runtime22.jsx)(X, { className: "h-4 w-4" }),
          (0, import_jsx_runtime22.jsx)("span", { className: "sr-only", children: "Close" })
        ] })
      ]
    }
  )
] }));
DialogContent.displayName = Content.displayName;
var DialogHeader = ({
  className,
  ...props
}) => (0, import_jsx_runtime22.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    ),
    ...props
  }
);
DialogHeader.displayName = "DialogHeader";
var DialogFooter = ({
  className,
  ...props
}) => (0, import_jsx_runtime22.jsx)(
  "div",
  {
    className: cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ),
    ...props
  }
);
DialogFooter.displayName = "DialogFooter";
var DialogTitle = React8.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime22.jsx)(
  Title,
  {
    ref,
    className: cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    ),
    ...props
  }
));
DialogTitle.displayName = Title.displayName;
var DialogDescription = React8.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime22.jsx)(
  Description,
  {
    ref,
    className: cn("text-sm text-slate-500", className),
    ...props
  }
));
DialogDescription.displayName = Description.displayName;
var Modal = ({ isOpen, onClose, children, title }) => {
  return (0, import_jsx_runtime22.jsx)(Dialog, { open: isOpen, onOpenChange: onClose, children: (0, import_jsx_runtime22.jsxs)(DialogContent, { children: [
    title && (0, import_jsx_runtime22.jsx)(DialogHeader, { children: (0, import_jsx_runtime22.jsx)(DialogTitle, { children: title }) }),
    children
  ] }) });
};

// packages/ui/src/components/OnboardingWizard.tsx
var import_react14 = __toESM(require_react());

// packages/ui/src/components/progress.tsx
var React9 = __toESM(require_react());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var Progress = React9.forwardRef(({ className, value, ...props }, ref) => (0, import_jsx_runtime23.jsx)(
  Root4,
  {
    ref,
    className: cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-slate-200",
      className
    ),
    ...props,
    children: (0, import_jsx_runtime23.jsx)(
      Indicator,
      {
        className: "h-full w-full flex-1 bg-slate-700 transition-all",
        style: { transform: `translateX(-${100 - (value || 0)}%)` }
      }
    )
  }
));
Progress.displayName = Root4.displayName;

// packages/ui/src/components/OnboardingWizard.tsx
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var OnboardingWizard = ({ onClose, onComplete }) => {
  const [step, setStep] = (0, import_react14.useState)(1);
  const [selectedRole, setSelectedRole] = (0, import_react14.useState)(null);
  const [companyStage, setCompanyStage] = (0, import_react14.useState)(null);
  const [loading, setLoading] = (0, import_react14.useState)(false);
  const roleOptions = [
    {
      id: "founder",
      title: "Founder",
      description: "You have a business idea or already founded a company",
      icon: "lightbulb"
    },
    {
      id: "company_member",
      title: "Company Member",
      description: "You work at a company and want to join your team",
      icon: "users"
    },
    {
      id: "service_provider",
      title: "Service Provider",
      description: "You provide professional services to companies",
      icon: "briefcase"
    }
  ];
  const stageOptions = [
    {
      id: "idea_stage",
      title: "Idea Stage",
      description: "You have an idea but haven't formally established a company yet",
      icon: "lightbulb",
      featuredModule: "Idea Playground"
    },
    {
      id: "solid_idea",
      title: "Solid Idea",
      description: "You have a well-defined concept and are ready to establish your company",
      icon: "clipboard-check",
      featuredModule: "Company Formation"
    },
    {
      id: "existing_company",
      title: "Existing Company",
      description: "You already have an established company and want to enter its information",
      icon: "building",
      featuredModule: "Team Management"
    }
  ];
  const saveAndContinue = async () => {
    setLoading(true);
    try {
      await new Promise((resolve) => setTimeout(resolve, 500));
      if (step === 1 && selectedRole) {
        if (selectedRole === "founder") {
          setStep(2);
        } else {
          if (onComplete) {
            onComplete({ role: selectedRole });
          }
        }
      } else if (step === 2 && companyStage) {
        if (onComplete) {
          onComplete({ role: selectedRole, stage: companyStage });
        }
      }
    } catch (error) {
      console.error("Error saving onboarding data:", error);
    } finally {
      setLoading(false);
    }
  };
  const handleSkip = () => {
    if (onClose) {
      onClose();
    }
  };
  const totalSteps = selectedRole === "founder" ? 2 : 1;
  const progress = step / totalSteps * 100;
  return (0, import_jsx_runtime24.jsxs)("div", { className: "bg-white rounded-lg shadow-lg overflow-hidden max-w-4xl mx-auto", children: [
    (0, import_jsx_runtime24.jsxs)("div", { className: "bg-blue-50 p-4 border-b border-blue-100", children: [
      (0, import_jsx_runtime24.jsx)("h2", { className: "text-xl font-semibold text-blue-800", children: "Quick Setup" }),
      (0, import_jsx_runtime24.jsx)("p", { className: "text-blue-600", children: "Tell us about yourself to get the most out of Wheel99" }),
      (0, import_jsx_runtime24.jsx)("div", { className: "mt-4", children: (0, import_jsx_runtime24.jsx)(Progress, { value: progress, className: "h-2" }) })
    ] }),
    (0, import_jsx_runtime24.jsxs)("div", { className: "p-6", children: [
      step === 1 && (0, import_jsx_runtime24.jsxs)("div", { children: [
        (0, import_jsx_runtime24.jsx)("h3", { className: "text-lg font-semibold mb-4", children: "What best describes your role?" }),
        (0, import_jsx_runtime24.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 mb-6", children: roleOptions.map((role) => (0, import_jsx_runtime24.jsxs)(
          "div",
          {
            onClick: () => setSelectedRole(role.id),
            className: `border rounded-lg p-4 cursor-pointer transition-all ${selectedRole === role.id ? "border-blue-500 bg-blue-50 shadow-sm" : "border-gray-200 hover:border-blue-300 hover:shadow-sm"}`,
            children: [
              (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center mb-2", children: [
                (0, import_jsx_runtime24.jsx)("div", { className: `rounded-full p-2 mr-2 ${selectedRole === role.id ? "bg-blue-500 text-white" : "bg-gray-100"}`, children: (0, import_jsx_runtime24.jsx)("i", { className: `fas fa-${role.icon} text-sm` }) }),
                (0, import_jsx_runtime24.jsx)("h4", { className: "font-medium", children: role.title })
              ] }),
              (0, import_jsx_runtime24.jsx)("p", { className: "text-sm text-gray-600", children: role.description })
            ]
          },
          role.id
        )) })
      ] }),
      step === 2 && (0, import_jsx_runtime24.jsxs)("div", { children: [
        (0, import_jsx_runtime24.jsx)("h3", { className: "text-lg font-semibold mb-4", children: "What stage is your company in?" }),
        (0, import_jsx_runtime24.jsx)("div", { className: "space-y-4", children: stageOptions.map((stage) => (0, import_jsx_runtime24.jsx)(
          "div",
          {
            onClick: () => setCompanyStage(stage.id),
            className: `border rounded-lg p-4 cursor-pointer transition-all ${companyStage === stage.id ? "border-blue-500 bg-blue-50 shadow-sm" : "border-gray-200 hover:border-blue-300 hover:shadow-sm"}`,
            children: (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-start", children: [
              (0, import_jsx_runtime24.jsx)("div", { className: `rounded-full p-2 mr-3 mt-1 ${companyStage === stage.id ? "bg-blue-500 text-white" : "bg-gray-100"}`, children: (0, import_jsx_runtime24.jsx)("i", { className: `fas fa-${stage.icon} text-sm` }) }),
              (0, import_jsx_runtime24.jsxs)("div", { children: [
                (0, import_jsx_runtime24.jsx)("h4", { className: "font-medium", children: stage.title }),
                (0, import_jsx_runtime24.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: stage.description }),
                companyStage === stage.id && (0, import_jsx_runtime24.jsxs)("div", { className: "mt-2 bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full inline-flex items-center", children: [
                  (0, import_jsx_runtime24.jsx)("i", { className: "fas fa-star mr-1" }),
                  "Recommended: ",
                  stage.featuredModule
                ] })
              ] })
            ] })
          },
          stage.id
        )) })
      ] })
    ] }),
    (0, import_jsx_runtime24.jsxs)("div", { className: "border-t border-gray-200 p-4 bg-gray-50 flex justify-between", children: [
      (0, import_jsx_runtime24.jsx)(
        "button",
        {
          onClick: handleSkip,
          className: "px-4 py-2 text-gray-600 hover:text-gray-800",
          children: "Skip for now"
        }
      ),
      (0, import_jsx_runtime24.jsx)(
        "button",
        {
          onClick: saveAndContinue,
          disabled: step === 1 ? !selectedRole : !companyStage || loading,
          className: `px-6 py-2 rounded-md ${(step === 1 ? selectedRole : companyStage) && !loading ? "bg-blue-600 text-white hover:bg-blue-700" : "bg-gray-300 text-gray-500 cursor-not-allowed"}`,
          children: loading ? (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center", children: [
            (0, import_jsx_runtime24.jsxs)("svg", { className: "animate-spin -ml-1 mr-2 h-4 w-4 text-white", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", children: [
              (0, import_jsx_runtime24.jsx)("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }),
              (0, import_jsx_runtime24.jsx)("path", { className: "opacity-75", fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })
            ] }),
            "Processing..."
          ] }) : "Continue"
        }
      )
    ] })
  ] });
};

// packages/ui/src/components/index.ts
import { Pagination } from "/Users/alexandracohen/Design-System/packages/ui/src/components/Pagination.tsx";

// packages/ui/src/components/phoneinput.tsx
var import_react15 = __toESM(require_react());
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
import "/Users/alexandracohen/Design-System/node_modules/react-phone-number-input/style.css";
var PhoneInput = (0, import_react15.forwardRef)(({
  context = "neutral",
  value,
  onChange,
  defaultCountry = "US",
  validationState: initialValidationState = "none",
  helperText,
  errorMessage,
  warningMessage,
  successMessage,
  label,
  required = false,
  disabled = false,
  placeholder = "Enter phone number",
  name,
  id
}, ref) => {
  const [validationState, setValidationState] = (0, import_react15.useState)(initialValidationState);
  const handleOnChange = (newValue) => {
    if (newValue && !isPossiblePhoneNumber(newValue)) {
      setValidationState("error");
    } else {
      setValidationState("success");
    }
    if (onChange) {
      onChange(newValue);
    }
  };
  const getContextClasses = () => {
    return "";
  };
  const getValidationClasses = () => {
    switch (validationState) {
      case "error":
        return "PhoneInput--error";
      case "warning":
        return "PhoneInput--warning";
      case "success":
        return "PhoneInput--success";
      default:
        return "";
    }
  };
  const phoneInputId = id || `phoneinput-${Math.random().toString(36).substr(2, 9)}`;
  const currentMessage = (() => {
    if (errorMessage && validationState === "error") return { type: "error", message: errorMessage };
    if (warningMessage && validationState === "warning") return { type: "warning", message: warningMessage };
    if (successMessage && validationState === "success") return { type: "success", message: successMessage };
    if (helperText) return { type: "helper", message: helperText };
    return null;
  })();
  return (0, import_jsx_runtime25.jsxs)("div", { children: [
    label && (0, import_jsx_runtime25.jsxs)("label", { htmlFor: phoneInputId, className: "block text-sm font-medium text-slate-700 mb-1", children: [
      label,
      required && (0, import_jsx_runtime25.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
    ] }),
    (0, import_jsx_runtime25.jsx)(
      min_default,
      {
        id: phoneInputId,
        name,
        className: getValidationClasses(),
        defaultCountry,
        placeholder,
        value,
        onChange: handleOnChange,
        disabled,
        international: true,
        countryCallingCodeEditable: false,
        ref
      }
    ),
    currentMessage && (0, import_jsx_runtime25.jsx)(
      "p",
      {
        className: `mt-1 text-sm ${currentMessage.type === "error" ? "text-red-600" : currentMessage.type === "warning" ? "text-yellow-600" : currentMessage.type === "success" ? "text-green-600" : "text-slate-600"}`,
        children: currentMessage.message
      }
    )
  ] });
});
PhoneInput.displayName = "PhoneInput";

// packages/ui/src/components/progressindicator.tsx
var import_react16 = __toESM(require_react());
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var ProgressIndicator = (0, import_react16.forwardRef)(({
  value = 0,
  size = "md",
  context = "neutral",
  className,
  ...props
}, ref) => {
  const sizeClasses = {
    sm: "h-1",
    md: "h-2",
    lg: "h-3"
  };
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "bg-blue-600";
      case "client":
        return "bg-green-600";
      case "admin":
        return "bg-gray-600";
      case "expert":
        return "bg-purple-600";
      case "toolCreator":
        return "bg-indigo-600";
      case "founder":
        return "bg-orange-600";
      default:
        return "bg-slate-600";
    }
  };
  const containerClasses = cn(
    "w-full bg-gray-200 rounded-full",
    sizeClasses[size],
    className
  );
  const progressClasses = cn(
    "h-full rounded-full",
    getContextClasses()
  );
  return (0, import_jsx_runtime26.jsx)("div", { ref, className: containerClasses, ...props, children: (0, import_jsx_runtime26.jsx)(
    "div",
    {
      className: progressClasses,
      style: { width: `${value}%` }
    }
  ) });
});
ProgressIndicator.displayName = "ProgressIndicator";

// packages/ui/src/components/projectphase.tsx
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var ProjectPhase = ({
  phase,
  className = ""
}) => {
  const phaseStyles = {
    discovery: "bg-blue-100 text-blue-800",
    design: "bg-purple-100 text-purple-800",
    development: "bg-green-100 text-green-800",
    testing: "bg-yellow-100 text-yellow-800",
    deployment: "bg-indigo-100 text-indigo-800",
    maintenance: "bg-gray-100 text-gray-800"
  };
  return (0, import_jsx_runtime27.jsx)(
    "div",
    {
      className: cn(
        "inline-flex items-center rounded-full px-3 py-1 text-sm font-semibold",
        phaseStyles[phase],
        className
      ),
      children: phase.charAt(0).toUpperCase() + phase.slice(1)
    }
  );
};

// packages/ui/src/components/richtexteditor.tsx
var import_react17 = __toESM(require_react());
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var initialValue = [
  {
    type: "paragraph",
    children: [{ text: "This is editable rich text, much better than a <textarea>!" }]
  }
];
var RichTextEditor = (0, import_react17.forwardRef)(({
  context = "neutral",
  initialValue: value = initialValue,
  onChange,
  label,
  disabled = false,
  name,
  id
}, ref) => {
  const editor = (0, import_react17.useMemo)(() => withHistory(withReact(createEditor())), []);
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "border-blue-400 focus-within:ring-blue-500";
      case "client":
        return "border-green-400 focus-within:ring-green-500";
      case "admin":
        return "border-gray-400 focus-within:ring-gray-500";
      case "expert":
        return "border-purple-400 focus-within:ring-purple-500";
      case "toolCreator":
        return "border-indigo-400 focus-within:ring-indigo-500";
      case "founder":
        return "border-orange-400 focus-within:ring-orange-500";
      default:
        return "border-slate-300 focus-within:ring-slate-500";
    }
  };
  const containerClasses = [
    "p-2 border rounded-lg shadow-sm",
    "disabled:cursor-not-allowed disabled:opacity-50",
    getContextClasses()
  ].filter(Boolean).join(" ");
  const editorId = id || `richtexteditor-${Math.random().toString(36).substr(2, 9)}`;
  return (0, import_jsx_runtime28.jsxs)("div", { ref, children: [
    label && (0, import_jsx_runtime28.jsx)("label", { htmlFor: editorId, className: "block text-sm font-medium text-slate-700 mb-1", children: label }),
    (0, import_jsx_runtime28.jsx)("div", { className: containerClasses, children: (0, import_jsx_runtime28.jsx)(Slate, { editor, initialValue: value, onChange, children: (0, import_jsx_runtime28.jsx)(
      Editable,
      {
        id: editorId,
        readOnly: disabled,
        className: "min-h-[150px] p-2 focus:outline-none",
        name
      }
    ) }) })
  ] });
});
RichTextEditor.displayName = "RichTextEditor";

// packages/ui/src/components/index.ts
import { EnhancedSelect } from "/Users/alexandracohen/Design-System/packages/ui/src/components/select.tsx";

// packages/ui/src/components/separator.tsx
var import_react18 = __toESM(require_react());
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var Separator = (0, import_react18.forwardRef)(({
  orientation = "horizontal",
  context = "neutral",
  spacing = "md",
  variant = "solid",
  text,
  icon,
  decorative = true,
  className,
  ...props
}, ref) => {
  const spacingClasses = {
    none: "my-0",
    sm: "my-2",
    md: "my-4",
    lg: "my-6",
    xl: "my-8"
  };
  const verticalSpacingClasses = {
    none: "mx-0",
    sm: "mx-2",
    md: "mx-4",
    lg: "mx-6",
    xl: "mx-8"
  };
  const variantClasses = {
    solid: "border-solid",
    dashed: "border-dashed",
    dotted: "border-dotted"
  };
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "text-blue-600 border-blue-300";
      case "client":
        return "text-green-600 border-green-300";
      case "admin":
        return "text-gray-600 border-gray-300";
      case "expert":
        return "text-purple-600 border-purple-300";
      case "tool-creator":
        return "text-orange-600 border-orange-300";
      case "founder":
        return "text-amber-600 border-amber-300";
      default:
        return "text-gray-500 border-gray-200";
    }
  };
  const getContextSpacing = () => {
    const baseSpacing = orientation === "horizontal" ? spacingClasses[spacing] : verticalSpacingClasses[spacing];
    switch (context) {
      case "consultant":
        return spacing === "md" ? orientation === "horizontal" ? "my-5" : "mx-5" : baseSpacing;
      case "client":
        return spacing === "md" ? orientation === "horizontal" ? "my-6" : "mx-6" : baseSpacing;
      case "admin":
        return spacing === "md" ? orientation === "horizontal" ? "my-8" : "mx-8" : baseSpacing;
      case "expert":
        return spacing === "md" ? orientation === "horizontal" ? "my-4" : "mx-4" : baseSpacing;
      case "tool-creator":
        return spacing === "md" ? orientation === "horizontal" ? "my-3" : "mx-3" : baseSpacing;
      case "founder":
        return spacing === "md" ? orientation === "horizontal" ? "my-6" : "mx-6" : baseSpacing;
      default:
        return baseSpacing;
    }
  };
  const separatorClasses = cn(
    "transition-colors duration-200",
    variantClasses[variant],
    orientation === "horizontal" ? "w-full border-t" : "h-full border-l",
    getContextSpacing(),
    getContextClasses(),
    className
  );
  if (text || icon) {
    return (0, import_jsx_runtime29.jsxs)("div", { ref, className: cn("flex items-center", orientation === "horizontal" ? "my-4" : "mx-4"), ...props, children: [
      (0, import_jsx_runtime29.jsx)("div", { className: cn("flex-grow border-t", variantClasses[variant], getContextClasses()) }),
      (0, import_jsx_runtime29.jsxs)("span", { className: cn("mx-4 flex items-center text-sm", getContextClasses()), children: [
        icon && (0, import_jsx_runtime29.jsx)("span", { className: "mr-2", children: icon }),
        text
      ] }),
      (0, import_jsx_runtime29.jsx)("div", { className: cn("flex-grow border-t", variantClasses[variant], getContextClasses()) })
    ] });
  }
  return (0, import_jsx_runtime29.jsx)(
    "div",
    {
      ref,
      className: separatorClasses,
      role: decorative ? "none" : "separator",
      ...props
    }
  );
});
Separator.displayName = "Separator";

// packages/ui/src/components/skeletonloader.tsx
var import_react19 = __toESM(require_react());
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var SkeletonLoader = (0, import_react19.forwardRef)(({
  className,
  count = 1,
  circle = false,
  ...props
}, ref) => {
  const skeletons = Array.from({ length: count }, (_, i) => (0, import_jsx_runtime30.jsx)(
    "div",
    {
      className: cn(
        "animate-pulse bg-gray-300",
        circle ? "rounded-full" : "rounded-md",
        className
      ),
      ...props
    },
    i
  ));
  return (0, import_jsx_runtime30.jsx)("div", { ref, className: "space-y-2", children: skeletons });
});
SkeletonLoader.displayName = "SkeletonLoader";

// packages/ui/src/components/slider.tsx
var import_react20 = __toESM(require_react());
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
import "/Users/alexandracohen/Design-System/node_modules/rc-tooltip/assets/bootstrap.css";
var Slider = (0, import_react20.forwardRef)(({
  context = "neutral",
  value = 50,
  onChange,
  min = 0,
  max = 100,
  step = 1,
  label,
  disabled = false,
  name,
  id,
  withTooltip = false
}, ref) => {
  const [currentValue, setCurrentValue] = (0, import_react20.useState)(value);
  const handleOnChange = (event) => {
    const newValue = Number(event.target.value);
    setCurrentValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "accent-blue-600";
      case "client":
        return "accent-green-600";
      case "admin":
        return "accent-gray-600";
      case "expert":
        return "accent-purple-600";
      case "toolCreator":
        return "accent-indigo-600";
      case "founder":
        return "accent-orange-600";
      default:
        return "accent-slate-600";
    }
  };
  const sliderClasses = [
    "w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700",
    "disabled:cursor-not-allowed disabled:opacity-50",
    getContextClasses()
  ].filter(Boolean).join(" ");
  const sliderId = id || `slider-${Math.random().toString(36).substr(2, 9)}`;
  return (0, import_jsx_runtime31.jsxs)("div", { children: [
    label && (0, import_jsx_runtime31.jsx)("label", { htmlFor: sliderId, className: "block text-sm font-medium text-slate-700 mb-1", children: label }),
    (0, import_jsx_runtime31.jsx)(
      es_default,
      {
        placement: "top",
        overlay: (0, import_jsx_runtime31.jsx)("span", { children: currentValue }),
        visible: withTooltip,
        children: (0, import_jsx_runtime31.jsx)(
          "input",
          {
            id: sliderId,
            type: "range",
            min,
            max,
            step,
            value: currentValue,
            onChange: handleOnChange,
            className: sliderClasses,
            disabled,
            ref,
            name
          }
        )
      }
    ),
    !withTooltip && (0, import_jsx_runtime31.jsxs)("div", { className: "flex justify-between text-sm text-slate-500 mt-1", children: [
      (0, import_jsx_runtime31.jsx)("span", { children: min }),
      (0, import_jsx_runtime31.jsx)("span", { children: currentValue }),
      (0, import_jsx_runtime31.jsx)("span", { children: max })
    ] })
  ] });
});
Slider.displayName = "Slider";

// packages/ui/src/components/StatusDot.tsx
var import_react21 = __toESM(require_react());
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var StatusDot = (0, import_react21.forwardRef)(({
  status = "offline",
  size = "md",
  context = "neutral",
  pulse = false,
  label,
  className,
  ...props
}, ref) => {
  const getStatusClasses = () => {
    switch (status) {
      case "online":
        return "bg-green-500";
      case "offline":
        return "bg-gray-400";
      case "busy":
        return "bg-red-500";
      case "away":
        return "bg-yellow-500";
      case "inactive":
        return "bg-slate-300";
      default:
        return "bg-gray-400";
    }
  };
  const sizeClasses = {
    sm: "w-2 h-2",
    md: "w-3 h-3",
    lg: "w-4 h-4"
  };
  const dotClasses = cn(
    "rounded-full",
    sizeClasses[size],
    getStatusClasses(),
    { "animate-pulse": pulse },
    className
  );
  return (0, import_jsx_runtime32.jsxs)("span", { className: "inline-flex items-center", ref, ...props, children: [
    (0, import_jsx_runtime32.jsx)("span", { className: dotClasses }),
    label && (0, import_jsx_runtime32.jsx)("span", { className: "ml-2 text-sm text-slate-700", children: label })
  ] });
});
StatusDot.displayName = "StatusDot";

// packages/ui/src/components/switch.tsx
var React11 = __toESM(require_react());
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var Switch = React11.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime33.jsx)(
  Root5,
  {
    className: cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-700 focus-visible:ring-offset-2 focus-visible:ring-offset-var(--text-inverted) disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary-500 data-[state=unchecked]:bg-slate-200",
      className
    ),
    ...props,
    ref,
    children: (0, import_jsx_runtime33.jsx)(
      Thumb,
      {
        className: cn(
          "pointer-events-none block h-5 w-5 rounded-full bg-var(--text-inverted) shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
        )
      }
    )
  }
));
Switch.displayName = Root5.displayName;

// packages/ui/src/components/tabs.tsx
var React12 = __toESM(require_react());
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var Tabs = Root22;
var TabsList = React12.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime34.jsx)(
  List,
  {
    ref,
    className: cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-slate-100 p-1 text-slate-600",
      className
    ),
    ...props
  }
));
TabsList.displayName = List.displayName;
var TabsTrigger = React12.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime34.jsx)(
  Trigger2,
  {
    ref,
    className: cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-700 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-white data-[state=active]:text-slate-900 data-[state=active]:shadow-sm",
      className
    ),
    ...props
  }
));
TabsTrigger.displayName = Trigger2.displayName;
var TabsContent = React12.forwardRef(({ className, ...props }, ref) => (0, import_jsx_runtime34.jsx)(
  Content3,
  {
    ref,
    className: cn(
      "mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-700 focus-visible:ring-offset-2",
      className
    ),
    ...props
  }
));
TabsContent.displayName = Content3.displayName;

// packages/ui/src/components/textarea.tsx
var React13 = __toESM(require_react());
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var useAutosizeTextArea = (textAreaRef, value) => {
  React13.useEffect(() => {
    if (textAreaRef) {
      textAreaRef.style.height = "0px";
      const scrollHeight = textAreaRef.scrollHeight;
      textAreaRef.style.height = scrollHeight + "px";
    }
  }, [textAreaRef, value]);
};
var Textarea = React13.forwardRef(({ className, context = "neutral", validationState = "none", textareaSize = "md", autoResize = true, ...props }, ref) => {
  const textAreaRef = React13.useRef(null);
  useAutosizeTextArea(autoResize ? textAreaRef.current : null, props.value);
  React13.useImperativeHandle(ref, () => textAreaRef.current);
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "border-consultant-400 focus:border-consultant-600 focus:ring-consultant-500 bg-consultant-50";
      case "client":
        return "border-client-400 focus:border-client-600 focus:ring-client-500 bg-client-50";
      case "admin":
        return "border-admin-400 focus:border-admin-600 focus:ring-admin-500 bg-admin-50";
      case "expert":
        return "border-expert-400 focus:border-expert-600 focus:ring-expert-500 bg-expert-50";
      case "toolCreator":
        return "border-toolCreator-400 focus:border-toolCreator-600 focus:ring-toolCreator-500 bg-toolCreator-50";
      case "founder":
        return "border-founder-400 focus:border-founder-600 focus:ring-founder-500 bg-founder-50";
      default:
        return "border-slate-300 focus:border-slate-500 focus:ring-slate-500 bg-white";
    }
  };
  const getValidationClasses = () => {
    switch (validationState) {
      case "error":
        return "border-red-500 focus:border-red-500 focus:ring-red-500";
      case "warning":
        return "border-yellow-500 focus:border-yellow-500 focus:ring-yellow-500";
      case "success":
        return "border-green-500 focus:border-green-500 focus:ring-green-500";
      default:
        return "";
    }
  };
  const getSizeClasses = () => {
    switch (textareaSize) {
      case "xs":
        return "min-h-[40px] px-2 py-1 text-xs";
      case "sm":
        return "min-h-[50px] px-2.5 py-1.5 text-sm";
      case "md":
        return "min-h-[60px] px-3 py-2 text-base";
      case "lg":
        return "min-h-[80px] px-4 py-2.5 text-lg";
      case "xl":
        return "min-h-[100px] px-5 py-3 text-xl";
      default:
        return "min-h-[60px] px-3 py-2 text-base";
    }
  };
  return (0, import_jsx_runtime35.jsx)(
    "textarea",
    {
      className: cn(
        "flex w-full rounded-lg border shadow-sm placeholder:text-slate-400 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50 resize-none transition-colors duration-200",
        getSizeClasses(),
        validationState !== "none" ? getValidationClasses() : getContextClasses(),
        className
      ),
      ref: textAreaRef,
      ...props
    }
  );
});
Textarea.displayName = "Textarea";
var EnhancedTextarea = React13.forwardRef(({
  context = "neutral",
  validationState = "none",
  helperText,
  errorMessage,
  warningMessage,
  successMessage,
  label,
  required,
  textareaSize = "md",
  fullWidth = true,
  hasError,
  name,
  description,
  showCharacterCount,
  maxLength,
  autoResize = true,
  className,
  value,
  ...props
}, ref) => {
  const finalValidationState = hasError ? "error" : validationState;
  const currentLength = typeof value === "string" ? value.length : 0;
  const getMessage = () => {
    switch (finalValidationState) {
      case "error":
        return errorMessage || helperText;
      case "warning":
        return warningMessage || helperText;
      case "success":
        return successMessage || helperText;
      default:
        return helperText;
    }
  };
  const getMessageColor = () => {
    switch (finalValidationState) {
      case "error":
        return "text-red-600";
      case "warning":
        return "text-yellow-600";
      case "success":
        return "text-green-600";
      default:
        return "text-slate-600";
    }
  };
  const message = getMessage();
  const showCount = showCharacterCount || maxLength;
  return (0, import_jsx_runtime35.jsxs)("div", { className: cn("space-y-2", className), children: [
    label && (0, import_jsx_runtime35.jsxs)("label", { htmlFor: name, className: cn("block text-sm font-medium", finalValidationState === "error" ? "text-red-700" : "text-slate-700"), children: [
      label,
      required && (0, import_jsx_runtime35.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
    ] }),
    (0, import_jsx_runtime35.jsx)(
      Textarea,
      {
        ref,
        context,
        validationState: finalValidationState,
        textareaSize,
        autoResize,
        id: name,
        value,
        maxLength,
        "aria-describedby": description ? `${name}-description` : void 0,
        "aria-invalid": finalValidationState === "error",
        className: fullWidth ? "w-full" : "",
        ...props
      }
    ),
    (message || description || showCount) && (0, import_jsx_runtime35.jsxs)("div", { className: "space-y-1", children: [
      description && (0, import_jsx_runtime35.jsx)("p", { id: `${name}-description`, className: "text-xs text-slate-500", children: description }),
      (0, import_jsx_runtime35.jsxs)("div", { className: "flex justify-between items-center", children: [
        message && (0, import_jsx_runtime35.jsx)("p", { className: cn("text-xs", getMessageColor()), children: message }),
        showCount && (0, import_jsx_runtime35.jsxs)("p", { className: cn("text-xs", maxLength && currentLength > maxLength ? "text-red-600" : "text-slate-500"), children: [
          currentLength,
          maxLength && `/${maxLength}`
        ] })
      ] })
    ] })
  ] });
});
EnhancedTextarea.displayName = "EnhancedTextarea";

// packages/ui/src/components/timeindicator.tsx
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var TimeIndicator = ({
  time,
  className = ""
}) => {
  const formattedTime = time.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
  return (0, import_jsx_runtime36.jsx)(
    "div",
    {
      className: cn(
        "inline-flex items-center text-sm font-semibold text-gray-600",
        className
      ),
      children: formattedTime
    }
  );
};

// packages/ui/src/components/timepicker.tsx
var import_react22 = __toESM(require_react());
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var TimePicker = (0, import_react22.forwardRef)(({
  context = "neutral",
  format: format2 = "12h",
  timezone,
  value = "",
  onChange,
  validationState = "none",
  helperText,
  errorMessage,
  warningMessage,
  successMessage,
  label,
  required = false,
  disabled = false,
  placeholder = "Select time...",
  name,
  id,
  description
}, ref) => {
  const [isOpen, setIsOpen] = (0, import_react22.useState)(false);
  const [inputValue, setInputValue] = (0, import_react22.useState)("");
  const dropdownRef = (0, import_react22.useRef)(null);
  const timePickerId = id || `timepicker-${Math.random().toString(36).substr(2, 9)}`;
  (0, import_react22.useEffect)(() => {
    if (value) {
      const [hours, minutes] = value.split(":").map(Number);
      setInputValue(formatDisplayTime(hours, minutes, format2));
    } else {
      setInputValue("");
    }
  }, [value, format2]);
  const formatDisplayTime = (hours, minutes, timeFormat) => {
    if (timeFormat === "12h") {
      const period = hours >= 12 ? "PM" : "AM";
      const displayHour = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;
      return `${String(displayHour).padStart(2, "0")}:${String(minutes).padStart(2, "0")} ${period}`;
    }
    return `${String(hours).padStart(2, "0")}:${String(minutes).padStart(2, "0")}`;
  };
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "border-blue-400 focus:border-blue-600 focus:ring-blue-500 bg-blue-50";
      case "client":
        return "border-green-400 focus:border-green-600 focus:ring-green-500 bg-green-50";
      case "admin":
        return "border-gray-400 focus:border-gray-600 focus:ring-gray-500 bg-gray-50";
      case "expert":
        return "border-purple-400 focus:border-purple-600 focus:ring-purple-500 bg-purple-50";
      case "toolCreator":
        return "border-indigo-400 focus:border-indigo-600 focus:ring-indigo-500 bg-indigo-50";
      case "founder":
        return "border-orange-400 focus:border-orange-600 focus:ring-orange-500 bg-orange-50";
      default:
        return "border-slate-300 focus:border-slate-500 focus:ring-slate-500 bg-white";
    }
  };
  const getValidationClasses = () => {
    switch (validationState) {
      case "error":
        return "border-red-500 focus:border-red-500 focus:ring-red-500";
      case "warning":
        return "border-yellow-500 focus:border-yellow-500 focus:ring-yellow-500";
      case "success":
        return "border-green-500 focus:border-green-500 focus:ring-green-500";
      default:
        return "";
    }
  };
  const inputClasses = [
    "w-full px-3 py-2 text-base rounded-lg shadow-sm placeholder:text-slate-400",
    "focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-0",
    "disabled:cursor-not-allowed disabled:opacity-50 transition-colors duration-200",
    validationState !== "none" ? getValidationClasses() : getContextClasses()
  ].filter(Boolean).join(" ");
  const generateTimeOptions = () => {
    const options = [];
    for (let h = 0; h < 24; h++) {
      for (let m = 0; m < 60; m += 15) {
        options.push({
          display: formatDisplayTime(h, m, format2),
          value: `${String(h).padStart(2, "0")}:${String(m).padStart(2, "0")}`
        });
      }
    }
    return options;
  };
  const timeOptions = generateTimeOptions();
  const handleTimeSelect = (timeValue, displayValue) => {
    setInputValue(displayValue);
    if (onChange) onChange(timeValue);
    setIsOpen(false);
  };
  (0, import_react22.useEffect)(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);
  const currentMessage = (() => {
    if (errorMessage && validationState === "error") return { type: "error", message: errorMessage };
    if (warningMessage && validationState === "warning") return { type: "warning", message: warningMessage };
    if (successMessage && validationState === "success") return { type: "success", message: successMessage };
    if (helperText) return { type: "helper", message: helperText };
    return null;
  })();
  return (0, import_jsx_runtime37.jsxs)("div", { className: "w-full", ref, children: [
    label && (0, import_jsx_runtime37.jsxs)("label", { htmlFor: timePickerId, className: "block text-sm font-medium text-slate-700 mb-1", children: [
      label,
      required && (0, import_jsx_runtime37.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
    ] }),
    (0, import_jsx_runtime37.jsxs)("div", { className: "relative", ref: dropdownRef, children: [
      (0, import_jsx_runtime37.jsx)(
        "input",
        {
          type: "text",
          id: timePickerId,
          name,
          className: inputClasses,
          value: inputValue,
          onClick: () => setIsOpen(!isOpen),
          onFocus: () => setIsOpen(true),
          readOnly: true,
          placeholder,
          disabled,
          "aria-invalid": validationState === "error",
          "aria-describedby": currentMessage ? `${timePickerId}-message` : void 0
        }
      ),
      isOpen && (0, import_jsx_runtime37.jsx)("ul", { className: "absolute z-10 w-full mt-1 bg-white border border-slate-300 rounded-md shadow-lg max-h-60 overflow-auto", children: timeOptions.map((option) => (0, import_jsx_runtime37.jsx)(
        "li",
        {
          className: "px-3 py-2 cursor-pointer hover:bg-slate-100",
          onClick: () => handleTimeSelect(option.value, option.display),
          children: option.display
        },
        option.value
      )) })
    ] }),
    currentMessage && (0, import_jsx_runtime37.jsx)(
      "p",
      {
        id: `${timePickerId}-message`,
        className: `mt-1 text-sm ${currentMessage.type === "error" ? "text-red-600" : currentMessage.type === "warning" ? "text-yellow-600" : currentMessage.type === "success" ? "text-green-600" : "text-slate-600"}`,
        children: currentMessage.message
      }
    ),
    description && (0, import_jsx_runtime37.jsx)("p", { className: "mt-1 text-sm text-slate-500", children: description })
  ] });
});
TimePicker.displayName = "TimePicker";

// packages/ui/src/components/timerangeinput.tsx
var import_react23 = __toESM(require_react());
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var TimeRangeInput = ({
  value = { start: "09:00:00", end: "17:00:00" },
  onChange,
  disabled = false,
  className = ""
}) => {
  const [range, setRange] = (0, import_react23.useState)(value);
  const handleChange = (part, time) => {
    const newRange = { ...range, [part]: time };
    setRange(newRange);
    if (onChange) {
      onChange(newRange);
    }
  };
  return (0, import_jsx_runtime38.jsxs)("div", { className: cn("flex items-center space-x-4", className), children: [
    (0, import_jsx_runtime38.jsx)(
      TimePicker,
      {
        value: range.start,
        onChange: (time) => handleChange("start", time),
        disabled
      }
    ),
    (0, import_jsx_runtime38.jsx)("span", { children: "to" }),
    (0, import_jsx_runtime38.jsx)(
      TimePicker,
      {
        value: range.end,
        onChange: (time) => handleChange("end", time),
        disabled
      }
    )
  ] });
};

// packages/ui/src/components/toast.tsx
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var getVariantClasses = (variant, context) => {
  if (context !== "neutral") {
    switch (context) {
      case "consultant":
        return "bg-blue-100 border-blue-500 text-blue-800";
      case "client":
        return "bg-green-100 border-green-500 text-green-800";
      case "admin":
        return "bg-gray-100 border-gray-500 text-gray-800";
      case "expert":
        return "bg-purple-100 border-purple-500 text-purple-800";
      case "toolCreator":
        return "bg-indigo-100 border-indigo-500 text-indigo-800";
      case "founder":
        return "bg-orange-100 border-orange-500 text-orange-800";
    }
  }
  switch (variant) {
    case "success":
      return "bg-green-100 border-green-500 text-green-800";
    case "warning":
      return "bg-yellow-100 border-yellow-500 text-yellow-800";
    case "error":
      return "bg-red-100 border-red-500 text-red-800";
    case "info":
      return "bg-sky-100 border-sky-500 text-sky-800";
    default:
      return "bg-gray-100 border-gray-500 text-gray-800";
  }
};
var Toast = ({ variant = "info", context = "neutral", title, description, actions }) => (0, import_jsx_runtime39.jsxs)("div", { className: cn("p-4 border-l-4", getVariantClasses(variant, context)), children: [
  title && (0, import_jsx_runtime39.jsx)("p", { className: "font-bold", children: title }),
  description && (0, import_jsx_runtime39.jsx)("p", { children: description }),
  actions && (0, import_jsx_runtime39.jsx)("div", { className: "mt-2 space-x-2", children: actions.map((action, i) => (0, import_jsx_runtime39.jsx)("button", { onClick: action.onClick, className: "font-bold text-sm", children: action.label }, i)) })
] });
var useToast = () => {
  const show = (props) => {
    c.custom(
      (t) => (0, import_jsx_runtime39.jsx)(
        "div",
        {
          className: cn(
            "max-w-md w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5",
            t.visible ? "animate-enter" : "animate-leave"
          ),
          children: (0, import_jsx_runtime39.jsx)(Toast, { ...props })
        }
      ),
      {
        duration: props.persistent ? Infinity : props.duration || 4e3
      }
    );
  };
  return { show };
};

// packages/ui/src/components/index.ts
import { Tooltip } from "/Users/alexandracohen/Design-System/packages/ui/src/components/Tooltip.tsx";

// packages/ui/src/components/verticalslider.tsx
var import_react24 = __toESM(require_react());
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var VerticalSlider = (0, import_react24.forwardRef)(({
  context = "neutral",
  value = 50,
  onChange,
  min = 0,
  max = 100,
  step = 1,
  label,
  disabled = false,
  name,
  id
}, ref) => {
  const [currentValue, setCurrentValue] = (0, import_react24.useState)(value);
  const handleOnChange = (event) => {
    const newValue = Number(event.target.value);
    setCurrentValue(newValue);
    if (onChange) {
      onChange(newValue);
    }
  };
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "accent-blue-600";
      case "client":
        return "accent-green-600";
      case "admin":
        return "accent-gray-600";
      case "expert":
        return "accent-purple-600";
      case "toolCreator":
        return "accent-indigo-600";
      case "founder":
        return "accent-orange-600";
      default:
        return "accent-slate-600";
    }
  };
  const sliderClasses = [
    "h-36 w-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700",
    "disabled:cursor-not-allowed disabled:opacity-50",
    "[writing-mode:vertical-lr]",
    getContextClasses()
  ].filter(Boolean).join(" ");
  const sliderId = id || `vertical-slider-${Math.random().toString(36).substr(2, 9)}`;
  return (0, import_jsx_runtime40.jsxs)("div", { className: "flex flex-col items-center", children: [
    label && (0, import_jsx_runtime40.jsx)("label", { htmlFor: sliderId, className: "block text-sm font-medium text-slate-700 mb-2", children: label }),
    (0, import_jsx_runtime40.jsxs)("div", { className: "flex items-center", children: [
      (0, import_jsx_runtime40.jsx)(
        "input",
        {
          id: sliderId,
          type: "range",
          min,
          max,
          step,
          value: currentValue,
          onChange: handleOnChange,
          className: sliderClasses,
          disabled,
          ref,
          name
        }
      ),
      (0, import_jsx_runtime40.jsxs)("div", { className: "flex flex-col justify-between text-sm text-slate-500 ml-2 h-36", children: [
        (0, import_jsx_runtime40.jsx)("span", { children: max }),
        (0, import_jsx_runtime40.jsx)("span", { children: currentValue }),
        (0, import_jsx_runtime40.jsx)("span", { children: min })
      ] })
    ] })
  ] });
});
VerticalSlider.displayName = "VerticalSlider";

// packages/ui/src/components/workspaceicon.tsx
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var WorkspaceIcon = ({
  size = "md",
  className = "",
  workspace
}) => {
  const getDimensions = () => {
    switch (size) {
      case "xs":
        return 24;
      case "sm":
        return 32;
      case "md":
        return 40;
      case "lg":
        return 48;
      case "xl":
        return 56;
      default:
        return 40;
    }
  };
  const dimensions = getDimensions();
  const getInitials = (name) => {
    return name.split(" ").map((n) => n[0]).join("").substring(0, 2).toUpperCase();
  };
  return (0, import_jsx_runtime41.jsx)(
    "div",
    {
      className: cn(
        "rounded-full flex items-center justify-center bg-gray-200 text-gray-700 font-bold",
        className
      ),
      style: {
        width: dimensions,
        height: dimensions,
        fontSize: dimensions / 2.5
      },
      children: (workspace == null ? void 0 : workspace.logo) ? (0, import_jsx_runtime41.jsx)(
        "img",
        {
          src: workspace.logo,
          alt: `${workspace.name} logo`,
          className: "w-full h-full rounded-full"
        }
      ) : (0, import_jsx_runtime41.jsx)("span", { children: workspace ? getInitials(workspace.name) : "W" })
    }
  );
};

// packages/ui/src/components/container.tsx
var import_react25 = __toESM(require_react());
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var Container = (0, import_react25.forwardRef)(({
  size = "md",
  context = "neutral",
  responsive = true,
  padding = "md",
  margin = "md",
  fluid = false,
  centerContent = true,
  children,
  className,
  ...props
}, ref) => {
  const sizeClasses = {
    xs: "max-w-xs",
    sm: "max-w-sm",
    md: "max-w-md",
    lg: "max-w-lg",
    xl: "max-w-xl",
    "2xl": "max-w-2xl",
    full: "max-w-full"
  };
  const paddingClasses = {
    none: "p-0",
    sm: "p-2",
    md: "p-4",
    lg: "p-6",
    xl: "p-8"
  };
  const marginClasses = {
    none: "m-0",
    sm: "my-2",
    md: "my-4",
    lg: "my-6",
    xl: "my-8"
  };
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "bg-blue-50 border-blue-100 shadow-blue-100/50";
      case "client":
        return "bg-green-50 border-green-100 shadow-green-100/50";
      case "admin":
        return "bg-gray-50 border-gray-100 shadow-gray-100/50";
      case "expert":
        return "bg-purple-50 border-purple-100 shadow-purple-100/50";
      case "tool-creator":
        return "bg-orange-50 border-orange-100 shadow-orange-100/50";
      case "founder":
        return "bg-amber-50 border-amber-100 shadow-amber-100/50";
      default:
        return "";
    }
  };
  const getContextPadding = () => {
    const basePadding = paddingClasses[padding];
    switch (context) {
      case "consultant":
        return padding === "md" ? "p-5" : basePadding;
      case "client":
        return padding === "md" ? "p-6" : basePadding;
      case "admin":
        return padding === "md" ? "p-8" : basePadding;
      case "expert":
        return padding === "md" ? "p-4" : basePadding;
      case "tool-creator":
        return padding === "md" ? "p-4" : basePadding;
      case "founder":
        return padding === "md" ? "p-6" : basePadding;
      default:
        return basePadding;
    }
  };
  const responsiveClasses = {
    xs: "sm:max-w-sm md:max-w-md lg:max-w-lg",
    sm: "sm:max-w-md md:max-w-lg lg:max-w-xl",
    md: "sm:max-w-lg md:max-w-xl lg:max-w-2xl",
    lg: "sm:max-w-xl md:max-w-2xl lg:max-w-3xl",
    xl: "sm:max-w-2xl md:max-w-3xl lg:max-w-4xl",
    "2xl": "sm:max-w-3xl md:max-w-4xl lg:max-w-5xl",
    full: "max-w-full"
  };
  const getResponsiveClasses = () => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (typeof responsive === "object") {
      const classes = [];
      if ((_a = responsive.sm) == null ? void 0 : _a.size) classes.push(`sm:${sizeClasses[responsive.sm.size]}`);
      if ((_b = responsive.md) == null ? void 0 : _b.size) classes.push(`md:${sizeClasses[responsive.md.size]}`);
      if ((_c = responsive.lg) == null ? void 0 : _c.size) classes.push(`lg:${sizeClasses[responsive.lg.size]}`);
      if ((_d = responsive.xl) == null ? void 0 : _d.size) classes.push(`xl:${sizeClasses[responsive.xl.size]}`);
      if ((_e = responsive.sm) == null ? void 0 : _e.padding) classes.push(`sm:${paddingClasses[responsive.sm.padding]}`);
      if ((_f = responsive.md) == null ? void 0 : _f.padding) classes.push(`md:${paddingClasses[responsive.md.padding]}`);
      if ((_g = responsive.lg) == null ? void 0 : _g.padding) classes.push(`lg:${paddingClasses[responsive.lg.padding]}`);
      if ((_h = responsive.xl) == null ? void 0 : _h.padding) classes.push(`xl:${paddingClasses[responsive.xl.padding]}`);
      return classes.join(" ");
    }
    return responsive === true ? responsiveClasses[size] : "";
  };
  const containerClasses = cn(
    "w-full transition-all duration-200",
    fluid ? "max-w-full" : sizeClasses[size],
    centerContent ? "mx-auto" : "",
    typeof responsive === "object" ? paddingClasses[padding] : getContextPadding(),
    marginClasses[margin],
    getContextClasses(),
    getResponsiveClasses(),
    className
  );
  return (0, import_jsx_runtime42.jsx)("div", { ref, className: containerClasses, ...props, children });
});
Container.displayName = "Container";

// packages/ui/src/components/flex.tsx
var import_react26 = __toESM(require_react());
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var Flex = (0, import_react26.forwardRef)(({
  direction = "row",
  wrap = "nowrap",
  justify = "start",
  align = "stretch",
  gap = "md",
  context = "neutral",
  responsive = true,
  children,
  className,
  ...props
}, ref) => {
  const directionClasses = {
    row: "flex-row",
    column: "flex-col",
    "row-reverse": "flex-row-reverse",
    "column-reverse": "flex-col-reverse"
  };
  const wrapClasses = {
    nowrap: "flex-nowrap",
    wrap: "flex-wrap",
    "wrap-reverse": "flex-wrap-reverse"
  };
  const justifyClasses = {
    start: "justify-start",
    end: "justify-end",
    center: "justify-center",
    between: "justify-between",
    around: "justify-around",
    evenly: "justify-evenly"
  };
  const alignClasses = {
    start: "items-start",
    end: "items-end",
    center: "items-center",
    stretch: "items-stretch",
    baseline: "items-baseline"
  };
  const gapClasses = {
    none: "gap-0",
    sm: "gap-2",
    md: "gap-4",
    lg: "gap-6",
    xl: "gap-8"
  };
  const getContextGapClasses = () => {
    switch (context) {
      case "consultant":
        return "gap-4";
      case "client":
        return "gap-6";
      case "admin":
        return "gap-8";
      default:
        return gapClasses[gap];
    }
  };
  const getResponsiveClasses = () => {
    if (!responsive) return "";
    return `sm:${directionClasses[direction]} md:${directionClasses[direction]}`;
  };
  const flexClasses = cn(
    "flex",
    directionClasses[direction],
    wrapClasses[wrap],
    justifyClasses[justify],
    alignClasses[align],
    getContextGapClasses(),
    getResponsiveClasses(),
    className
  );
  return (0, import_jsx_runtime43.jsx)("div", { ref, className: flexClasses, ...props, children });
});
Flex.displayName = "Flex";

// packages/ui/src/components/grid.tsx
var import_react27 = __toESM(require_react());
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var Grid = (0, import_react27.forwardRef)(({
  columns = 3,
  rows,
  gap = "md",
  context = "neutral",
  responsive = true,
  autoFit = false,
  autoFill = false,
  templateAreas,
  children,
  className,
  ...props
}, ref) => {
  const gapClasses = {
    none: "gap-0",
    sm: "gap-2",
    md: "gap-4",
    lg: "gap-6",
    xl: "gap-8"
  };
  const getContextGapClasses = () => {
    switch (context) {
      case "consultant":
        return gap === "md" ? "gap-4" : gapClasses[gap];
      case "client":
        return gap === "md" ? "gap-6" : gapClasses[gap];
      case "admin":
        return gap === "md" ? "gap-8" : gapClasses[gap];
      case "expert":
        return gap === "md" ? "gap-3" : gapClasses[gap];
      case "tool-creator":
        return gap === "md" ? "gap-2" : gapClasses[gap];
      case "founder":
        return gap === "md" ? "gap-5" : gapClasses[gap];
      default:
        return gapClasses[gap];
    }
  };
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return "bg-blue-50/30 border border-blue-100 rounded-lg p-2";
      case "client":
        return "bg-green-50/30 border border-green-100 rounded-lg p-2";
      case "admin":
        return "bg-gray-50/30 border border-gray-100 rounded-lg p-2";
      case "expert":
        return "bg-purple-50/30 border border-purple-100 rounded-lg p-2";
      case "tool-creator":
        return "bg-orange-50/30 border border-orange-100 rounded-lg p-2";
      case "founder":
        return "bg-amber-50/30 border border-amber-100 rounded-lg p-2";
      default:
        return "";
    }
  };
  const getResponsiveClasses = () => {
    if (!responsive) return "";
    if (autoFit) return `grid-cols-[repeat(auto-fit,minmax(0,1fr))]`;
    if (autoFill) return `grid-cols-[repeat(auto-fill,minmax(0,1fr))]`;
    return "";
  };
  const style = {
    gridTemplateColumns: responsive ? void 0 : typeof columns === "number" ? `repeat(${columns}, minmax(0, 1fr))` : columns,
    gridTemplateRows: typeof rows === "number" ? `repeat(${rows}, minmax(0, 1fr))` : rows,
    gridTemplateAreas: templateAreas
  };
  const gridClasses = cn(
    "grid transition-all duration-200",
    getContextGapClasses(),
    getResponsiveClasses(),
    getContextClasses(),
    className
  );
  return (0, import_jsx_runtime44.jsx)("div", { ref, className: gridClasses, style, ...props, children });
});
Grid.displayName = "Grid";

// packages/ui/src/components/panel.tsx
var import_react28 = __toESM(require_react());
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var Panel = (0, import_react28.forwardRef)(({
  variant = "outlined",
  context = "neutral",
  collapsible = false,
  defaultCollapsed = false,
  header,
  actions,
  resizable = false,
  onCollapse,
  onResize,
  children,
  className,
  ...props
}, ref) => {
  const [isCollapsed, setIsCollapsed] = (0, import_react28.useState)(defaultCollapsed);
  const handleToggle = () => {
    if (collapsible) {
      const newCollapsedState = !isCollapsed;
      setIsCollapsed(newCollapsedState);
      if (onCollapse) {
        onCollapse(newCollapsedState);
      }
    }
  };
  const variantClasses = {
    elevated: "shadow-lg",
    outlined: "border",
    filled: "bg-gray-50"
  };
  const getContextClasses = () => {
    switch (context) {
      case "consultant":
        return {
          panel: "bg-blue-50 border-blue-200",
          header: "border-blue-200 bg-blue-100/50",
          content: "bg-blue-25",
          button: "text-blue-600 hover:text-blue-800 hover:bg-blue-100"
        };
      case "client":
        return {
          panel: "bg-green-50 border-green-200",
          header: "border-green-200 bg-green-100/50",
          content: "bg-green-25",
          button: "text-green-600 hover:text-green-800 hover:bg-green-100"
        };
      case "admin":
        return {
          panel: "bg-gray-50 border-gray-200",
          header: "border-gray-200 bg-gray-100/50",
          content: "bg-gray-25",
          button: "text-gray-600 hover:text-gray-800 hover:bg-gray-100"
        };
      case "expert":
        return {
          panel: "bg-purple-50 border-purple-200",
          header: "border-purple-200 bg-purple-100/50",
          content: "bg-purple-25",
          button: "text-purple-600 hover:text-purple-800 hover:bg-purple-100"
        };
      case "tool-creator":
        return {
          panel: "bg-orange-50 border-orange-200",
          header: "border-orange-200 bg-orange-100/50",
          content: "bg-orange-25",
          button: "text-orange-600 hover:text-orange-800 hover:bg-orange-100"
        };
      case "founder":
        return {
          panel: "bg-amber-50 border-amber-200",
          header: "border-amber-200 bg-amber-100/50",
          content: "bg-amber-25",
          button: "text-amber-600 hover:text-amber-800 hover:bg-amber-100"
        };
      default:
        return {
          panel: "bg-white border-gray-200",
          header: "border-gray-200 bg-gray-50",
          content: "bg-white",
          button: "text-gray-600 hover:text-gray-800 hover:bg-gray-100"
        };
    }
  };
  const contextClasses = getContextClasses();
  const panelClasses = cn(
    "rounded-lg transition-all duration-200",
    variantClasses[variant],
    contextClasses.panel,
    className
  );
  if (resizable) {
    return (0, import_jsx_runtime45.jsx)(
      Resizable,
      {
        defaultSize: {
          width: "100%",
          height: "auto"
        },
        onResizeStop: (e, direction, ref2, d) => {
          if (onResize) {
            onResize(ref2.offsetWidth);
          }
        },
        children: (0, import_jsx_runtime45.jsxs)("div", { ref, className: panelClasses, ...props, children: [
          (0, import_jsx_runtime45.jsxs)("div", { className: cn("flex items-center justify-between p-4 border-b", contextClasses.header), children: [
            (0, import_jsx_runtime45.jsxs)("div", { className: "flex items-center", children: [
              collapsible && (0, import_jsx_runtime45.jsx)("button", { onClick: handleToggle, className: cn("mr-2 p-1 rounded transition-colors", contextClasses.button), children: (0, import_jsx_runtime45.jsx)(ChevronDown, { className: cn("transition-transform", { "rotate-180": !isCollapsed }) }) }),
              header
            ] }),
            actions
          ] }),
          !isCollapsed && (0, import_jsx_runtime45.jsx)("div", { className: cn("p-4", contextClasses.content), children })
        ] })
      }
    );
  }
  return (0, import_jsx_runtime45.jsxs)("div", { ref, className: panelClasses, ...props, children: [
    (0, import_jsx_runtime45.jsxs)("div", { className: cn("flex items-center justify-between p-4 border-b", contextClasses.header), children: [
      (0, import_jsx_runtime45.jsxs)("div", { className: "flex items-center", children: [
        collapsible && (0, import_jsx_runtime45.jsx)("button", { onClick: handleToggle, className: cn("mr-2 p-1 rounded transition-colors", contextClasses.button), children: (0, import_jsx_runtime45.jsx)(ChevronDown, { className: cn("transition-transform", { "rotate-180": !isCollapsed }) }) }),
        header
      ] }),
      actions
    ] }),
    !isCollapsed && (0, import_jsx_runtime45.jsx)("div", { className: cn("p-4", contextClasses.content), children })
  ] });
});
Panel.displayName = "Panel";

// packages/ui/src/components/stack.tsx
var import_react29 = __toESM(require_react());
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var Stack = (0, import_react29.forwardRef)(({
  direction = "vertical",
  spacing = "md",
  context = "neutral",
  align = "stretch",
  separator,
  responsive = true,
  children,
  className,
  ...props
}, ref) => {
  const spacingClasses = {
    none: "space-y-0",
    sm: "space-y-2",
    md: "space-y-4",
    lg: "space-y-6",
    xl: "space-y-8"
  };
  const horizontalSpacingClasses = {
    none: "space-x-0",
    sm: "space-x-2",
    md: "space-x-4",
    lg: "space-x-6",
    xl: "space-x-8"
  };
  const alignClasses = {
    start: "items-start",
    end: "items-end",
    center: "items-center",
    stretch: "items-stretch"
  };
  const getContextSpacingClasses = () => {
    switch (context) {
      case "consultant":
        return direction === "vertical" ? "space-y-4" : "space-x-4";
      case "client":
        return direction === "vertical" ? "space-y-6" : "space-x-6";
      case "admin":
        return direction === "vertical" ? "space-y-8" : "space-x-8";
      default:
        return direction === "vertical" ? spacingClasses[spacing] : horizontalSpacingClasses[spacing];
    }
  };
  const getResponsiveClasses = () => {
    if (!responsive) return "";
    return `sm:${direction === "vertical" ? "flex-col" : "flex-row"}`;
  };
  const stackClasses = cn(
    "flex",
    direction === "vertical" ? "flex-col" : "flex-row",
    getContextSpacingClasses(),
    alignClasses[align],
    getResponsiveClasses(),
    className
  );
  const childrenWithSeparators = separator ? import_react29.default.Children.toArray(children).flatMap(
    (child, index) => index < import_react29.default.Children.count(children) - 1 ? [child, separator] : [child]
  ) : children;
  return (0, import_jsx_runtime46.jsx)("div", { ref, className: stackClasses, ...props, children: childrenWithSeparators });
});
Stack.displayName = "Stack";

export {
  AddressInput,
  Alert,
  BillingStatus,
  Checkbox2 as Checkbox,
  ClientBadge,
  CollaboratorAvatar,
  ColorPicker,
  ConsentToggle,
  CustomCurrencyInput,
  DatePicker,
  DocumentType,
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  EmptyState,
  ExpertiseTag,
  Icon,
  Image,
  Input,
  Label,
  Spinner,
  LoadingOverlay,
  Modal,
  Progress,
  OnboardingWizard,
  PhoneInput,
  ProgressIndicator,
  ProjectPhase,
  RichTextEditor,
  Separator,
  SkeletonLoader,
  Slider,
  StatusDot,
  Switch,
  Tabs,
  Textarea,
  TimeIndicator,
  TimePicker,
  TimeRangeInput,
  Toast,
  useToast,
  VerticalSlider,
  WorkspaceIcon,
  Container,
  Flex,
  Grid,
  Panel,
  Stack,
  Avatar,
  Badge,
  BreadcrumbItem,
  Breadcrumbs,
  Button,
  Card,
  Logo,
  Pagination,
  EnhancedSelect,
  Tooltip
};
//# sourceMappingURL=chunk-4QSTRJYN.js.map
