{
  "version": 3,
  "sources": ["../../../../../../packages/shared/src/lib/supabase-mock.ts"],
  "sourcesContent": ["/**\n * Mock Supabase client for Storybook and testing environments\n * This prevents the \"Missing Supabase URL\" error in component development\n */\n\nconst createMockSupabaseClient = () => {\n  const mockResponse = {\n    data: null,\n    error: null,\n    count: null,\n    status: 200,\n    statusText: 'OK'\n  };\n\n  const mockQuery = {\n    select: () => mockQuery,\n    insert: () => mockQuery,\n    update: () => mockQuery,\n    delete: () => mockQuery,\n    upsert: () => mockQuery,\n    eq: () => mockQuery,\n    neq: () => mockQuery,\n    gt: () => mockQuery,\n    gte: () => mockQuery,\n    lt: () => mockQuery,\n    lte: () => mockQuery,\n    like: () => mockQuery,\n    ilike: () => mockQuery,\n    is: () => mockQuery,\n    in: () => mockQuery,\n    contains: () => mockQuery,\n    containedBy: () => mockQuery,\n    rangeGt: () => mockQuery,\n    rangeGte: () => mockQuery,\n    rangeLt: () => mockQuery,\n    rangeLte: () => mockQuery,\n    rangeAdjacent: () => mockQuery,\n    overlaps: () => mockQuery,\n    textSearch: () => mockQuery,\n    match: () => mockQuery,\n    not: () => mockQuery,\n    or: () => mockQuery,\n    filter: () => mockQuery,\n    order: () => mockQuery,\n    limit: () => mockQuery,\n    range: () => mockQuery,\n    abortSignal: () => mockQuery,\n    single: () => Promise.resolve(mockResponse),\n    maybeSingle: () => Promise.resolve(mockResponse),\n    csv: () => Promise.resolve(mockResponse),\n    geojson: () => Promise.resolve(mockResponse),\n    explain: () => Promise.resolve(mockResponse),\n    rollback: () => Promise.resolve(mockResponse),\n    returns: () => mockQuery,\n    then: (resolve: any) => resolve(mockResponse)\n  };\n\n  return {\n    from: () => mockQuery,\n    rpc: () => Promise.resolve(mockResponse),\n    auth: {\n      getUser: () => Promise.resolve({ data: { user: null }, error: null }),\n      getSession: () => Promise.resolve({ data: { session: null }, error: null }),\n      signIn: () => Promise.resolve(mockResponse),\n      signUp: () => Promise.resolve(mockResponse),\n      signOut: () => Promise.resolve(mockResponse),\n      resetPasswordForEmail: () => Promise.resolve(mockResponse),\n      updateUser: () => Promise.resolve(mockResponse),\n      setSession: () => Promise.resolve(mockResponse),\n      refreshSession: () => Promise.resolve(mockResponse),\n      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } })\n    },\n    storage: {\n      from: () => ({\n        upload: () => Promise.resolve(mockResponse),\n        download: () => Promise.resolve(mockResponse),\n        list: () => Promise.resolve(mockResponse),\n        update: () => Promise.resolve(mockResponse),\n        move: () => Promise.resolve(mockResponse),\n        copy: () => Promise.resolve(mockResponse),\n        remove: () => Promise.resolve(mockResponse),\n        createSignedUrl: () => Promise.resolve(mockResponse),\n        createSignedUrls: () => Promise.resolve(mockResponse),\n        getPublicUrl: () => ({ data: { publicUrl: '' } })\n      })\n    },\n    realtime: {\n      channel: () => ({\n        on: () => ({}),\n        subscribe: () => Promise.resolve('SUBSCRIBED'),\n        unsubscribe: () => Promise.resolve('UNSUBSCRIBED')\n      })\n    }\n  };\n};\n\nexport const supabase = createMockSupabaseClient();\n"],
  "mappings": "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",
  "names": []
}
