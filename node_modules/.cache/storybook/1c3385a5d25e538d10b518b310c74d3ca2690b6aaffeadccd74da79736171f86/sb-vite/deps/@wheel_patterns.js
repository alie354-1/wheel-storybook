import {
  Hls
} from "./chunk-YYUQOYTP.js";
import "./chunk-SPYW5S5D.js";
import {
  u
} from "./chunk-VFQEY43K.js";
import {
  Area,
  AreaChart,
  Bar,
  BarChart,
  CartesianGrid,
  Legend,
  Line,
  LineChart,
  Pie,
  PieChart,
  ResponsiveContainer,
  Scatter,
  ScatterChart,
  Tooltip,
  XAxis,
  YAxis
} from "./chunk-7YC2DDYB.js";
import {
  Alert,
  Avatar,
  Badge,
  Button,
  Card,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  Icon,
  Input,
  Label,
  Modal,
  ProgressIndicator,
  StatusDot,
  Textarea,
  TimeIndicator,
  useToast
} from "./chunk-4QSTRJYN.js";
import "./chunk-TXWG4WBF.js";
import "./chunk-BC4K4ZOO.js";
import "./chunk-R22ZQZEH.js";
import "./chunk-S2T7PHXB.js";
import "./chunk-5MM2ORHA.js";
import "./chunk-TDQL2RD6.js";
import "./chunk-E5JPOPMV.js";
import "./chunk-CTAEXN73.js";
import "./chunk-4LNVX564.js";
import "./chunk-OTP3FXEA.js";
import "./chunk-QG4K2J32.js";
import "./chunk-SJJXBOT7.js";
import "./chunk-T6K2JVC3.js";
import "./chunk-3XBVTSKT.js";
import "./chunk-VEBNUUMV.js";
import "./chunk-IU3QFP7E.js";
import "./chunk-R3KZOC3R.js";
import "./chunk-NEEEL3XU.js";
import "./chunk-6JCWOCCU.js";
import "./chunk-HEFVNISR.js";
import {
  cn,
  useInterval,
  useProgress
} from "./chunk-GDBXIXOE.js";
import "./chunk-OIGUBL5Q.js";
import "./chunk-SQC57HEE.js";
import "./chunk-GW7YTEOE.js";
import "./chunk-ZYTAZ2LT.js";
import "./chunk-CKXQGZWK.js";
import "./chunk-552A6ZKJ.js";
import "./chunk-HNKYCAI5.js";
import "./chunk-RMOJXNDH.js";
import "./chunk-ZBYQSCBL.js";
import "./chunk-FOZ4PPQW.js";
import "./chunk-SC4INN4A.js";
import "./chunk-PPJHRTTM.js";
import "./chunk-HC5QDNQJ.js";
import "./chunk-K4F3KB2Y.js";
import "./chunk-46H5WXDV.js";
import "./chunk-MPE5GGRJ.js";
import "./chunk-TS3JNNVA.js";
import "./chunk-MZE2JMUW.js";
import "./chunk-5M5NKDLN.js";
import "./chunk-DIZX2WDK.js";
import "./chunk-AZOQSLXG.js";
import "./chunk-35EINVXG.js";
import "./chunk-26JI4GM3.js";
import "./chunk-AD5XTJKA.js";
import "./chunk-CN4Y6LVA.js";
import "./chunk-UDCKICQF.js";
import "./chunk-ZHZVNHID.js";
import {
  require_react_dom
} from "./chunk-MWSGYS3J.js";
import {
  require_jsx_runtime
} from "./chunk-ZJWUZLUK.js";
import "./chunk-ZAURCAXT.js";
import "./chunk-XODSPUEP.js";
import {
  require_react
} from "./chunk-USEVLOEB.js";
import {
  __publicField,
  __toESM
} from "./chunk-LK32TJAX.js";

// packages/patterns/src/components/StatCard.tsx
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var StatCard = ({
  title,
  value,
  context = "neutral",
  trend,
  comparison,
  format = "number",
  formatter,
  onClick,
  loading = false,
  size = "md",
  onUpdate,
  updateInterval
}) => {
  const [currentValue, setCurrentValue] = (0, import_react.useState)(value);
  useInterval(() => {
    const newValue = typeof currentValue === "number" ? currentValue + Math.floor(Math.random() * 100) : currentValue;
    setCurrentValue(newValue);
    if (onUpdate) {
      onUpdate(newValue);
    }
  }, updateInterval || null);
  const formattedValue = () => {
    if (formatter) {
      return formatter(currentValue);
    }
    switch (format) {
      case "currency":
        return `$${Number(currentValue).toFixed(2)}`;
      case "percentage":
        return `${currentValue}%`;
      default:
        return currentValue;
    }
  };
  return (0, import_jsx_runtime.jsxs)(
    Card,
    {
      className: `stat-card--${context} stat-card--${size}`,
      onClick,
      children: [
        (0, import_jsx_runtime.jsx)("div", { className: "text-lg font-bold", children: title }),
        (0, import_jsx_runtime.jsx)("div", { className: "text-3xl", children: loading ? "..." : formattedValue() }),
        trend && (0, import_jsx_runtime.jsxs)("div", { children: [
          trend.direction === "up" ? "↑" : "↓",
          " ",
          trend.value,
          "% vs ",
          trend.period
        ] }),
        comparison && (0, import_jsx_runtime.jsxs)("div", { children: [
          "vs ",
          comparison.label,
          ": ",
          comparison.value
        ] })
      ]
    }
  );
};

// packages/patterns/src/components/clientcard.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var ClientCard = ({
  client,
  context = "neutral",
  showProjects = false,
  showMetrics = false,
  showActions = false,
  onClientClick,
  onProjectClick,
  onActionClick,
  permissions = [],
  size = "md"
}) => {
  var _a, _b;
  return (0, import_jsx_runtime2.jsxs)(
    Card,
    {
      className: `client-card--${context} client-card--${size}`,
      onClick: () => onClientClick == null ? void 0 : onClientClick(client),
      children: [
        (0, import_jsx_runtime2.jsxs)("div", { className: "flex items-center", children: [
          (0, import_jsx_runtime2.jsx)(Avatar, { src: client.avatarUrl, alt: client.name }),
          (0, import_jsx_runtime2.jsx)("div", { className: "ml-4", children: (0, import_jsx_runtime2.jsx)("div", { className: "text-lg font-bold", children: client.name }) })
        ] }),
        showProjects && (0, import_jsx_runtime2.jsxs)("div", { className: "mt-4", children: [
          (0, import_jsx_runtime2.jsx)("h4", { className: "font-bold", children: "Projects" }),
          (_a = client.projects) == null ? void 0 : _a.map((project) => (0, import_jsx_runtime2.jsx)("div", { onClick: () => onProjectClick == null ? void 0 : onProjectClick(project), children: project.name }, project.id))
        ] }),
        showMetrics && (0, import_jsx_runtime2.jsxs)("div", { className: "mt-4", children: [
          (0, import_jsx_runtime2.jsx)("h4", { className: "font-bold", children: "Metrics" }),
          (_b = client.metrics) == null ? void 0 : _b.map((metric) => (0, import_jsx_runtime2.jsx)(StatCard, { ...metric }, metric.title))
        ] }),
        showActions && (0, import_jsx_runtime2.jsx)("div", { className: "mt-4", children: permissions.includes("edit") && (0, import_jsx_runtime2.jsx)(Button, { onClick: () => onActionClick == null ? void 0 : onActionClick("edit", client), children: "Edit" }) })
      ]
    }
  );
};

// packages/patterns/src/components/ActivityCard.tsx
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var ActivityCard = ({
  activities,
  context = "neutral",
  filters = [],
  onActivityClick,
  onFilterChange,
  realTimeUpdates = false,
  maxItems,
  showLoadMore = false,
  onLoadMore
}) => {
  const filteredActivities = activities.filter((activity) => {
    if (filters.length === 0) {
      return true;
    }
    return filters.every((filter) => {
      if (filter.type === "user") {
        return activity.user.id === filter.id;
      }
      if (filter.type === "type") {
        return activity.type === filter.name;
      }
      return true;
    });
  });
  return (0, import_jsx_runtime3.jsxs)(Card, { className: `activity-card--${context}`, children: [
    filteredActivities.slice(0, maxItems).map((activity) => (0, import_jsx_runtime3.jsxs)("div", { onClick: () => onActivityClick == null ? void 0 : onActivityClick(activity), children: [
      activity.description,
      " @ ",
      activity.timestamp.toLocaleDateString()
    ] }, activity.id)),
    showLoadMore && (0, import_jsx_runtime3.jsx)(Button, { onClick: onLoadMore, children: "Load More" })
  ] });
};

// packages/patterns/src/components/workspacecard.tsx
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var WorkspaceCard = ({
  workspace,
  context = "neutral",
  showMembers = false,
  showActivity = false,
  showMetrics = false,
  onWorkspaceClick,
  onMemberClick,
  onActivityClick,
  permissions = [],
  size = "md"
}) => {
  var _a, _b;
  return (0, import_jsx_runtime4.jsxs)(
    Card,
    {
      className: `workspace-card--${context} workspace-card--${size}`,
      onClick: () => onWorkspaceClick == null ? void 0 : onWorkspaceClick(workspace),
      children: [
        (0, import_jsx_runtime4.jsx)("div", { className: "text-lg font-bold", children: workspace.name }),
        showMembers && (0, import_jsx_runtime4.jsxs)("div", { className: "mt-4", children: [
          (0, import_jsx_runtime4.jsx)("h4", { className: "font-bold", children: "Members" }),
          (_a = workspace.members) == null ? void 0 : _a.map((member) => (0, import_jsx_runtime4.jsxs)("div", { onClick: () => onMemberClick == null ? void 0 : onMemberClick(member), children: [
            (0, import_jsx_runtime4.jsx)(Avatar, { src: member.avatarUrl, alt: member.name }),
            member.name
          ] }, member.id))
        ] }),
        showActivity && workspace.activity && (0, import_jsx_runtime4.jsxs)("div", { className: "mt-4", children: [
          (0, import_jsx_runtime4.jsx)("h4", { className: "font-bold", children: "Activity" }),
          (0, import_jsx_runtime4.jsx)(ActivityCard, { activities: workspace.activity })
        ] }),
        showMetrics && (0, import_jsx_runtime4.jsxs)("div", { className: "mt-4", children: [
          (0, import_jsx_runtime4.jsx)("h4", { className: "font-bold", children: "Metrics" }),
          (_b = workspace.metrics) == null ? void 0 : _b.map((metric) => (0, import_jsx_runtime4.jsx)(StatCard, { ...metric }, metric.title))
        ] })
      ]
    }
  );
};

// packages/patterns/src/components/ProgressCard.tsx
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var ProgressCard = ({
  title,
  progress,
  context = "neutral",
  showMilestones = false,
  size = "md",
  updateInterval
}) => {
  var _a;
  const currentValue = useProgress(progress.value, progress.target, updateInterval || null);
  const percentage = currentValue / progress.target * 100;
  return (0, import_jsx_runtime5.jsxs)(Card, { className: `progress-card--${context} progress-card--${size}`, children: [
    (0, import_jsx_runtime5.jsx)("div", { className: "text-lg font-bold", children: title }),
    (0, import_jsx_runtime5.jsx)(ProgressIndicator, { value: percentage }),
    showMilestones && (0, import_jsx_runtime5.jsx)("div", { className: "mt-4", children: (_a = progress.milestones) == null ? void 0 : _a.map((milestone) => (0, import_jsx_runtime5.jsx)("div", { children: milestone.name }, milestone.id)) })
  ] });
};

// packages/patterns/src/components/projectcard.tsx
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var ProjectCard = ({
  project,
  context = "neutral",
  showProgress = false,
  showTeam = false,
  showActions = false,
  onProjectClick,
  onTeamMemberClick,
  onActionClick,
  permissions = [],
  size = "md"
}) => {
  var _a;
  return (0, import_jsx_runtime6.jsxs)(
    Card,
    {
      className: `project-card--${context} project-card--${size}`,
      onClick: () => onProjectClick == null ? void 0 : onProjectClick(project),
      children: [
        (0, import_jsx_runtime6.jsx)("div", { className: "text-lg font-bold", children: project.name }),
        showProgress && project.progress && (0, import_jsx_runtime6.jsx)("div", { className: "mt-4", children: (0, import_jsx_runtime6.jsx)(ProgressCard, { title: "Progress", progress: project.progress }) }),
        showTeam && (0, import_jsx_runtime6.jsxs)("div", { className: "mt-4", children: [
          (0, import_jsx_runtime6.jsx)("h4", { className: "font-bold", children: "Team" }),
          (_a = project.team) == null ? void 0 : _a.map((member) => (0, import_jsx_runtime6.jsxs)(
            "div",
            {
              onClick: () => onTeamMemberClick == null ? void 0 : onTeamMemberClick(member),
              children: [
                (0, import_jsx_runtime6.jsx)(Avatar, { src: member.avatarUrl, alt: member.name }),
                member.name
              ]
            },
            member.id
          ))
        ] }),
        showActions && (0, import_jsx_runtime6.jsx)("div", { className: "mt-4", children: permissions.includes("edit") && (0, import_jsx_runtime6.jsx)(Button, { onClick: () => onActionClick == null ? void 0 : onActionClick("edit", project), children: "Edit" }) })
      ]
    }
  );
};

// packages/patterns/src/components/billingcard.tsx
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var BillingCard = ({
  billing,
  context = "neutral",
  showPaymentHistory = false,
  showInvoices = false,
  showActions = false,
  onBillingClick,
  onInvoiceClick,
  onActionClick,
  permissions = [],
  size = "md"
}) => {
  var _a, _b;
  return (0, import_jsx_runtime7.jsxs)(
    Card,
    {
      className: `billing-card--${context} billing-card--${size}`,
      onClick: () => onBillingClick == null ? void 0 : onBillingClick(billing),
      children: [
        (0, import_jsx_runtime7.jsx)("div", { className: "text-lg font-bold", children: billing.name }),
        showPaymentHistory && (0, import_jsx_runtime7.jsxs)("div", { className: "mt-4", children: [
          (0, import_jsx_runtime7.jsx)("h4", { className: "font-bold", children: "Payment History" }),
          (_a = billing.paymentHistory) == null ? void 0 : _a.map((payment) => (0, import_jsx_runtime7.jsxs)("div", { children: [
            payment.amount,
            " on ",
            payment.date.toLocaleDateString()
          ] }, payment.id))
        ] }),
        showInvoices && (0, import_jsx_runtime7.jsxs)("div", { className: "mt-4", children: [
          (0, import_jsx_runtime7.jsx)("h4", { className: "font-bold", children: "Invoices" }),
          (_b = billing.invoices) == null ? void 0 : _b.map((invoice) => (0, import_jsx_runtime7.jsxs)("div", { onClick: () => onInvoiceClick == null ? void 0 : onInvoiceClick(invoice), children: [
            invoice.amount,
            " due on ",
            invoice.dueDate.toLocaleDateString()
          ] }, invoice.id))
        ] }),
        showActions && (0, import_jsx_runtime7.jsx)("div", { className: "mt-4", children: permissions.includes("edit") && (0, import_jsx_runtime7.jsx)(Button, { onClick: () => onActionClick == null ? void 0 : onActionClick("edit", billing), children: "Edit" }) })
      ]
    }
  );
};

// packages/patterns/src/components/timecard.tsx
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var TimeCard = ({
  time,
  className = ""
}) => {
  return (0, import_jsx_runtime8.jsx)(Card, { className: cn("p-4", className), children: (0, import_jsx_runtime8.jsxs)("div", { className: "flex items-center justify-between", children: [
    (0, import_jsx_runtime8.jsx)("h3", { className: "text-lg font-semibold", children: "Time" }),
    (0, import_jsx_runtime8.jsx)(TimeIndicator, { time })
  ] }) });
};

// packages/patterns/src/components/ModalPortal.tsx
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var modalStack = [];
var modalCounter = 0;
var ModalPortal = ({
  isOpen,
  onClose,
  children,
  className = "",
  preventBackdropClose = false,
  zIndex = 9999
}) => {
  const [modalId] = (0, import_react2.useState)(() => `modal-${++modalCounter}`);
  const backdropRef = (0, import_react2.useRef)(null);
  const modalRef = (0, import_react2.useRef)(null);
  const previousActiveElement = (0, import_react2.useRef)(null);
  const [isClosing, setIsClosing] = (0, import_react2.useState)(false);
  const trapFocus = (0, import_react2.useCallback)((e) => {
    if (!modalRef.current) return;
    const focusableElements = modalRef.current.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];
    if (e.key === "Tab") {
      if (e.shiftKey) {
        if (document.activeElement === firstElement) {
          e.preventDefault();
          lastElement == null ? void 0 : lastElement.focus();
        }
      } else {
        if (document.activeElement === lastElement) {
          e.preventDefault();
          firstElement == null ? void 0 : firstElement.focus();
        }
      }
    }
  }, []);
  const handleEscape = (0, import_react2.useCallback)((e) => {
    if (e.key === "Escape") {
      e.preventDefault();
      e.stopImmediatePropagation();
      if (modalStack[modalStack.length - 1] === modalId) {
        handleClose();
      }
    }
  }, [modalId]);
  const handleClose = (0, import_react2.useCallback)(() => {
    if (isClosing) return;
    setIsClosing(true);
    const index = modalStack.indexOf(modalId);
    if (index > -1) {
      modalStack.splice(index, 1);
    }
    onClose();
    setTimeout(() => setIsClosing(false), 100);
  }, [modalId, onClose, isClosing]);
  const handleBackdropClick = (0, import_react2.useCallback)((e) => {
    if (preventBackdropClose) return;
    if (e.target === backdropRef.current) {
      e.preventDefault();
      e.stopPropagation();
      handleClose();
    }
  }, [preventBackdropClose, handleClose]);
  const handleModalClick = (0, import_react2.useCallback)((e) => {
    e.stopPropagation();
  }, []);
  (0, import_react2.useEffect)(() => {
    if (isOpen && !isClosing) {
      previousActiveElement.current = document.activeElement;
      if (!modalStack.includes(modalId)) {
        modalStack.push(modalId);
      }
      document.body.style.overflow = "hidden";
      document.addEventListener("keydown", handleEscape, true);
      document.addEventListener("keydown", trapFocus);
      setTimeout(() => {
        var _a;
        const firstFocusable = (_a = modalRef.current) == null ? void 0 : _a.querySelector(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        firstFocusable == null ? void 0 : firstFocusable.focus();
      }, 10);
    } else {
      const index = modalStack.indexOf(modalId);
      if (index > -1) {
        modalStack.splice(index, 1);
      }
      if (modalStack.length === 0) {
        document.body.style.overflow = "";
      }
      document.removeEventListener("keydown", handleEscape, true);
      document.removeEventListener("keydown", trapFocus);
      if (previousActiveElement.current && modalStack.length === 0) {
        previousActiveElement.current.focus();
        previousActiveElement.current = null;
      }
    }
    return () => {
      const index = modalStack.indexOf(modalId);
      if (index > -1) {
        modalStack.splice(index, 1);
      }
      if (modalStack.length === 0) {
        document.body.style.overflow = "";
      }
      document.removeEventListener("keydown", handleEscape, true);
      document.removeEventListener("keydown", trapFocus);
    };
  }, [isOpen, isClosing, modalId, handleEscape, trapFocus]);
  (0, import_react2.useEffect)(() => {
    const cleanup = () => {
      const stuckBackdrops = document.querySelectorAll('[data-modal-backdrop="true"]');
      stuckBackdrops.forEach((backdrop, index) => {
        if (index > 0) {
          backdrop.remove();
        }
      });
    };
    const timer = setTimeout(cleanup, 100);
    return () => clearTimeout(timer);
  }, [isOpen]);
  if (!isOpen || isClosing) {
    return null;
  }
  const modalContent = (0, import_jsx_runtime9.jsx)(
    "div",
    {
      ref: backdropRef,
      className: `fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center p-4 ${className}`,
      onClick: handleBackdropClick,
      "data-modal-backdrop": "true",
      "aria-modal": "true",
      role: "dialog",
      "aria-labelledby": "modal-title",
      children: (0, import_jsx_runtime9.jsx)(
        "div",
        {
          ref: modalRef,
          className: "relative max-w-full max-h-full overflow-auto",
          onClick: handleModalClick,
          "data-modal-content": "true",
          children
        }
      )
    }
  );
  return (0, import_react_dom.createPortal)(modalContent, document.body);
};

// packages/patterns/src/components/Toast.tsx
var toast = {
  success: (message, options) => {
    console.log("SUCCESS:", message);
  },
  error: (message, options) => {
    console.error("ERROR:", message);
  },
  warning: (message, options) => {
    console.warn("WARNING:", message);
  },
  info: (message, options) => {
    console.info("INFO:", message);
  }
};

// packages/patterns/src/components/Tooltip.tsx
var import_react3 = __toESM(require_react());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var Tooltip2 = ({
  content,
  position = "top",
  delay = 300,
  children,
  className = ""
}) => {
  const [isVisible, setIsVisible] = (0, import_react3.useState)(false);
  const [delayHandler, setDelayHandler] = (0, import_react3.useState)(null);
  const tooltipRef = (0, import_react3.useRef)(null);
  const showTooltip = () => {
    const handler = window.setTimeout(() => {
      setIsVisible(true);
    }, delay);
    setDelayHandler(handler);
  };
  const hideTooltip = () => {
    if (delayHandler) {
      clearTimeout(delayHandler);
      setDelayHandler(null);
    }
    setIsVisible(false);
  };
  (0, import_react3.useEffect)(() => {
    const handleClickOutside = (event) => {
      if (tooltipRef.current && !tooltipRef.current.contains(event.target)) {
        hideTooltip();
      }
    };
    if (isVisible) {
      document.addEventListener("mousedown", handleClickOutside);
    }
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isVisible]);
  const getPositionStyles = () => {
    switch (position) {
      case "top":
        return {
          bottom: "100%",
          left: "50%",
          transform: "translateX(-50%)",
          marginBottom: "5px"
        };
      case "bottom":
        return {
          top: "100%",
          left: "50%",
          transform: "translateX(-50%)",
          marginTop: "5px"
        };
      case "left":
        return {
          right: "100%",
          top: "50%",
          transform: "translateY(-50%)",
          marginRight: "5px"
        };
      case "right":
        return {
          left: "100%",
          top: "50%",
          transform: "translateY(-50%)",
          marginLeft: "5px"
        };
      default:
        return {
          bottom: "100%",
          left: "50%",
          transform: "translateX(-50%)",
          marginBottom: "5px"
        };
    }
  };
  const childWithProps = import_react3.default.cloneElement(children, {
    onMouseEnter: showTooltip,
    onMouseLeave: hideTooltip,
    onClick: (e) => {
      if (children.props.onClick) {
        children.props.onClick(e);
      }
      hideTooltip();
    }
  });
  return (0, import_jsx_runtime10.jsxs)("div", { className: "relative inline-block", ref: tooltipRef, children: [
    childWithProps,
    isVisible && (0, import_jsx_runtime10.jsx)(
      "div",
      {
        className: `absolute z-50 px-2 py-1 text-sm text-slate-50 bg-slate-900 rounded-md shadow-lg whitespace-nowrap transition-opacity duration-150 ${className}`,
        style: getPositionStyles(),
        children: content
      }
    )
  ] });
};

// packages/patterns/src/components/forms/FormField.tsx
var import_jsx_runtime11 = __toESM(require_jsx_runtime());

// packages/patterns/src/components/forms/Form.tsx
var import_jsx_runtime12 = __toESM(require_jsx_runtime());

// packages/patterns/src/components/forms/ValidatedForm.tsx
var import_react4 = __toESM(require_react());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());

// packages/patterns/src/components/Chart.tsx
var import_react5 = __toESM(require_react());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var Chart = ({ data, type, updateInterval }) => {
  const [chartData, setChartData] = (0, import_react5.useState)(data);
  useInterval(() => {
    setChartData(
      chartData.map((item) => ({
        ...item,
        value: item.value + Math.floor(Math.random() * 100)
      }))
    );
  }, updateInterval || null);
  const renderChart = () => {
    switch (type) {
      case "line":
        return (0, import_jsx_runtime14.jsxs)(LineChart, { data: chartData, children: [
          (0, import_jsx_runtime14.jsx)(CartesianGrid, { strokeDasharray: "3 3" }),
          (0, import_jsx_runtime14.jsx)(XAxis, { dataKey: "name" }),
          (0, import_jsx_runtime14.jsx)(YAxis, {}),
          (0, import_jsx_runtime14.jsx)(Tooltip, {}),
          (0, import_jsx_runtime14.jsx)(Legend, {}),
          (0, import_jsx_runtime14.jsx)(Line, { type: "monotone", dataKey: "value", stroke: "#8884d8" })
        ] });
      case "bar":
        return (0, import_jsx_runtime14.jsxs)(BarChart, { data: chartData, children: [
          (0, import_jsx_runtime14.jsx)(CartesianGrid, { strokeDasharray: "3 3" }),
          (0, import_jsx_runtime14.jsx)(XAxis, { dataKey: "name" }),
          (0, import_jsx_runtime14.jsx)(YAxis, {}),
          (0, import_jsx_runtime14.jsx)(Tooltip, {}),
          (0, import_jsx_runtime14.jsx)(Legend, {}),
          (0, import_jsx_runtime14.jsx)(Bar, { dataKey: "value", fill: "#8884d8" })
        ] });
      case "pie":
        return (0, import_jsx_runtime14.jsxs)(PieChart, { children: [
          (0, import_jsx_runtime14.jsx)(
            Pie,
            {
              data: chartData,
              dataKey: "value",
              nameKey: "name",
              fill: "#8884d8",
              isAnimationActive: false
            }
          ),
          (0, import_jsx_runtime14.jsx)(Tooltip, {})
        ] });
      case "scatter":
        return (0, import_jsx_runtime14.jsxs)(ScatterChart, { children: [
          (0, import_jsx_runtime14.jsx)(CartesianGrid, {}),
          (0, import_jsx_runtime14.jsx)(XAxis, { type: "category", dataKey: "name", name: "name" }),
          (0, import_jsx_runtime14.jsx)(YAxis, { type: "number", dataKey: "value", name: "value" }),
          (0, import_jsx_runtime14.jsx)(Tooltip, { cursor: { strokeDasharray: "3 3" } }),
          (0, import_jsx_runtime14.jsx)(Scatter, { name: "A school", data: chartData, fill: "#8884d8" })
        ] });
      case "area":
        return (0, import_jsx_runtime14.jsxs)(AreaChart, { data: chartData, children: [
          (0, import_jsx_runtime14.jsx)(CartesianGrid, { strokeDasharray: "3 3" }),
          (0, import_jsx_runtime14.jsx)(XAxis, { dataKey: "name" }),
          (0, import_jsx_runtime14.jsx)(YAxis, {}),
          (0, import_jsx_runtime14.jsx)(Tooltip, {}),
          (0, import_jsx_runtime14.jsx)(Area, { type: "monotone", dataKey: "value", stroke: "#8884d8", fill: "#8884d8" })
        ] });
      default:
        throw new Error(`Invalid chart type: ${type}`);
    }
  };
  return (0, import_jsx_runtime14.jsx)(ResponsiveContainer, { width: "100%", height: 300, children: renderChart() });
};

// packages/patterns/src/components/MediaPlayer.tsx
var import_react6 = __toESM(require_react());
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var MediaPlayer = ({ media }) => {
  const waveformRef = (0, import_react6.useRef)(null);
  const wavesurfer = (0, import_react6.useRef)(null);
  const videoRef = (0, import_react6.useRef)(null);
  const [currentSlide, setCurrentSlide] = (0, import_react6.useState)(0);
  (0, import_react6.useEffect)(() => {
    if (media.type === "audio" && waveformRef.current) {
      if (wavesurfer.current) {
        wavesurfer.current.destroy();
      }
      wavesurfer.current = u.create({
        container: waveformRef.current,
        waveColor: "violet",
        progressColor: "purple",
        barWidth: 2,
        cursorWidth: 1,
        height: 100
      });
      wavesurfer.current.load(media.src);
      const playButton = document.createElement("button");
      playButton.innerText = "Play/Pause";
      playButton.onclick = () => {
        var _a;
        return (_a = wavesurfer.current) == null ? void 0 : _a.playPause();
      };
      while (waveformRef.current.firstChild) {
        waveformRef.current.removeChild(waveformRef.current.firstChild);
      }
      waveformRef.current.appendChild(playButton);
      return () => {
        var _a;
        (_a = wavesurfer.current) == null ? void 0 : _a.destroy();
      };
    } else if (media.type === "video" && videoRef.current) {
      if (Hls.isSupported()) {
        const hls = new Hls();
        hls.loadSource(media.src);
        hls.attachMedia(videoRef.current);
      }
    }
  }, [media.src, media.type]);
  const renderPlayer = () => {
    var _a, _b;
    switch (media.type) {
      case "video":
        return (0, import_jsx_runtime15.jsx)("video", { ref: videoRef, src: media.src, controls: true, className: "w-full" });
      case "audio":
        return (0, import_jsx_runtime15.jsx)("div", { ref: waveformRef });
      case "presentation":
        return (0, import_jsx_runtime15.jsxs)("div", { children: [
          (0, import_jsx_runtime15.jsx)("img", { src: (_a = media.slides) == null ? void 0 : _a[currentSlide], alt: `Slide ${currentSlide + 1}` }),
          (0, import_jsx_runtime15.jsxs)("div", { className: "flex justify-between mt-2", children: [
            (0, import_jsx_runtime15.jsx)(
              Button,
              {
                onClick: () => setCurrentSlide((prev) => Math.max(0, prev - 1)),
                disabled: currentSlide === 0,
                children: "Previous"
              }
            ),
            (0, import_jsx_runtime15.jsx)(
              Button,
              {
                onClick: () => setCurrentSlide((prev) => {
                  var _a2;
                  return Math.min(((_a2 = media.slides) == null ? void 0 : _a2.length) || 0 - 1, prev + 1);
                }),
                disabled: currentSlide === (((_b = media.slides) == null ? void 0 : _b.length) || 0) - 1,
                children: "Next"
              }
            )
          ] })
        ] });
      default:
        return null;
    }
  };
  return (0, import_jsx_runtime15.jsxs)(Card, { children: [
    media.title && (0, import_jsx_runtime15.jsx)("h3", { className: "text-lg font-bold", children: media.title }),
    renderPlayer(),
    media.description && (0, import_jsx_runtime15.jsx)("p", { className: "mt-2", children: media.description })
  ] });
};

// packages/patterns/src/components/NotificationCard.tsx
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var NotificationCard = ({
  notification,
  context = "neutral",
  compact = false
}) => {
  return (0, import_jsx_runtime16.jsxs)(
    Card,
    {
      className: `notification-card--${context} notification-card--${notification.type} ${compact ? "notification-card--compact" : ""}`,
      children: [
        (0, import_jsx_runtime16.jsx)("div", { className: "font-bold", children: notification.title }),
        (0, import_jsx_runtime16.jsx)("div", { children: notification.message })
      ]
    }
  );
};

// packages/patterns/src/components/StatusCard.tsx
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var StatusCard = ({
  title,
  status,
  statusHistory = [],
  context = "neutral",
  showHistory = false,
  showActions = false,
  onStatusChange,
  onActionClick,
  permissions = [],
  size = "md"
}) => {
  const handleActionClick = (action) => {
    if (onActionClick) {
      onActionClick(action);
    }
  };
  return (0, import_jsx_runtime17.jsxs)(
    Card,
    {
      className: `status-card--${context} status-card--${size}`,
      children: [
        (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between", children: [
          (0, import_jsx_runtime17.jsx)("div", { className: "text-lg font-bold", children: title }),
          (0, import_jsx_runtime17.jsx)(
            "div",
            {
              className: "w-4 h-4 rounded-full",
              style: { backgroundColor: status.color }
            }
          )
        ] }),
        (0, import_jsx_runtime17.jsx)("div", { className: "mt-2", children: status.name }),
        showHistory && (0, import_jsx_runtime17.jsxs)("div", { className: "mt-4", children: [
          (0, import_jsx_runtime17.jsx)("h4", { className: "font-bold", children: "History" }),
          statusHistory.map((s) => (0, import_jsx_runtime17.jsx)("div", { children: s.name }, s.id))
        ] }),
        showActions && (0, import_jsx_runtime17.jsx)("div", { className: "mt-4", children: permissions.includes("change_status") && (0, import_jsx_runtime17.jsx)(Button, { onClick: () => onStatusChange == null ? void 0 : onStatusChange(status), children: "Change Status" }) })
      ]
    }
  );
};

// packages/patterns/src/components/UserCard.tsx
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var UserCard = ({
  user,
  context = "neutral",
  showPresence = false,
  showStatus = false,
  showActions = false,
  onUserClick,
  onActionClick,
  permissions = [],
  size = "md",
  layout = "vertical"
}) => {
  const handleActionClick = (action) => {
    if (onActionClick) {
      onActionClick(action, user);
    }
  };
  const canViewRole = permissions.includes("view_role");
  return (0, import_jsx_runtime18.jsxs)(
    Card,
    {
      className: `user-card--${context} user-card--${size} user-card--${layout}`,
      onClick: () => onUserClick == null ? void 0 : onUserClick(user),
      children: [
        (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center", children: [
          (0, import_jsx_runtime18.jsx)(Avatar, { src: user.avatarUrl, alt: user.name }),
          showPresence && user.status && (0, import_jsx_runtime18.jsx)(StatusDot, { status: user.status }),
          (0, import_jsx_runtime18.jsxs)("div", { className: "ml-4", children: [
            (0, import_jsx_runtime18.jsx)("div", { className: "text-lg font-bold", children: user.name }),
            showStatus && user.role && canViewRole && (0, import_jsx_runtime18.jsx)(Badge, { children: user.role })
          ] })
        ] }),
        showActions && (0, import_jsx_runtime18.jsxs)("div", { className: "mt-4", children: [
          permissions.includes("edit") && (0, import_jsx_runtime18.jsx)(Button, { onClick: () => handleActionClick("edit"), children: "Edit" }),
          permissions.includes("delete") && (0, import_jsx_runtime18.jsx)(Button, { onClick: () => handleActionClick("delete"), variant: "danger", children: "Delete" })
        ] })
      ]
    }
  );
};

// packages/patterns/src/components/actions/ActionMenu.tsx
var import_react7 = __toESM(require_react());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var ActionMenu = ({
  actions,
  context = "neutral",
  trigger,
  align = "center",
  onActionClick,
  onMenuOpen,
  onMenuClose,
  permissions = [],
  showSuggestions = false,
  actionHistory = []
}) => {
  const [history, setHistory] = import_react7.default.useState(actionHistory);
  const hasPermission = (action) => {
    if (!action.permission) return true;
    return permissions.includes(action.permission);
  };
  const isVisibleInContext = (action) => {
    if (!action.workspaceContext) return true;
    return action.workspaceContext.includes(context);
  };
  const visibleActions = actions.filter(
    (action) => hasPermission(action) && isVisibleInContext(action)
  );
  const suggestedActions = showSuggestions ? visibleActions.filter((a) => {
    var _a;
    return (_a = a.metadata) == null ? void 0 : _a.suggested;
  }) : [];
  const handleActionClick = (action) => {
    if (onActionClick) {
      onActionClick(action);
    }
    action.onClick();
    setHistory((prev) => [action, ...prev].slice(0, 5));
  };
  return (0, import_jsx_runtime19.jsxs)(DropdownMenu, { onOpenChange: (open) => open ? onMenuOpen == null ? void 0 : onMenuOpen() : onMenuClose == null ? void 0 : onMenuClose(), children: [
    (0, import_jsx_runtime19.jsx)(DropdownMenuTrigger, { asChild: true, children: trigger || (0, import_jsx_runtime19.jsx)(Button, { variant: "ghost", children: "Open Menu" }) }),
    (0, import_jsx_runtime19.jsxs)(DropdownMenuContent, { align, children: [
      suggestedActions.length > 0 && (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, { children: [
        suggestedActions.map((action) => (0, import_jsx_runtime19.jsxs)(
          DropdownMenuItem,
          {
            disabled: action.disabled,
            onSelect: () => handleActionClick(action),
            children: [
              (0, import_jsx_runtime19.jsx)(Icon, { name: "Star", className: "mr-2" }),
              action.label
            ]
          },
          `suggested-${action.id}`
        )),
        (0, import_jsx_runtime19.jsx)("hr", { className: "my-1" })
      ] }),
      visibleActions.map((action) => (0, import_jsx_runtime19.jsxs)(
        DropdownMenuItem,
        {
          disabled: action.disabled,
          onSelect: () => handleActionClick(action),
          children: [
            action.icon && (0, import_jsx_runtime19.jsx)(Icon, { name: action.icon, className: "mr-2" }),
            action.label
          ]
        },
        action.id
      ))
    ] })
  ] });
};

// packages/patterns/src/components/actions/ButtonGroup.tsx
var import_react8 = __toESM(require_react());
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var ButtonGroup = ({
  actions,
  context = "neutral",
  orientation = "horizontal",
  size = "md",
  variant = "primary",
  onActionClick,
  permissions = [],
  maxVisible,
  showOverflow = true,
  hasBulkActions = false,
  responsive = false
}) => {
  const [selectedItems, setSelectedItems] = import_react8.default.useState([]);
  const handleSelectItem = (id) => {
    setSelectedItems(
      (prev) => prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id]
    );
  };
  const hasPermission = (action) => {
    if (!action.permission) return true;
    return permissions.includes(action.permission);
  };
  const isVisibleInContext = (action) => {
    if (!action.workspaceContext) return true;
    return action.workspaceContext.includes(context);
  };
  const visibleActions = actions.filter(
    (action) => hasPermission(action) && isVisibleInContext(action)
  );
  const displayedActions = maxVisible && showOverflow ? visibleActions.slice(0, maxVisible) : visibleActions;
  const overflowActions = maxVisible && showOverflow ? visibleActions.slice(maxVisible) : [];
  const handleActionClick = (action) => {
    if (onActionClick) {
      onActionClick(action);
    }
    action.onClick();
  };
  return (0, import_jsx_runtime20.jsxs)(
    "div",
    {
      className: cn(
        "inline-flex",
        orientation === "vertical" ? "flex-col" : "flex-row",
        responsive && "flex-wrap",
        "items-center"
      ),
      children: [
        hasBulkActions && (0, import_jsx_runtime20.jsx)("div", { className: "p-2", children: (0, import_jsx_runtime20.jsx)(
          "input",
          {
            type: "checkbox",
            onChange: (e) => setSelectedItems(
              e.target.checked ? displayedActions.map((a) => a.id) : []
            )
          }
        ) }),
        displayedActions.map((action) => (0, import_jsx_runtime20.jsxs)(
          Button,
          {
            variant: action.variant || variant,
            size,
            disabled: action.disabled || hasBulkActions && selectedItems.length === 0,
            onClick: () => handleActionClick(action),
            className: "first:rounded-l-md last:rounded-r-md",
            children: [
              hasBulkActions && (0, import_jsx_runtime20.jsx)(
                "input",
                {
                  type: "checkbox",
                  className: "mr-2",
                  checked: selectedItems.includes(action.id),
                  onChange: () => handleSelectItem(action.id)
                }
              ),
              action.icon && (0, import_jsx_runtime20.jsx)(Icon, { name: action.icon, className: "mr-2" }),
              action.label
            ]
          },
          action.id
        )),
        overflowActions.length > 0 && // Overflow menu will be implemented later
        (0, import_jsx_runtime20.jsx)(Button, { variant, size, className: "rounded-r-md", children: "..." })
      ]
    }
  );
};

// packages/patterns/src/components/actions/Toolbar.tsx
var import_react9 = __toESM(require_react());
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var Toolbar = ({
  tools,
  context = "neutral",
  layout = "horizontal",
  onToolClick,
  permissions = [],
  customizable = false,
  onLayoutChange,
  persistent = false,
  responsive = false
}) => {
  const [currentLayout, setCurrentLayout] = import_react9.default.useState(() => {
    if (persistent) {
      return localStorage.getItem("toolbar-layout") || layout;
    }
    return layout;
  });
  const handleLayoutChange = (newLayout) => {
    setCurrentLayout(newLayout);
    if (onLayoutChange) {
      onLayoutChange(newLayout);
    }
    if (persistent) {
      localStorage.setItem("toolbar-layout", newLayout);
    }
  };
  const hasPermission = (tool) => {
    if (!tool.permission) return true;
    return permissions.includes(tool.permission);
  };
  const isVisibleInContext = (tool) => {
    if (!tool.workspaceContext) return true;
    return tool.workspaceContext.includes(context);
  };
  const visibleTools = tools.filter(
    (tool) => hasPermission(tool) && isVisibleInContext(tool)
  );
  const groupedTools = visibleTools.reduce((acc, tool) => {
    const group = tool.group || "default";
    if (!acc[group]) {
      acc[group] = [];
    }
    acc[group].push(tool);
    return acc;
  }, {});
  const handleToolClick = (tool) => {
    if (onToolClick) {
      onToolClick(tool);
    }
    tool.onClick();
  };
  return (0, import_jsx_runtime21.jsxs)(
    "div",
    {
      className: cn(
        "flex p-1 bg-gray-100 rounded-md",
        currentLayout === "vertical" ? "flex-col" : "flex-row",
        currentLayout === "grid" && "grid grid-cols-4",
        responsive && "flex-wrap",
        "gap-1"
      ),
      children: [
        customizable && (0, import_jsx_runtime21.jsxs)("div", { className: "flex items-center", children: [
          (0, import_jsx_runtime21.jsx)(Button, { variant: "ghost", size: "sm", onClick: () => handleLayoutChange("horizontal"), children: "H" }),
          (0, import_jsx_runtime21.jsx)(Button, { variant: "ghost", size: "sm", onClick: () => handleLayoutChange("vertical"), children: "V" }),
          (0, import_jsx_runtime21.jsx)(Button, { variant: "ghost", size: "sm", onClick: () => handleLayoutChange("grid"), children: "G" })
        ] }),
        Object.entries(groupedTools).map(([group, tools2]) => (0, import_jsx_runtime21.jsx)("div", { className: "flex items-center", children: tools2.map((tool) => (0, import_jsx_runtime21.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            disabled: tool.disabled,
            onClick: () => handleToolClick(tool),
            "aria-label": tool.label,
            children: tool.icon && (0, import_jsx_runtime21.jsx)(Icon, { name: tool.icon })
          },
          tool.id
        )) }, group))
      ]
    }
  );
};

// packages/patterns/src/components/workspace/BillingControls.tsx
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var BillingControls = ({
  onInvoiceGenerate,
  onPaymentProcess,
  onReportGenerate,
  showAnalytics = false
}) => {
  const handleGenerateInvoice = () => {
    const invoiceData = {
      id: "1",
      amount: 1e3,
      currency: "USD",
      dueDate: /* @__PURE__ */ new Date()
    };
    onInvoiceGenerate(invoiceData);
  };
  const handleProcessPayment = () => {
    const paymentData = {
      id: "1",
      amount: 1e3,
      currency: "USD",
      date: /* @__PURE__ */ new Date()
    };
    onPaymentProcess(paymentData);
  };
  return (0, import_jsx_runtime22.jsxs)("div", { className: "flex space-x-2", children: [
    (0, import_jsx_runtime22.jsx)(Button, { onClick: handleGenerateInvoice, children: "Generate Invoice" }),
    (0, import_jsx_runtime22.jsx)(Button, { onClick: handleProcessPayment, children: "Process Payment" }),
    (0, import_jsx_runtime22.jsx)(Button, { onClick: () => onReportGenerate("billing"), children: "Generate Billing Report" }),
    showAnalytics && (0, import_jsx_runtime22.jsxs)("div", { className: "mt-4", children: [
      (0, import_jsx_runtime22.jsx)("h3", { className: "text-lg font-bold", children: "Revenue Analytics" }),
      (0, import_jsx_runtime22.jsx)("p", { children: "Total Revenue: $10,000" }),
      (0, import_jsx_runtime22.jsx)("p", { children: "Monthly Recurring Revenue: $2,000" })
    ] })
  ] });
};

// packages/patterns/src/components/workspace/ClientSelector.tsx
var import_react10 = __toESM(require_react());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var ClientSelector = ({
  clients,
  selectedClient,
  onClientSelect,
  onClientCreate,
  showRecent = false,
  maxRecent = 5,
  filters = [],
  onFilterChange,
  showFilters = false,
  permissions = []
}) => {
  const [recentClients, setRecentClients] = import_react10.default.useState([]);
  const handleClientSelect = (client) => {
    onClientSelect(client);
    setRecentClients(
      (prev) => [client, ...prev.filter((c) => c.id !== client.id)].slice(0, maxRecent)
    );
  };
  const hasPermission = (permission) => {
    return permissions.includes(permission);
  };
  const filteredClients = clients.filter((client) => {
    if (filters.length === 0) return true;
    return filters.some((filter) => filter.isActive);
  });
  return (0, import_jsx_runtime23.jsxs)(DropdownMenu, { children: [
    (0, import_jsx_runtime23.jsx)(DropdownMenuTrigger, { asChild: true, children: (0, import_jsx_runtime23.jsxs)(Button, { variant: "ghost", children: [
      (0, import_jsx_runtime23.jsx)(Icon, { name: "User", className: "mr-2" }),
      selectedClient ? selectedClient.name : "Select Client",
      (0, import_jsx_runtime23.jsx)(Icon, { name: "ChevronDown", className: "ml-2" })
    ] }) }),
    (0, import_jsx_runtime23.jsxs)(DropdownMenuContent, { children: [
      showRecent && recentClients.length > 0 && (0, import_jsx_runtime23.jsxs)(import_jsx_runtime23.Fragment, { children: [
        (0, import_jsx_runtime23.jsx)("div", { className: "p-2 text-xs text-gray-500", children: "Recent" }),
        recentClients.map((client) => (0, import_jsx_runtime23.jsx)(
          DropdownMenuItem,
          {
            onSelect: () => handleClientSelect(client),
            children: client.name
          },
          `recent-${client.id}`
        )),
        (0, import_jsx_runtime23.jsx)("hr", { className: "my-1" })
      ] }),
      showFilters && (0, import_jsx_runtime23.jsx)("div", { className: "p-2", children: filters.map((filter) => (0, import_jsx_runtime23.jsxs)("div", { className: "flex items-center", children: [
        (0, import_jsx_runtime23.jsx)(
          "input",
          {
            type: "checkbox",
            checked: filter.isActive,
            onChange: () => {
              const newFilters = filters.map(
                (f) => f.id === filter.id ? { ...f, isActive: !f.isActive } : f
              );
              onFilterChange == null ? void 0 : onFilterChange(newFilters);
            }
          }
        ),
        (0, import_jsx_runtime23.jsx)("span", { className: "ml-2", children: filter.label })
      ] }, filter.id)) }),
      filteredClients.map((client) => (0, import_jsx_runtime23.jsx)(
        DropdownMenuItem,
        {
          onSelect: () => handleClientSelect(client),
          children: client.name
        },
        client.id
      )),
      onClientCreate && hasPermission("create-client") && (0, import_jsx_runtime23.jsxs)(import_jsx_runtime23.Fragment, { children: [
        (0, import_jsx_runtime23.jsx)("hr", { className: "my-1" }),
        (0, import_jsx_runtime23.jsxs)(DropdownMenuItem, { onSelect: onClientCreate, children: [
          (0, import_jsx_runtime23.jsx)(Icon, { name: "Plus", className: "mr-2" }),
          "Create Client"
        ] })
      ] })
    ] })
  ] });
};

// packages/patterns/src/components/workspace/TimeTracker.tsx
var import_react11 = __toESM(require_react());
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var TimeTracker = ({
  onSessionStart,
  onSessionStop,
  onSessionPause,
  onTimeEntry,
  projects,
  showHistory = false
}) => {
  const [isRunning, setIsRunning] = (0, import_react11.useState)(false);
  const [time, setTime] = (0, import_react11.useState)(0);
  const [startTime, setStartTime] = (0, import_react11.useState)(null);
  const [timeEntries, setTimeEntries] = (0, import_react11.useState)([]);
  (0, import_react11.useEffect)(() => {
    let interval = null;
    if (isRunning) {
      interval = setInterval(() => {
        setTime((prevTime) => prevTime + 1);
      }, 1e3);
    } else if (!isRunning && time !== 0) {
      if (interval) {
        clearInterval(interval);
      }
    }
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [isRunning, time]);
  const handleStart = () => {
    setIsRunning(true);
    setStartTime(/* @__PURE__ */ new Date());
    onSessionStart(projects[0]);
  };
  const validateTimeEntry = (entry) => {
    if (entry.endTime.getTime() - entry.startTime.getTime() < 1e3) {
      return false;
    }
    return true;
  };
  const handleStop = () => {
    setIsRunning(false);
    if (startTime) {
      const entry = {
        id: (/* @__PURE__ */ new Date()).toISOString(),
        startTime,
        endTime: /* @__PURE__ */ new Date(),
        project: projects[0]
      };
      if (validateTimeEntry(entry)) {
        onTimeEntry(entry);
        setTimeEntries((prev) => [entry, ...prev]);
      } else {
        alert("Invalid time entry");
      }
    }
    onSessionStop();
  };
  const handlePause = () => {
    setIsRunning(false);
    onSessionPause();
  };
  const formatTime = (timeInSeconds) => {
    const hours = Math.floor(timeInSeconds / 3600);
    const minutes = Math.floor(timeInSeconds % 3600 / 60);
    const seconds = timeInSeconds % 60;
    return `${String(hours).padStart(2, "0")}:${String(minutes).padStart(
      2,
      "0"
    )}:${String(seconds).padStart(2, "0")}`;
  };
  return (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center space-x-2", children: [
    (0, import_jsx_runtime24.jsx)("div", { children: formatTime(time) }),
    !isRunning ? (0, import_jsx_runtime24.jsx)(Button, { onClick: handleStart, children: (0, import_jsx_runtime24.jsx)(Icon, { name: "Play" }) }) : (0, import_jsx_runtime24.jsxs)(import_jsx_runtime24.Fragment, { children: [
      (0, import_jsx_runtime24.jsx)(Button, { onClick: handlePause, children: (0, import_jsx_runtime24.jsx)(Icon, { name: "Pause" }) }),
      (0, import_jsx_runtime24.jsx)(Button, { onClick: handleStop, children: (0, import_jsx_runtime24.jsx)(Icon, { name: "Square" }) })
    ] }),
    showHistory && (0, import_jsx_runtime24.jsxs)("div", { className: "mt-4", children: [
      (0, import_jsx_runtime24.jsx)("h3", { className: "text-lg font-bold", children: "Time Entries" }),
      (0, import_jsx_runtime24.jsx)("ul", { children: timeEntries.map((entry) => (0, import_jsx_runtime24.jsxs)("li", { children: [
        entry.project.name,
        ": ",
        formatTime(Math.floor((entry.endTime.getTime() - entry.startTime.getTime()) / 1e3))
      ] }, entry.id)) }),
      (0, import_jsx_runtime24.jsx)(Button, { onClick: () => alert("Exporting time entries..."), children: "Export" })
    ] })
  ] });
};

// packages/patterns/src/components/workspace/WorkspaceSwitcher.tsx
var import_react12 = __toESM(require_react());
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var WorkspaceSwitcher = ({
  workspaces,
  currentWorkspace,
  onWorkspaceChange,
  onWorkspaceCreate,
  showSearch = false,
  showRecent = false,
  maxRecent = 5
}) => {
  const [searchTerm, setSearchTerm] = import_react12.default.useState("");
  const [recentWorkspaces, setRecentWorkspaces] = import_react12.default.useState([]);
  const handleWorkspaceChange = (workspace) => {
    onWorkspaceChange(workspace);
    setRecentWorkspaces(
      (prev) => [workspace, ...prev.filter((w) => w.id !== workspace.id)].slice(0, maxRecent)
    );
  };
  const filteredWorkspaces = workspaces.filter(
    (workspace) => workspace.name.toLowerCase().includes(searchTerm.toLowerCase())
  );
  return (0, import_jsx_runtime25.jsxs)(DropdownMenu, { children: [
    (0, import_jsx_runtime25.jsx)(DropdownMenuTrigger, { asChild: true, children: (0, import_jsx_runtime25.jsxs)(Button, { variant: "ghost", children: [
      (0, import_jsx_runtime25.jsx)(Icon, { name: "Users", className: "mr-2" }),
      currentWorkspace.name,
      (0, import_jsx_runtime25.jsx)(Icon, { name: "ChevronDown", className: "ml-2" })
    ] }) }),
    (0, import_jsx_runtime25.jsxs)(DropdownMenuContent, { children: [
      showSearch && (0, import_jsx_runtime25.jsx)("div", { className: "p-2", children: (0, import_jsx_runtime25.jsx)(
        "input",
        {
          type: "text",
          placeholder: "Search...",
          className: "w-full p-1 border rounded",
          value: searchTerm,
          onChange: (e) => setSearchTerm(e.target.value)
        }
      ) }),
      showRecent && recentWorkspaces.length > 0 && (0, import_jsx_runtime25.jsxs)(import_jsx_runtime25.Fragment, { children: [
        (0, import_jsx_runtime25.jsx)("div", { className: "p-2 text-xs text-gray-500", children: "Recent" }),
        recentWorkspaces.map((workspace) => (0, import_jsx_runtime25.jsx)(
          DropdownMenuItem,
          {
            onSelect: () => handleWorkspaceChange(workspace),
            children: workspace.name
          },
          `recent-${workspace.id}`
        )),
        (0, import_jsx_runtime25.jsx)("hr", { className: "my-1" })
      ] }),
      filteredWorkspaces.map((workspace) => (0, import_jsx_runtime25.jsx)(
        DropdownMenuItem,
        {
          onSelect: () => handleWorkspaceChange(workspace),
          children: workspace.name
        },
        workspace.id
      )),
      onWorkspaceCreate && (0, import_jsx_runtime25.jsxs)(import_jsx_runtime25.Fragment, { children: [
        (0, import_jsx_runtime25.jsx)("hr", { className: "my-1" }),
        (0, import_jsx_runtime25.jsxs)(DropdownMenuItem, { onSelect: onWorkspaceCreate, children: [
          (0, import_jsx_runtime25.jsx)(Icon, { name: "Plus", className: "mr-2" }),
          "Create Workspace"
        ] })
      ] })
    ] })
  ] });
};

// packages/patterns/src/components/errors/utils.ts
var categorizeError = (error) => {
  if (error.message.includes("Network")) {
    return {
      type: "network",
      severity: "high",
      recoverable: true,
      userMessage: "A network error occurred. Please check your connection and try again.",
      technicalMessage: error.message,
      suggestedActions: [{ label: "Retry", action: () => window.location.reload(), type: "primary" }]
    };
  }
  if (error.message.includes("Permission")) {
    return {
      type: "permission",
      severity: "medium",
      recoverable: false,
      userMessage: "You don't have permission to perform this action.",
      technicalMessage: error.message,
      suggestedActions: []
    };
  }
  return {
    type: "unknown",
    severity: "critical",
    recoverable: false,
    userMessage: "An unexpected error occurred.",
    technicalMessage: error.message,
    suggestedActions: []
  };
};

// packages/patterns/src/components/errors/ErrorAlert.tsx
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var ErrorAlert = ({
  error,
  severity,
  context,
  dismissible,
  onDismiss,
  showDetails,
  showErrorCode,
  actions,
  ...props
}) => {
  const normalizedError = error instanceof Error ? error : new Error("An error occurred");
  const category = categorizeError(normalizedError);
  const alertVariant = {
    low: "info",
    medium: "warning",
    high: "error",
    critical: "error"
  }[severity || category.severity];
  return (0, import_jsx_runtime26.jsxs)(
    Alert,
    {
      variant: alertVariant,
      title: category.userMessage,
      context,
      dismissible,
      onClose: onDismiss,
      ...props,
      children: [
        showDetails && (0, import_jsx_runtime26.jsxs)("details", { children: [
          (0, import_jsx_runtime26.jsx)("summary", { children: "Error Details" }),
          (0, import_jsx_runtime26.jsx)("pre", { children: category.technicalMessage })
        ] }),
        showErrorCode && (0, import_jsx_runtime26.jsxs)("code", { children: [
          "Error Code: ",
          normalizedError.name
        ] }),
        (0, import_jsx_runtime26.jsx)("div", { children: actions == null ? void 0 : actions.map((action, index) => (0, import_jsx_runtime26.jsx)(Button, { onClick: action.action, variant: action.type, children: action.label }, index)) })
      ]
    }
  );
};

// packages/patterns/src/components/errors/ErrorBoundary.tsx
var import_react13 = __toESM(require_react());

// packages/patterns/src/components/errors/error-reporting.ts
var ErrorReportingService = class {
  report(error, errorInfo) {
    console.group("Error Reporter");
    console.error("Caught an error:", error);
    console.log("Additional info:", errorInfo);
    console.groupEnd();
  }
};
var errorReporter = new ErrorReportingService();

// packages/patterns/src/components/errors/ErrorBoundary.tsx
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var ErrorBoundary = class extends import_react13.Component {
  constructor(props) {
    super(props);
    __publicField(this, "resetError", () => {
      this.setState({ hasError: false, error: null });
    });
    this.state = { hasError: false, error: null };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  componentDidCatch(error, errorInfo) {
    errorReporter.report(error, errorInfo);
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
  }
  render() {
    const { hasError, error } = this.state;
    const { fallback: FallbackComponent, children, context, level } = this.props;
    if (hasError && error) {
      if (FallbackComponent) {
        return (0, import_jsx_runtime27.jsx)(
          FallbackComponent,
          {
            error,
            resetError: this.resetError,
            context,
            level
          }
        );
      }
      return (0, import_jsx_runtime27.jsx)("h1", { children: "Something went wrong." });
    }
    return children;
  }
};

// packages/patterns/src/components/errors/ErrorFeedback.tsx
var import_react14 = __toESM(require_react());
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var ErrorFeedback = ({
  error,
  onSubmit,
  fields = ["description", "contactInfo"],
  showErrorDetails = true,
  anonymous = false
}) => {
  const [feedback, setFeedback] = (0, import_react14.useState)({ description: "" });
  const [isSubmitting, setIsSubmitting] = (0, import_react14.useState)(false);
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    await onSubmit(feedback);
    setIsSubmitting(false);
  };
  const handleChange = (e) => {
    setFeedback({ ...feedback, [e.target.name]: e.target.value });
  };
  return (0, import_jsx_runtime28.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-4", children: [
    showErrorDetails && (0, import_jsx_runtime28.jsxs)("div", { children: [
      (0, import_jsx_runtime28.jsx)("h3", { className: "font-bold", children: "Error Details" }),
      (0, import_jsx_runtime28.jsx)("pre", { className: "text-sm bg-gray-100 p-2 rounded", children: error instanceof Error ? error.message : "An error occurred" })
    ] }),
    fields.includes("description") && (0, import_jsx_runtime28.jsxs)("div", { children: [
      (0, import_jsx_runtime28.jsx)(Label, { htmlFor: "description", children: "Description" }),
      (0, import_jsx_runtime28.jsx)(Textarea, { id: "description", name: "description", value: feedback.description, onChange: handleChange, required: true })
    ] }),
    fields.includes("steps") && (0, import_jsx_runtime28.jsxs)("div", { children: [
      (0, import_jsx_runtime28.jsx)(Label, { htmlFor: "steps", children: "Steps to Reproduce" }),
      (0, import_jsx_runtime28.jsx)(Textarea, { id: "steps", name: "steps", value: feedback.steps || "", onChange: handleChange })
    ] }),
    fields.includes("impact") && (0, import_jsx_runtime28.jsxs)("div", { children: [
      (0, import_jsx_runtime28.jsx)(Label, { htmlFor: "impact", children: "Impact" }),
      (0, import_jsx_runtime28.jsxs)("select", { id: "impact", name: "impact", value: feedback.impact || "low", onChange: handleChange, children: [
        (0, import_jsx_runtime28.jsx)("option", { value: "low", children: "Low" }),
        (0, import_jsx_runtime28.jsx)("option", { value: "medium", children: "Medium" }),
        (0, import_jsx_runtime28.jsx)("option", { value: "high", children: "High" })
      ] })
    ] }),
    fields.includes("frequency") && (0, import_jsx_runtime28.jsxs)("div", { children: [
      (0, import_jsx_runtime28.jsx)(Label, { htmlFor: "frequency", children: "Frequency" }),
      (0, import_jsx_runtime28.jsxs)("select", { id: "frequency", name: "frequency", value: feedback.frequency || "once", onChange: handleChange, children: [
        (0, import_jsx_runtime28.jsx)("option", { value: "once", children: "Once" }),
        (0, import_jsx_runtime28.jsx)("option", { value: "intermittent", children: "Intermittent" }),
        (0, import_jsx_runtime28.jsx)("option", { value: "frequent", children: "Frequent" })
      ] })
    ] }),
    !anonymous && fields.includes("contactInfo") && (0, import_jsx_runtime28.jsxs)("div", { children: [
      (0, import_jsx_runtime28.jsx)(Label, { htmlFor: "contactInfo", children: "Contact Info" }),
      (0, import_jsx_runtime28.jsx)(Input, { id: "contactInfo", name: "contactInfo", value: feedback.contactInfo || "", onChange: handleChange })
    ] }),
    (0, import_jsx_runtime28.jsx)(Button, { type: "submit", disabled: isSubmitting, children: isSubmitting ? "Submitting..." : "Submit Feedback" })
  ] });
};

// packages/patterns/src/components/errors/ErrorModal.tsx
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var ErrorModal = ({
  error,
  context,
  showDetails,
  actions,
  severity,
  ...props
}) => {
  const normalizedError = error instanceof Error ? error : new Error("An error occurred");
  const category = categorizeError(normalizedError);
  return (0, import_jsx_runtime29.jsx)(Modal, { ...props, children: (0, import_jsx_runtime29.jsxs)("div", { className: "p-4", children: [
    (0, import_jsx_runtime29.jsx)("h2", { className: "text-lg font-bold", children: category.userMessage }),
    showDetails && (0, import_jsx_runtime29.jsxs)("details", { className: "mt-2", children: [
      (0, import_jsx_runtime29.jsx)("summary", { children: "Error Details" }),
      (0, import_jsx_runtime29.jsx)("pre", { className: "mt-2 text-sm bg-gray-100 p-2 rounded", children: category.technicalMessage })
    ] }),
    (0, import_jsx_runtime29.jsx)("div", { className: "mt-4 space-x-2", children: actions == null ? void 0 : actions.map((action, index) => (0, import_jsx_runtime29.jsx)(Button, { onClick: action.action, variant: action.type, children: action.label }, index)) })
  ] }) });
};

// packages/patterns/src/components/errors/ErrorPage.tsx
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var ErrorPage = ({
  error,
  title,
  description,
  context = "neutral",
  illustration,
  actions,
  showHomeButton = true,
  showSupportContact = true
}) => {
  const normalizedError = error instanceof Error ? error : new Error("An error occurred");
  const category = categorizeError(normalizedError);
  return (0, import_jsx_runtime30.jsxs)("div", { className: "flex flex-col items-center justify-center min-h-screen bg-gray-100 text-center p-4", children: [
    illustration,
    (0, import_jsx_runtime30.jsx)("h1", { className: "text-4xl font-bold mt-4", children: title || category.userMessage }),
    (0, import_jsx_runtime30.jsx)("p", { className: "text-lg mt-2", children: description || category.technicalMessage }),
    (0, import_jsx_runtime30.jsxs)("div", { className: "mt-6 space-x-4", children: [
      actions == null ? void 0 : actions.map((action, index) => (0, import_jsx_runtime30.jsx)(Button, { onClick: action.action, variant: action.type, children: action.label }, index)),
      showHomeButton && (0, import_jsx_runtime30.jsx)(Button, { onClick: () => window.location.href = "/", children: "Go Home" })
    ] }),
    showSupportContact && (0, import_jsx_runtime30.jsx)("p", { className: "mt-4 text-sm text-gray-600", children: "If the problem persists, please contact support." })
  ] });
};

// packages/patterns/src/components/errors/ErrorToast.tsx
var useErrorToast = () => {
  const { show } = useToast();
  const showErrorToast = (props) => {
    const normalizedError = props.error instanceof Error ? props.error : new Error("An error occurred");
    const category = categorizeError(normalizedError);
    const toastProps = {
      variant: "error",
      title: category.userMessage,
      description: category.technicalMessage,
      duration: props.duration,
      context: props.context,
      actions: props.action ? [{ label: props.action.label, onClick: props.action.action }] : []
    };
    show(toastProps);
  };
  return { showErrorToast };
};

// packages/patterns/src/components/errors/FallbackContent.tsx
var import_react15 = __toESM(require_react());
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var FallbackContent = ({
  primaryContent,
  fallbackContent,
  error,
  showError = false,
  onContentSwitch
}) => {
  const [showFallback, setShowFallback] = (0, import_react15.useState)(!!error);
  const handleSwitch = () => {
    const newShowFallback = !showFallback;
    setShowFallback(newShowFallback);
    if (onContentSwitch) {
      onContentSwitch(newShowFallback);
    }
  };
  return (0, import_jsx_runtime31.jsxs)("div", { children: [
    showFallback ? fallbackContent : primaryContent,
    showError && error && (0, import_jsx_runtime31.jsx)("button", { onClick: handleSwitch, className: "text-sm text-blue-500 mt-2", children: showFallback ? "Show Primary Content" : "Show Fallback Content" })
  ] });
};

// packages/patterns/src/components/errors/FallbackUI.tsx
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var FallbackUI = ({ error, resetError, context, level }) => {
  const category = categorizeError(error);
  return (0, import_jsx_runtime32.jsxs)("div", { role: "alert", children: [
    (0, import_jsx_runtime32.jsx)("h2", { children: category.userMessage }),
    (0, import_jsx_runtime32.jsxs)("p", { children: [
      "Context: ",
      context
    ] }),
    (0, import_jsx_runtime32.jsxs)("p", { children: [
      "Level: ",
      level
    ] }),
    (0, import_jsx_runtime32.jsxs)("details", { children: [
      (0, import_jsx_runtime32.jsx)("summary", { children: "Error Details" }),
      (0, import_jsx_runtime32.jsx)("pre", { children: category.technicalMessage })
    ] }),
    category.suggestedActions.map((action, index) => (0, import_jsx_runtime32.jsx)(Button, { onClick: action.action, variant: action.type, children: action.label }, index)),
    (0, import_jsx_runtime32.jsx)(Button, { onClick: resetError, children: "Try again" })
  ] });
};

// packages/patterns/src/components/errors/InlineError.tsx
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var InlineError = ({
  message,
  fieldName,
  context = "neutral",
  icon = true,
  animate = true,
  className
}) => {
  const contextClasses = {
    consultant: "text-blue-600",
    client: "text-green-600",
    admin: "text-gray-600",
    neutral: "text-red-600"
  };
  const errorClasses = cn(
    "text-sm",
    contextClasses[context],
    { "transition-opacity duration-300 ease-in-out": animate },
    className
  );
  return (0, import_jsx_runtime33.jsxs)("div", { className: errorClasses, role: "alert", "aria-label": `Error for ${fieldName}`, children: [
    icon && (0, import_jsx_runtime33.jsx)("span", { className: "mr-1", children: "!" }),
    message
  ] });
};

// packages/patterns/src/components/errors/RecoveryProgress.tsx
var import_react16 = __toESM(require_react());
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var RecoveryProgress = ({
  steps,
  onRecoveryComplete,
  onRecoveryFail,
  onStepComplete
}) => {
  const [currentStep, setCurrentStep] = (0, import_react16.useState)(0);
  const [error, setError] = (0, import_react16.useState)(null);
  (0, import_react16.useEffect)(() => {
    const runSteps = async () => {
      for (let i = 0; i < steps.length; i++) {
        setCurrentStep(i);
        try {
          await steps[i].action();
          if (onStepComplete) {
            onStepComplete(steps[i]);
          }
        } catch (e) {
          setError(e);
          if (onRecoveryFail) {
            onRecoveryFail(e);
          }
          return;
        }
      }
      if (onRecoveryComplete) {
        onRecoveryComplete();
      }
    };
    runSteps();
  }, [steps, onRecoveryComplete, onRecoveryFail, onStepComplete]);
  const progress = currentStep / steps.length * 100;
  if (error) {
    return (0, import_jsx_runtime34.jsxs)("div", { children: [
      "Recovery failed: ",
      error.message
    ] });
  }
  return (0, import_jsx_runtime34.jsxs)("div", { children: [
    (0, import_jsx_runtime34.jsx)(ProgressIndicator, { value: progress }),
    (0, import_jsx_runtime34.jsxs)("p", { children: [
      "Step ",
      currentStep + 1,
      " of ",
      steps.length,
      ": ",
      steps[currentStep].label
    ] })
  ] });
};

// packages/patterns/src/components/errors/RefreshPage.tsx
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var RefreshPage = ({
  preserveState = false,
  confirmBeforeRefresh = false,
  customMessage = "Are you sure you want to refresh the page?",
  onBeforeRefresh
}) => {
  const handleRefresh = () => {
    if (confirmBeforeRefresh) {
      if (window.confirm(customMessage)) {
        if (onBeforeRefresh) {
          onBeforeRefresh();
        }
        if (!preserveState) {
          window.location.reload();
        }
      }
    } else {
      if (onBeforeRefresh) {
        onBeforeRefresh();
      }
      if (!preserveState) {
        window.location.reload();
      }
    }
  };
  return (0, import_jsx_runtime35.jsx)(Button, { onClick: handleRefresh, children: "Refresh Page" });
};

// packages/patterns/src/components/errors/RetryButton.tsx
var import_react17 = __toESM(require_react());
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var RetryButton = ({
  onRetry,
  maxRetries = 3,
  backoffMs = 1e3,
  exponential = true,
  label = "Retry",
  loadingLabel = "Retrying...",
  failureLabel = "Failed"
}) => {
  const [isRetrying, setIsRetrying] = (0, import_react17.useState)(false);
  const [retryCount, setRetryCount] = (0, import_react17.useState)(0);
  const handleRetry = async () => {
    setIsRetrying(true);
    setRetryCount(retryCount + 1);
    try {
      await onRetry();
      setIsRetrying(false);
      setRetryCount(0);
    } catch (error) {
      if (retryCount < maxRetries) {
        const delay = exponential ? backoffMs * 2 ** retryCount : backoffMs;
        setTimeout(handleRetry, delay);
      } else {
        setIsRetrying(false);
      }
    }
  };
  return (0, import_jsx_runtime36.jsx)(Button, { onClick: handleRetry, disabled: isRetrying, children: isRetrying ? loadingLabel : retryCount > 0 ? `${label} (${retryCount})` : label });
};
export {
  ActionMenu,
  ActivityCard,
  BillingCard,
  BillingControls,
  ButtonGroup,
  Chart,
  ClientCard,
  ClientSelector,
  ErrorAlert,
  ErrorBoundary,
  ErrorFeedback,
  ErrorModal,
  ErrorPage,
  FallbackContent,
  FallbackUI,
  InlineError,
  MediaPlayer,
  ModalPortal,
  NotificationCard,
  ProgressCard,
  ProjectCard,
  RecoveryProgress,
  RefreshPage,
  RetryButton,
  StatCard,
  StatusCard,
  TimeCard,
  TimeTracker,
  Toolbar,
  Tooltip2 as Tooltip,
  UserCard,
  WorkspaceCard,
  WorkspaceSwitcher,
  categorizeError,
  errorReporter,
  toast,
  useErrorToast
};
//# sourceMappingURL=@wheel_patterns.js.map
