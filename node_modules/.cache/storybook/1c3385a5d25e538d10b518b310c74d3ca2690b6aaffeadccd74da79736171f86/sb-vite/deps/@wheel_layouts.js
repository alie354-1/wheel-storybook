import {
  Avatar,
  Badge,
  Button,
  Checkbox,
  EmptyState,
  Icon,
  Input,
  Logo,
  Spinner
} from "./chunk-4QSTRJYN.js";
import "./chunk-TXWG4WBF.js";
import "./chunk-BC4K4ZOO.js";
import "./chunk-R22ZQZEH.js";
import "./chunk-S2T7PHXB.js";
import "./chunk-5MM2ORHA.js";
import {
  Bell,
  ChevronDown,
  ChevronLeft,
  ChevronRight,
  HelpCircle,
  Home,
  LogOut,
  Menu,
  Search,
  Settings,
  User,
  X
} from "./chunk-TDQL2RD6.js";
import "./chunk-E5JPOPMV.js";
import "./chunk-CTAEXN73.js";
import "./chunk-4LNVX564.js";
import "./chunk-OTP3FXEA.js";
import "./chunk-QG4K2J32.js";
import "./chunk-SJJXBOT7.js";
import "./chunk-T6K2JVC3.js";
import "./chunk-3XBVTSKT.js";
import "./chunk-VEBNUUMV.js";
import "./chunk-IU3QFP7E.js";
import "./chunk-R3KZOC3R.js";
import "./chunk-NEEEL3XU.js";
import "./chunk-6JCWOCCU.js";
import "./chunk-HEFVNISR.js";
import {
  cn
} from "./chunk-GDBXIXOE.js";
import "./chunk-OIGUBL5Q.js";
import "./chunk-SQC57HEE.js";
import {
  twMerge
} from "./chunk-GW7YTEOE.js";
import {
  clsx
} from "./chunk-ZYTAZ2LT.js";
import "./chunk-CKXQGZWK.js";
import "./chunk-552A6ZKJ.js";
import "./chunk-HNKYCAI5.js";
import "./chunk-RMOJXNDH.js";
import "./chunk-ZBYQSCBL.js";
import "./chunk-FOZ4PPQW.js";
import "./chunk-SC4INN4A.js";
import "./chunk-PPJHRTTM.js";
import "./chunk-HC5QDNQJ.js";
import "./chunk-K4F3KB2Y.js";
import "./chunk-46H5WXDV.js";
import "./chunk-MPE5GGRJ.js";
import "./chunk-TS3JNNVA.js";
import "./chunk-MZE2JMUW.js";
import "./chunk-DIZX2WDK.js";
import "./chunk-AZOQSLXG.js";
import "./chunk-35EINVXG.js";
import "./chunk-26JI4GM3.js";
import "./chunk-AD5XTJKA.js";
import "./chunk-CN4Y6LVA.js";
import "./chunk-UDCKICQF.js";
import "./chunk-ZHZVNHID.js";
import "./chunk-MWSGYS3J.js";
import {
  require_jsx_runtime
} from "./chunk-ZJWUZLUK.js";
import "./chunk-XODSPUEP.js";
import {
  require_react
} from "./chunk-USEVLOEB.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// packages/layouts/src/components/TopNavigation.tsx
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var TopNavigation = ({
  context = "neutral",
  workspaces = [],
  currentWorkspace,
  onWorkspaceChange,
  user,
  notifications = [],
  onNotificationClick,
  primaryActions = [],
  secondaryActions = [],
  responsive = true,
  onMobileMenuClick,
  onSearch,
  showSearch = true,
  onSignOut,
  className
}) => {
  const [isProfileMenuOpen, setIsProfileMenuOpen] = (0, import_react.useState)(false);
  const [isNotificationOpen, setIsNotificationOpen] = (0, import_react.useState)(false);
  const [searchQuery, setSearchQuery] = (0, import_react.useState)("");
  const contextStyles3 = {
    consultant: "bg-blue-50 border-blue-200",
    client: "bg-green-50 border-green-200",
    admin: "bg-gray-50 border-gray-200",
    expert: "bg-purple-50 border-purple-200",
    "tool-creator": "bg-orange-50 border-orange-200",
    founder: "bg-amber-50 border-amber-200",
    neutral: "bg-white border-gray-200"
  };
  const unreadNotifications = notifications.filter((n) => !n.read).length;
  const handleSearch = (e) => {
    e.preventDefault();
    if (onSearch && searchQuery.trim()) {
      onSearch(searchQuery.trim());
    }
  };
  const handleNotificationClick = (notification) => {
    if (onNotificationClick) {
      onNotificationClick(notification);
    }
    setIsNotificationOpen(false);
  };
  return (0, import_jsx_runtime.jsxs)(
    "header",
    {
      className: cn(
        "border-b shadow-sm transition-colors duration-200",
        contextStyles3[context],
        className
      ),
      role: "banner",
      children: [
        (0, import_jsx_runtime.jsxs)("div", { className: "px-4 py-3", children: [
          (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between", children: [
            (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-4", children: [
              responsive && onMobileMenuClick && (0, import_jsx_runtime.jsx)(
                Button,
                {
                  variant: "ghost",
                  size: "sm",
                  onClick: onMobileMenuClick,
                  className: "lg:hidden",
                  "aria-label": "Open mobile menu",
                  children: (0, import_jsx_runtime.jsx)(Menu, { className: "w-5 h-5" })
                }
              ),
              (0, import_jsx_runtime.jsx)(
                Logo,
                {
                  variant: "full",
                  size: "sm",
                  className: "transition-transform hover:scale-105"
                }
              ),
              workspaces.length > 0 && currentWorkspace && onWorkspaceChange && (0, import_jsx_runtime.jsx)("div", { className: "hidden md:block", children: (0, import_jsx_runtime.jsx)("div", { className: "px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg", children: currentWorkspace.name }) })
            ] }),
            showSearch && onSearch && (0, import_jsx_runtime.jsx)("div", { className: "hidden lg:flex flex-1 max-w-md mx-8", children: (0, import_jsx_runtime.jsxs)("form", { onSubmit: handleSearch, className: "relative w-full", children: [
              (0, import_jsx_runtime.jsx)(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }),
              (0, import_jsx_runtime.jsx)(
                "input",
                {
                  type: "text",
                  placeholder: "Search...",
                  value: searchQuery,
                  onChange: (e) => setSearchQuery(e.target.value),
                  className: "w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm",
                  "aria-label": "Search"
                }
              )
            ] }) }),
            (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center gap-2", children: [
              primaryActions.map((action) => (0, import_jsx_runtime.jsxs)(
                Button,
                {
                  variant: "ghost",
                  size: "sm",
                  onClick: action.onClick,
                  disabled: action.disabled,
                  className: "hidden md:flex",
                  "aria-label": action.label,
                  children: [
                    action.icon && (0, import_jsx_runtime.jsx)(action.icon, { className: "w-4 h-4" }),
                    (0, import_jsx_runtime.jsx)("span", { className: "ml-2", children: action.label }),
                    action.badge && action.badge > 0 && (0, import_jsx_runtime.jsx)(Badge, { variant: "secondary", className: "ml-2", children: action.badge })
                  ]
                },
                action.id
              )),
              (0, import_jsx_runtime.jsxs)("div", { className: "relative", children: [
                (0, import_jsx_runtime.jsxs)(
                  Button,
                  {
                    variant: "ghost",
                    size: "sm",
                    onClick: () => setIsNotificationOpen(!isNotificationOpen),
                    className: "relative",
                    "aria-label": `Notifications ${unreadNotifications > 0 ? `(${unreadNotifications} unread)` : ""}`,
                    children: [
                      (0, import_jsx_runtime.jsx)(Bell, { className: "w-5 h-5" }),
                      unreadNotifications > 0 && (0, import_jsx_runtime.jsx)(
                        Badge,
                        {
                          variant: "error",
                          className: "absolute -top-1 -right-1 w-5 h-5 text-xs flex items-center justify-center p-0",
                          children: unreadNotifications > 9 ? "9+" : unreadNotifications
                        }
                      )
                    ]
                  }
                ),
                isNotificationOpen && (0, import_jsx_runtime.jsxs)("div", { className: "absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50 max-h-96 overflow-y-auto", children: [
                  (0, import_jsx_runtime.jsx)("div", { className: "p-4 border-b border-gray-200", children: (0, import_jsx_runtime.jsx)("h3", { className: "font-semibold text-gray-900", children: "Notifications" }) }),
                  notifications.length === 0 ? (0, import_jsx_runtime.jsx)("div", { className: "p-4 text-center text-gray-500", children: "No notifications" }) : (0, import_jsx_runtime.jsx)("div", { className: "py-2", children: notifications.slice(0, 10).map((notification) => (0, import_jsx_runtime.jsx)(
                    "button",
                    {
                      onClick: () => handleNotificationClick(notification),
                      className: cn(
                        "w-full px-4 py-3 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0",
                        !notification.read && "bg-blue-50"
                      ),
                      children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-start gap-3", children: [
                        (0, import_jsx_runtime.jsx)("div", { className: cn(
                          "w-2 h-2 rounded-full mt-2 flex-shrink-0",
                          !notification.read ? "bg-blue-500" : "bg-gray-300"
                        ) }),
                        (0, import_jsx_runtime.jsxs)("div", { className: "flex-1 min-w-0", children: [
                          (0, import_jsx_runtime.jsx)("p", { className: "font-medium text-gray-900 text-sm", children: notification.title }),
                          (0, import_jsx_runtime.jsx)("p", { className: "text-gray-600 text-sm truncate", children: notification.message }),
                          (0, import_jsx_runtime.jsx)("p", { className: "text-gray-400 text-xs mt-1", children: notification.timestamp.toLocaleDateString() })
                        ] })
                      ] })
                    },
                    notification.id
                  )) })
                ] })
              ] }),
              (0, import_jsx_runtime.jsx)(
                Button,
                {
                  variant: "ghost",
                  size: "sm",
                  className: "hidden md:flex",
                  "aria-label": "Settings",
                  children: (0, import_jsx_runtime.jsx)(Settings, { className: "w-5 h-5" })
                }
              ),
              user && (0, import_jsx_runtime.jsxs)("div", { className: "relative", children: [
                (0, import_jsx_runtime.jsxs)(
                  Button,
                  {
                    variant: "ghost",
                    onClick: () => setIsProfileMenuOpen(!isProfileMenuOpen),
                    className: "flex items-center gap-2 px-2",
                    "aria-label": "User menu",
                    "aria-expanded": isProfileMenuOpen,
                    children: [
                      (0, import_jsx_runtime.jsx)(
                        Avatar,
                        {
                          src: user.avatar,
                          alt: user.name,
                          fallback: user.name.charAt(0),
                          size: "sm"
                        }
                      ),
                      (0, import_jsx_runtime.jsxs)("div", { className: "text-left hidden lg:block", children: [
                        (0, import_jsx_runtime.jsx)("p", { className: "text-sm font-medium text-gray-900", children: user.name }),
                        (0, import_jsx_runtime.jsx)("p", { className: "text-xs text-gray-500", children: user.role })
                      ] }),
                      (0, import_jsx_runtime.jsx)(ChevronDown, { className: "w-4 h-4 text-gray-400" })
                    ]
                  }
                ),
                isProfileMenuOpen && (0, import_jsx_runtime.jsxs)("div", { className: "absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 z-50", children: [
                  (0, import_jsx_runtime.jsxs)("div", { className: "p-4 border-b border-gray-200", children: [
                    (0, import_jsx_runtime.jsx)("p", { className: "font-medium text-gray-900", children: user.name }),
                    (0, import_jsx_runtime.jsx)("p", { className: "text-sm text-gray-500", children: user.email })
                  ] }),
                  (0, import_jsx_runtime.jsxs)("div", { className: "py-2", children: [
                    (0, import_jsx_runtime.jsxs)("button", { className: "flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 w-full text-left", children: [
                      (0, import_jsx_runtime.jsx)(User, { className: "w-4 h-4" }),
                      (0, import_jsx_runtime.jsx)("span", { children: "Profile" })
                    ] }),
                    (0, import_jsx_runtime.jsxs)("button", { className: "flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 w-full text-left", children: [
                      (0, import_jsx_runtime.jsx)(Settings, { className: "w-4 h-4" }),
                      (0, import_jsx_runtime.jsx)("span", { children: "Settings" })
                    ] }),
                    (0, import_jsx_runtime.jsxs)("button", { className: "flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 w-full text-left", children: [
                      (0, import_jsx_runtime.jsx)(HelpCircle, { className: "w-4 h-4" }),
                      (0, import_jsx_runtime.jsx)("span", { children: "Help" })
                    ] }),
                    (0, import_jsx_runtime.jsx)("hr", { className: "my-1" }),
                    onSignOut && (0, import_jsx_runtime.jsxs)(
                      "button",
                      {
                        onClick: onSignOut,
                        className: "flex items-center gap-3 px-4 py-2 text-sm text-red-600 hover:bg-red-50 w-full text-left",
                        children: [
                          (0, import_jsx_runtime.jsx)(LogOut, { className: "w-4 h-4" }),
                          (0, import_jsx_runtime.jsx)("span", { children: "Sign Out" })
                        ]
                      }
                    )
                  ] })
                ] })
              ] })
            ] })
          ] }),
          workspaces.length > 0 && currentWorkspace && onWorkspaceChange && (0, import_jsx_runtime.jsx)("div", { className: "md:hidden mt-3", children: (0, import_jsx_runtime.jsx)("div", { className: "px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg", children: currentWorkspace.name }) })
        ] }),
        (isProfileMenuOpen || isNotificationOpen) && (0, import_jsx_runtime.jsx)(
          "div",
          {
            className: "fixed inset-0 z-40",
            onClick: () => {
              setIsProfileMenuOpen(false);
              setIsNotificationOpen(false);
            },
            "aria-hidden": "true"
          }
        )
      ]
    }
  );
};

// packages/layouts/src/components/BreadcrumbNav.tsx
var import_react2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var contextStyles = {
  consultant: "text-blue-600 hover:text-blue-700 border-blue-200",
  client: "text-green-600 hover:text-green-700 border-green-200",
  admin: "text-red-600 hover:text-red-700 border-red-200",
  expert: "text-purple-600 hover:text-purple-700 border-purple-200",
  "tool-creator": "text-orange-600 hover:text-orange-700 border-orange-200",
  founder: "text-amber-600 hover:text-amber-700 border-amber-200",
  neutral: "text-gray-600 hover:text-gray-700 border-gray-200"
};
var BreadcrumbNav = ({
  context = "neutral",
  items,
  maxItems = 5,
  separator,
  onItemClick,
  responsive = true,
  generateFromPath = false,
  workspaceScoped = false,
  className,
  showHome = true,
  ...props
}) => {
  const processedItems = import_react2.default.useMemo(() => {
    if (items.length <= maxItems) {
      return items;
    }
    const firstItem = items[0];
    const lastItems = items.slice(-(maxItems - 2));
    return [
      firstItem,
      { id: "ellipsis", label: "...", disabled: true },
      ...lastItems
    ];
  }, [items, maxItems]);
  const handleItemClick = (item) => {
    if (item.disabled || item.id === "ellipsis") return;
    onItemClick == null ? void 0 : onItemClick(item);
  };
  const renderSeparator = () => {
    if (separator) return separator;
    return (0, import_jsx_runtime2.jsx)(ChevronRight, { className: "h-4 w-4 text-gray-400" });
  };
  const getItemStyles = (item, isLast) => {
    const baseStyles = "inline-flex items-center gap-1 text-sm transition-colors";
    if (item.disabled || item.id === "ellipsis") {
      return cn(baseStyles, "text-gray-400 cursor-default");
    }
    if (isLast) {
      return cn(baseStyles, "text-gray-900 font-medium cursor-default");
    }
    const contextStyle = contextStyles[item.workspaceContext || context];
    return cn(
      baseStyles,
      "hover:underline cursor-pointer",
      contextStyle
    );
  };
  return (0, import_jsx_runtime2.jsx)(
    "nav",
    {
      className: cn(
        "flex items-center space-x-1 text-sm",
        responsive && "flex-wrap",
        className
      ),
      "aria-label": "Breadcrumb",
      ...props,
      children: (0, import_jsx_runtime2.jsxs)("ol", { className: "flex items-center space-x-1", children: [
        showHome && (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
          (0, import_jsx_runtime2.jsx)("li", { children: (0, import_jsx_runtime2.jsx)(
            "button",
            {
              onClick: () => onItemClick == null ? void 0 : onItemClick({ id: "home", label: "Home", path: "/" }),
              className: cn(
                "inline-flex items-center text-sm transition-colors hover:underline",
                contextStyles[context]
              ),
              "aria-label": "Home",
              children: (0, import_jsx_runtime2.jsx)(Home, { className: "h-4 w-4" })
            }
          ) }),
          processedItems.length > 0 && (0, import_jsx_runtime2.jsx)("li", { className: "flex items-center", children: renderSeparator() })
        ] }),
        processedItems.map((item, index) => {
          const isLast = index === processedItems.length - 1;
          return (0, import_jsx_runtime2.jsxs)(import_react2.default.Fragment, { children: [
            (0, import_jsx_runtime2.jsx)("li", { children: item.path && !item.disabled && !isLast ? (0, import_jsx_runtime2.jsxs)(
              "button",
              {
                onClick: () => handleItemClick(item),
                className: getItemStyles(item, isLast),
                "aria-current": isLast ? "page" : void 0,
                children: [
                  item.icon && (0, import_jsx_runtime2.jsx)("span", { className: "h-4 w-4", "aria-hidden": "true", children: item.icon }),
                  (0, import_jsx_runtime2.jsx)("span", { className: responsive ? "truncate max-w-[120px] sm:max-w-none" : "", children: item.label })
                ]
              }
            ) : (0, import_jsx_runtime2.jsxs)(
              "span",
              {
                className: getItemStyles(item, isLast),
                "aria-current": isLast ? "page" : void 0,
                children: [
                  item.icon && (0, import_jsx_runtime2.jsx)("span", { className: "h-4 w-4", "aria-hidden": "true", children: item.icon }),
                  (0, import_jsx_runtime2.jsx)("span", { className: responsive ? "truncate max-w-[120px] sm:max-w-none" : "", children: item.label })
                ]
              }
            ) }),
            !isLast && (0, import_jsx_runtime2.jsx)("li", { className: "flex items-center", "aria-hidden": "true", children: renderSeparator() })
          ] }, item.id);
        })
      ] })
    }
  );
};

// packages/layouts/src/components/TabNavigation.tsx
var import_react3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var contextStyles2 = {
  consultant: {
    active: "border-blue-500 text-blue-600",
    inactive: "text-gray-500 hover:text-blue-600 hover:border-blue-300",
    background: "bg-blue-50"
  },
  client: {
    active: "border-green-500 text-green-600",
    inactive: "text-gray-500 hover:text-green-600 hover:border-green-300",
    background: "bg-green-50"
  },
  admin: {
    active: "border-red-500 text-red-600",
    inactive: "text-gray-500 hover:text-red-600 hover:border-red-300",
    background: "bg-red-50"
  },
  expert: {
    active: "border-purple-500 text-purple-600",
    inactive: "text-gray-500 hover:text-purple-600 hover:border-purple-300",
    background: "bg-purple-50"
  },
  "tool-creator": {
    active: "border-orange-500 text-orange-600",
    inactive: "text-gray-500 hover:text-orange-600 hover:border-orange-300",
    background: "bg-orange-50"
  },
  founder: {
    active: "border-amber-500 text-amber-600",
    inactive: "text-gray-500 hover:text-amber-600 hover:border-amber-300",
    background: "bg-amber-50"
  },
  neutral: {
    active: "border-gray-500 text-gray-900",
    inactive: "text-gray-500 hover:text-gray-700 hover:border-gray-300",
    background: "bg-gray-50"
  }
};
var variantStyles = {
  line: {
    tabList: "border-b border-gray-200",
    tab: "border-b-2 border-transparent px-4 py-2",
    activeTab: "border-b-2"
  },
  card: {
    tabList: "bg-gray-100 p-1 rounded-lg",
    tab: "px-3 py-1.5 rounded-md",
    activeTab: "bg-white shadow-sm"
  },
  pill: {
    tabList: "space-x-1",
    tab: "px-3 py-1.5 rounded-full",
    activeTab: "shadow-sm"
  }
};
var sizeStyles = {
  sm: "text-xs",
  md: "text-sm",
  lg: "text-base"
};
var TabNavigation = ({
  context = "neutral",
  tabs,
  activeTab,
  onTabChange,
  onTabClose,
  variant = "line",
  size = "md",
  scrollable = true,
  responsive = true,
  lazy = false,
  permissions = [],
  className,
  tabListClassName,
  tabPanelClassName,
  showContent = true,
  ...props
}) => {
  var _a;
  const [internalActiveTab, setInternalActiveTab] = (0, import_react3.useState)(activeTab || ((_a = tabs[0]) == null ? void 0 : _a.id));
  const [showScrollButtons, setShowScrollButtons] = (0, import_react3.useState)(false);
  const [canScrollLeft, setCanScrollLeft] = (0, import_react3.useState)(false);
  const [canScrollRight, setCanScrollRight] = (0, import_react3.useState)(false);
  const tabListRef = (0, import_react3.useRef)(null);
  const [loadedTabs, setLoadedTabs] = (0, import_react3.useState)(/* @__PURE__ */ new Set([internalActiveTab]));
  const currentActiveTab = activeTab || internalActiveTab;
  const filteredTabs = import_react3.default.useMemo(() => {
    return tabs.filter((tab) => {
      if (!tab.permission) return true;
      return permissions.includes(tab.permission);
    });
  }, [tabs, permissions]);
  const checkScrollState = import_react3.default.useCallback(() => {
    if (!tabListRef.current || !scrollable) return;
    const { scrollLeft, scrollWidth, clientWidth } = tabListRef.current;
    setCanScrollLeft(scrollLeft > 0);
    setCanScrollRight(scrollLeft < scrollWidth - clientWidth - 1);
    setShowScrollButtons(scrollWidth > clientWidth);
  }, [scrollable]);
  (0, import_react3.useEffect)(() => {
    checkScrollState();
    const handleResize = () => checkScrollState();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, [checkScrollState, filteredTabs]);
  (0, import_react3.useEffect)(() => {
    if (lazy && currentActiveTab && !loadedTabs.has(currentActiveTab)) {
      setLoadedTabs((prev) => /* @__PURE__ */ new Set([...prev, currentActiveTab]));
    }
  }, [currentActiveTab, lazy, loadedTabs]);
  const handleTabClick = (tab) => {
    if (tab.disabled) return;
    const newActiveTab = tab.id;
    setInternalActiveTab(newActiveTab);
    onTabChange == null ? void 0 : onTabChange(tab);
    if (lazy && !loadedTabs.has(newActiveTab)) {
      setLoadedTabs((prev) => /* @__PURE__ */ new Set([...prev, newActiveTab]));
    }
  };
  const handleTabClose = (tab, event) => {
    event.stopPropagation();
    onTabClose == null ? void 0 : onTabClose(tab);
  };
  const scrollTabs = (direction) => {
    if (!tabListRef.current) return;
    const scrollAmount = 200;
    const newScrollLeft = direction === "left" ? tabListRef.current.scrollLeft - scrollAmount : tabListRef.current.scrollLeft + scrollAmount;
    tabListRef.current.scrollTo({
      left: newScrollLeft,
      behavior: "smooth"
    });
    setTimeout(checkScrollState, 300);
  };
  const getTabStyles = (tab, isActive) => {
    const baseStyles = cn(
      "inline-flex items-center gap-2 font-medium transition-all duration-200 cursor-pointer",
      "focus:outline-none focus:ring-2 focus:ring-offset-2",
      sizeStyles[size],
      variantStyles[variant].tab
    );
    if (tab.disabled) {
      return cn(baseStyles, "opacity-50 cursor-not-allowed text-gray-400");
    }
    const contextStyle = contextStyles2[tab.workspaceContext || context];
    if (isActive) {
      return cn(
        baseStyles,
        variantStyles[variant].activeTab,
        contextStyle.active,
        variant === "card" || variant === "pill" ? contextStyle.background : ""
      );
    }
    return cn(baseStyles, contextStyle.inactive);
  };
  const renderBadge = (badge) => {
    if (!badge) return null;
    return (0, import_jsx_runtime3.jsx)("span", { className: cn(
      "inline-flex items-center justify-center px-1.5 py-0.5 rounded-full text-xs font-medium",
      "bg-red-100 text-red-800 min-w-[1.25rem] h-5"
    ), children: badge > 99 ? "99+" : badge });
  };
  const activeTabData = filteredTabs.find((tab) => tab.id === currentActiveTab);
  return (0, import_jsx_runtime3.jsxs)("div", { className: cn("w-full", className), ...props, children: [
    (0, import_jsx_runtime3.jsxs)("div", { className: "relative", children: [
      showScrollButtons && canScrollLeft && (0, import_jsx_runtime3.jsx)(
        "button",
        {
          onClick: () => scrollTabs("left"),
          className: cn(
            "absolute left-0 top-0 z-10 h-full px-2 bg-white shadow-md",
            "flex items-center justify-center hover:bg-gray-50",
            "border-r border-gray-200"
          ),
          "aria-label": "Scroll tabs left",
          children: (0, import_jsx_runtime3.jsx)(ChevronLeft, { className: "h-4 w-4" })
        }
      ),
      (0, import_jsx_runtime3.jsx)(
        "div",
        {
          ref: tabListRef,
          className: cn(
            "flex overflow-x-auto scrollbar-hide",
            variantStyles[variant].tabList,
            scrollable && showScrollButtons && canScrollLeft && "pl-10",
            scrollable && showScrollButtons && canScrollRight && "pr-10",
            tabListClassName
          ),
          role: "tablist",
          onScroll: checkScrollState,
          children: filteredTabs.map((tab) => {
            const isActive = tab.id === currentActiveTab;
            return (0, import_jsx_runtime3.jsxs)(
              "button",
              {
                role: "tab",
                "aria-selected": isActive,
                "aria-controls": `tabpanel-${tab.id}`,
                tabIndex: isActive ? 0 : -1,
                className: getTabStyles(tab, isActive),
                onClick: () => handleTabClick(tab),
                disabled: tab.disabled,
                children: [
                  tab.icon && (0, import_jsx_runtime3.jsx)("span", { className: "h-4 w-4 flex-shrink-0", "aria-hidden": "true", children: tab.icon }),
                  (0, import_jsx_runtime3.jsx)("span", { className: responsive ? "truncate max-w-[120px] sm:max-w-none" : "", children: tab.label }),
                  tab.badge && renderBadge(tab.badge),
                  tab.closable && (0, import_jsx_runtime3.jsx)(
                    "button",
                    {
                      onClick: (e) => handleTabClose(tab, e),
                      className: cn(
                        "ml-1 p-0.5 rounded hover:bg-gray-200 transition-colors",
                        "focus:outline-none focus:ring-1 focus:ring-gray-400"
                      ),
                      "aria-label": `Close ${tab.label} tab`,
                      children: (0, import_jsx_runtime3.jsx)(X, { className: "h-3 w-3" })
                    }
                  )
                ]
              },
              tab.id
            );
          })
        }
      ),
      showScrollButtons && canScrollRight && (0, import_jsx_runtime3.jsx)(
        "button",
        {
          onClick: () => scrollTabs("right"),
          className: cn(
            "absolute right-0 top-0 z-10 h-full px-2 bg-white shadow-md",
            "flex items-center justify-center hover:bg-gray-50",
            "border-l border-gray-200"
          ),
          "aria-label": "Scroll tabs right",
          children: (0, import_jsx_runtime3.jsx)(ChevronRight, { className: "h-4 w-4" })
        }
      )
    ] }),
    showContent && activeTabData && (0, import_jsx_runtime3.jsx)(
      "div",
      {
        role: "tabpanel",
        id: `tabpanel-${activeTabData.id}`,
        "aria-labelledby": `tab-${activeTabData.id}`,
        className: cn("mt-4", tabPanelClassName),
        children: lazy ? loadedTabs.has(activeTabData.id) && activeTabData.content : activeTabData.content
      }
    )
  ] });
};

// packages/layouts/src/components/WorkspaceNav.tsx
var import_react4 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var WorkspaceNav = ({
  workspace,
  context = "neutral",
  user,
  permissions = [],
  features = [],
  onNavigate,
  onWorkspaceChange,
  responsive = true,
  collapsed = false,
  className
}) => {
  var _a, _b;
  const [expandedItems, setExpandedItems] = (0, import_react4.useState)(/* @__PURE__ */ new Set());
  const filterNavigationItems = (0, import_react4.useCallback)((items) => {
    return items.filter((item) => {
      if (item.permission && !permissions.includes(item.permission)) {
        return false;
      }
      if (item.workspaceContext && item.workspaceContext !== context && item.workspaceContext !== "neutral") {
        return false;
      }
      if (item.disabled) {
        return false;
      }
      return true;
    }).map((item) => ({
      ...item,
      children: item.children ? filterNavigationItems(item.children) : void 0
    }));
  }, [permissions, context]);
  const getWorkspaceTheme2 = (0, import_react4.useCallback)(() => {
    const baseClasses = "transition-colors duration-200";
    switch (context) {
      case "consultant":
        return `${baseClasses} bg-blue-50 border-blue-200 text-blue-900`;
      case "client":
        return `${baseClasses} bg-green-50 border-green-200 text-green-900`;
      case "admin":
        return `${baseClasses} bg-gray-50 border-gray-200 text-gray-900`;
      case "expert":
        return `${baseClasses} bg-purple-50 border-purple-200 text-purple-900`;
      case "tool-creator":
        return `${baseClasses} bg-orange-50 border-orange-200 text-orange-900`;
      case "founder":
        return `${baseClasses} bg-amber-50 border-amber-200 text-amber-900`;
      default:
        return `${baseClasses} bg-white border-gray-200 text-gray-900`;
    }
  }, [context]);
  const toggleExpanded = (0, import_react4.useCallback)((itemId) => {
    setExpandedItems((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(itemId)) {
        newSet.delete(itemId);
      } else {
        newSet.add(itemId);
      }
      return newSet;
    });
  }, []);
  const handleItemClick = (0, import_react4.useCallback)((item) => {
    if (item.children && item.children.length > 0) {
      toggleExpanded(item.id);
    } else if (item.path && onNavigate) {
      onNavigate(item.path);
    }
  }, [onNavigate, toggleExpanded]);
  const renderNavigationItem = (0, import_react4.useCallback)((item, level = 0) => {
    const hasChildren = item.children && item.children.length > 0;
    const isExpanded = expandedItems.has(item.id);
    const filteredChildren = hasChildren ? filterNavigationItems(item.children) : [];
    return (0, import_jsx_runtime4.jsxs)("div", { className: "w-full", children: [
      (0, import_jsx_runtime4.jsxs)(
        "button",
        {
          onClick: () => handleItemClick(item),
          className: cn(
            "w-full flex items-center justify-between px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200",
            "hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-offset-2",
            level > 0 && "ml-4 text-xs",
            item.active && "bg-opacity-100 font-semibold",
            !item.active && "hover:bg-gray-100",
            collapsed && level === 0 && "justify-center px-2"
          ),
          style: { paddingLeft: collapsed ? void 0 : `${0.75 + level * 1}rem` },
          "aria-expanded": hasChildren ? isExpanded : void 0,
          "aria-label": item.label,
          children: [
            (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center space-x-2", children: [
              item.icon && (0, import_jsx_runtime4.jsx)("span", { className: "flex-shrink-0 w-4 h-4", "aria-hidden": "true", children: (0, import_jsx_runtime4.jsx)("div", { className: "w-4 h-4 bg-current opacity-60 rounded-sm" }) }),
              !collapsed && (0, import_jsx_runtime4.jsx)("span", { className: "truncate", children: item.label })
            ] }),
            !collapsed && (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center space-x-1", children: [
              item.badge && item.badge > 0 && (0, import_jsx_runtime4.jsx)("span", { className: "inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-600 rounded-full", children: item.badge > 99 ? "99+" : item.badge }),
              hasChildren && (0, import_jsx_runtime4.jsx)("span", { className: cn(
                "flex-shrink-0 w-4 h-4 transition-transform duration-200",
                isExpanded && "transform rotate-90"
              ), children: (0, import_jsx_runtime4.jsx)("div", { className: "w-0 h-0 border-l-4 border-l-current border-y-2 border-y-transparent" }) })
            ] })
          ]
        }
      ),
      hasChildren && isExpanded && !collapsed && (0, import_jsx_runtime4.jsx)("div", { className: "mt-1 space-y-1", children: filteredChildren.map((child) => renderNavigationItem(child, level + 1)) })
    ] }, item.id);
  }, [expandedItems, filterNavigationItems, handleItemClick, collapsed]);
  const filteredNavigation = filterNavigationItems(workspace.navigation);
  const enabledFeatures = features.filter(
    (feature) => feature.enabled && (!feature.permission || permissions.includes(feature.permission)) && (!feature.workspaceContext || feature.workspaceContext === context || feature.workspaceContext === "neutral")
  );
  return (0, import_jsx_runtime4.jsxs)(
    "nav",
    {
      className: cn(
        "flex flex-col h-full border-r",
        getWorkspaceTheme2(),
        responsive && "lg:w-64",
        collapsed ? "w-16" : "w-64",
        className
      ),
      "aria-label": `${workspace.name} navigation`,
      children: [
        (0, import_jsx_runtime4.jsxs)("div", { className: cn(
          "flex items-center justify-between p-4 border-b border-current border-opacity-20",
          collapsed && "justify-center px-2"
        ), children: [
          !collapsed && (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center space-x-3", children: [
            ((_a = workspace.branding) == null ? void 0 : _a.logo) && (0, import_jsx_runtime4.jsx)(
              "img",
              {
                src: workspace.branding.logo,
                alt: `${workspace.name} logo`,
                className: "w-8 h-8 rounded"
              }
            ),
            (0, import_jsx_runtime4.jsxs)("div", { className: "flex flex-col", children: [
              (0, import_jsx_runtime4.jsx)("h2", { className: "text-sm font-semibold truncate", children: workspace.name }),
              (0, import_jsx_runtime4.jsx)("p", { className: "text-xs opacity-75 capitalize", children: workspace.type })
            ] })
          ] }),
          ((_b = workspace.branding) == null ? void 0 : _b.logo) && collapsed && (0, import_jsx_runtime4.jsx)(
            "img",
            {
              src: workspace.branding.logo,
              alt: `${workspace.name} logo`,
              className: "w-8 h-8 rounded"
            }
          )
        ] }),
        (0, import_jsx_runtime4.jsx)("div", { className: "flex-1 overflow-y-auto p-2 space-y-1", children: filteredNavigation.map((item) => renderNavigationItem(item)) }),
        enabledFeatures.length > 0 && !collapsed && (0, import_jsx_runtime4.jsxs)("div", { className: "border-t border-current border-opacity-20 p-2", children: [
          (0, import_jsx_runtime4.jsx)("h3", { className: "text-xs font-semibold uppercase tracking-wide opacity-75 mb-2", children: "Features" }),
          (0, import_jsx_runtime4.jsx)("div", { className: "space-y-1", children: enabledFeatures.map((feature) => (0, import_jsx_runtime4.jsxs)(
            "div",
            {
              className: "flex items-center justify-between px-3 py-1 text-xs",
              children: [
                (0, import_jsx_runtime4.jsx)("span", { className: "truncate", children: feature.name }),
                (0, import_jsx_runtime4.jsx)("div", { className: "w-2 h-2 bg-green-500 rounded-full" })
              ]
            },
            feature.id
          )) })
        ] }),
        !collapsed && (0, import_jsx_runtime4.jsx)("div", { className: "border-t border-current border-opacity-20 p-4", children: (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center space-x-3", children: [
          user.avatar ? (0, import_jsx_runtime4.jsx)(
            "img",
            {
              src: user.avatar,
              alt: user.name,
              className: "w-8 h-8 rounded-full"
            }
          ) : (0, import_jsx_runtime4.jsx)("div", { className: "w-8 h-8 bg-current bg-opacity-20 rounded-full flex items-center justify-center", children: (0, import_jsx_runtime4.jsx)("span", { className: "text-xs font-semibold", children: user.name.charAt(0).toUpperCase() }) }),
          (0, import_jsx_runtime4.jsxs)("div", { className: "flex-1 min-w-0", children: [
            (0, import_jsx_runtime4.jsx)("p", { className: "text-sm font-medium truncate", children: user.name }),
            (0, import_jsx_runtime4.jsx)("p", { className: "text-xs opacity-75 truncate", children: user.role })
          ] })
        ] }) })
      ]
    }
  );
};

// packages/layouts/src/components/ClientNav.tsx
var import_react5 = __toESM(require_react());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var ClientNav = ({
  client,
  projects,
  currentProject,
  onProjectChange,
  onNavigate,
  permissions = [],
  responsive = true,
  notifications = [],
  className
}) => {
  const [activeSection, setActiveSection] = (0, import_react5.useState)("overview");
  const unreadCount = notifications.filter((n) => !n.read).length;
  const activeProject = currentProject || projects[0];
  const handleNavigate = (0, import_react5.useCallback)((path, section) => {
    setActiveSection(section);
    if (onNavigate) {
      onNavigate(path);
    }
  }, [onNavigate]);
  const handleProjectChange = (0, import_react5.useCallback)((project) => {
    if (onProjectChange) {
      onProjectChange(project);
    }
  }, [onProjectChange]);
  const getProjectStatusColor = (0, import_react5.useCallback)((status) => {
    switch (status) {
      case "active":
        return "text-green-600 bg-green-100";
      case "completed":
        return "text-blue-600 bg-blue-100";
      case "on-hold":
        return "text-yellow-600 bg-yellow-100";
      case "cancelled":
        return "text-red-600 bg-red-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  }, []);
  const getPriorityColor = (0, import_react5.useCallback)((priority) => {
    switch (priority) {
      case "urgent":
        return "text-red-600";
      case "high":
        return "text-orange-600";
      case "medium":
        return "text-yellow-600";
      case "low":
        return "text-green-600";
      default:
        return "text-gray-600";
    }
  }, []);
  const navigationItems = [
    {
      id: "overview",
      label: "Project Overview",
      icon: "home",
      path: "/overview",
      description: "View project status and updates"
    },
    {
      id: "documents",
      label: "Documents",
      icon: "file",
      path: "/documents",
      description: "Access project files and deliverables",
      badge: activeProject ? Math.floor(Math.random() * 10) + 1 : 0
    },
    {
      id: "communications",
      label: "Messages",
      icon: "message",
      path: "/messages",
      description: "Communicate with your consultant",
      badge: unreadCount
    },
    {
      id: "timeline",
      label: "Timeline",
      icon: "calendar",
      path: "/timeline",
      description: "View project milestones and deadlines"
    },
    {
      id: "billing",
      label: "Billing",
      icon: "credit-card",
      path: "/billing",
      description: "View invoices and payment history",
      permission: "billing"
    },
    {
      id: "feedback",
      label: "Feedback",
      icon: "star",
      path: "/feedback",
      description: "Provide feedback and reviews"
    }
  ];
  const filteredNavigation = navigationItems.filter(
    (item) => !item.permission || permissions.includes(item.permission)
  );
  return (0, import_jsx_runtime5.jsxs)(
    "nav",
    {
      className: cn(
        "flex flex-col h-full bg-green-50 border-r border-green-200 text-green-900",
        responsive && "lg:w-80",
        "w-80",
        className
      ),
      "aria-label": "Client navigation",
      children: [
        (0, import_jsx_runtime5.jsx)("div", { className: "p-6 border-b border-green-200", children: (0, import_jsx_runtime5.jsxs)("div", { className: "flex items-center space-x-4", children: [
          client.avatar ? (0, import_jsx_runtime5.jsx)(
            "img",
            {
              src: client.avatar,
              alt: client.name,
              className: "w-12 h-12 rounded-full border-2 border-green-300"
            }
          ) : (0, import_jsx_runtime5.jsx)("div", { className: "w-12 h-12 bg-green-200 rounded-full flex items-center justify-center border-2 border-green-300", children: (0, import_jsx_runtime5.jsx)("span", { className: "text-lg font-semibold text-green-700", children: client.name.charAt(0).toUpperCase() }) }),
          (0, import_jsx_runtime5.jsxs)("div", { className: "flex-1 min-w-0", children: [
            (0, import_jsx_runtime5.jsx)("h2", { className: "text-lg font-semibold text-green-900 truncate", children: client.name }),
            (0, import_jsx_runtime5.jsx)("p", { className: "text-sm text-green-700 truncate", children: client.company }),
            (0, import_jsx_runtime5.jsxs)("div", { className: "flex items-center mt-1", children: [
              (0, import_jsx_runtime5.jsx)("div", { className: cn(
                "w-2 h-2 rounded-full mr-2",
                client.status === "active" ? "bg-green-500" : client.status === "pending" ? "bg-yellow-500" : "bg-gray-400"
              ) }),
              (0, import_jsx_runtime5.jsx)("span", { className: "text-xs text-green-600 capitalize", children: client.status })
            ] })
          ] })
        ] }) }),
        projects.length > 0 && (0, import_jsx_runtime5.jsxs)("div", { className: "p-4 border-b border-green-200", children: [
          (0, import_jsx_runtime5.jsx)("label", { className: "block text-sm font-medium text-green-800 mb-2", children: "Current Project" }),
          (0, import_jsx_runtime5.jsx)(
            "select",
            {
              value: (activeProject == null ? void 0 : activeProject.id) || "",
              onChange: (e) => {
                const project = projects.find((p) => p.id === e.target.value);
                if (project) {
                  handleProjectChange(project);
                }
              },
              className: "w-full px-3 py-2 text-sm border border-green-300 rounded-md bg-white text-green-900 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500",
              children: projects.map((project) => (0, import_jsx_runtime5.jsx)("option", { value: project.id, children: project.name }, project.id))
            }
          ),
          activeProject && (0, import_jsx_runtime5.jsxs)("div", { className: "mt-3 p-3 bg-white rounded-md border border-green-200", children: [
            (0, import_jsx_runtime5.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
              (0, import_jsx_runtime5.jsx)("span", { className: cn(
                "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
                getProjectStatusColor(activeProject.status)
              ), children: activeProject.status.replace("-", " ") }),
              (0, import_jsx_runtime5.jsxs)("span", { className: cn(
                "text-xs font-medium",
                getPriorityColor(activeProject.priority)
              ), children: [
                activeProject.priority,
                " priority"
              ] })
            ] }),
            (0, import_jsx_runtime5.jsxs)("div", { className: "mb-2", children: [
              (0, import_jsx_runtime5.jsxs)("div", { className: "flex justify-between text-xs text-green-700 mb-1", children: [
                (0, import_jsx_runtime5.jsx)("span", { children: "Progress" }),
                (0, import_jsx_runtime5.jsxs)("span", { children: [
                  activeProject.progress,
                  "%"
                ] })
              ] }),
              (0, import_jsx_runtime5.jsx)("div", { className: "w-full bg-green-200 rounded-full h-2", children: (0, import_jsx_runtime5.jsx)(
                "div",
                {
                  className: "bg-green-600 h-2 rounded-full transition-all duration-300",
                  style: { width: `${activeProject.progress}%` }
                }
              ) })
            ] }),
            activeProject.dueDate && (0, import_jsx_runtime5.jsxs)("p", { className: "text-xs text-green-600", children: [
              "Due: ",
              new Date(activeProject.dueDate).toLocaleDateString()
            ] })
          ] })
        ] }),
        (0, import_jsx_runtime5.jsx)("div", { className: "flex-1 overflow-y-auto p-4 space-y-2", children: filteredNavigation.map((item) => (0, import_jsx_runtime5.jsxs)(
          "button",
          {
            onClick: () => handleNavigate(item.path, item.id),
            className: cn(
              "w-full flex items-center justify-between p-3 text-left rounded-lg transition-colors duration-200",
              "hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2",
              activeSection === item.id ? "bg-green-200 text-green-900 font-medium" : "text-green-800 hover:text-green-900"
            ),
            "aria-label": item.label,
            children: [
              (0, import_jsx_runtime5.jsxs)("div", { className: "flex items-start space-x-3", children: [
                (0, import_jsx_runtime5.jsx)("div", { className: "flex-shrink-0 w-5 h-5 mt-0.5", children: (0, import_jsx_runtime5.jsx)("div", { className: "w-5 h-5 bg-current opacity-60 rounded-sm" }) }),
                (0, import_jsx_runtime5.jsxs)("div", { className: "flex-1 min-w-0", children: [
                  (0, import_jsx_runtime5.jsx)("p", { className: "text-sm font-medium truncate", children: item.label }),
                  (0, import_jsx_runtime5.jsx)("p", { className: "text-xs opacity-75 truncate", children: item.description })
                ] })
              ] }),
              item.badge && item.badge > 0 && (0, import_jsx_runtime5.jsx)("span", { className: "inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-600 rounded-full ml-2", children: item.badge > 99 ? "99+" : item.badge })
            ]
          },
          item.id
        )) }),
        (0, import_jsx_runtime5.jsxs)("div", { className: "border-t border-green-200 p-4", children: [
          (0, import_jsx_runtime5.jsx)("h3", { className: "text-sm font-medium text-green-800 mb-3", children: "Quick Actions" }),
          (0, import_jsx_runtime5.jsxs)("div", { className: "space-y-2", children: [
            (0, import_jsx_runtime5.jsxs)(
              "button",
              {
                onClick: () => handleNavigate("/support", "support"),
                className: "w-full flex items-center space-x-2 px-3 py-2 text-sm text-green-700 hover:text-green-900 hover:bg-green-100 rounded-md transition-colors duration-200",
                children: [
                  (0, import_jsx_runtime5.jsx)("div", { className: "w-4 h-4 bg-current opacity-60 rounded-sm" }),
                  (0, import_jsx_runtime5.jsx)("span", { children: "Contact Support" })
                ]
              }
            ),
            (0, import_jsx_runtime5.jsxs)(
              "button",
              {
                onClick: () => handleNavigate("/help", "help"),
                className: "w-full flex items-center space-x-2 px-3 py-2 text-sm text-green-700 hover:text-green-900 hover:bg-green-100 rounded-md transition-colors duration-200",
                children: [
                  (0, import_jsx_runtime5.jsx)("div", { className: "w-4 h-4 bg-current opacity-60 rounded-sm" }),
                  (0, import_jsx_runtime5.jsx)("span", { children: "Help Center" })
                ]
              }
            )
          ] })
        ] }),
        notifications.length > 0 && (0, import_jsx_runtime5.jsxs)("div", { className: "border-t border-green-200 p-4", children: [
          (0, import_jsx_runtime5.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
            (0, import_jsx_runtime5.jsx)("h3", { className: "text-sm font-medium text-green-800", children: "Recent Updates" }),
            unreadCount > 0 && (0, import_jsx_runtime5.jsx)("span", { className: "inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-600 rounded-full", children: unreadCount })
          ] }),
          (0, import_jsx_runtime5.jsx)("div", { className: "space-y-2 max-h-32 overflow-y-auto", children: notifications.slice(0, 3).map((notification) => (0, import_jsx_runtime5.jsxs)(
            "div",
            {
              className: cn(
                "p-2 rounded-md text-xs",
                notification.read ? "bg-green-100 text-green-700" : "bg-white text-green-800 border border-green-200"
              ),
              children: [
                (0, import_jsx_runtime5.jsx)("p", { className: "font-medium truncate", children: notification.title }),
                (0, import_jsx_runtime5.jsx)("p", { className: "opacity-75 truncate", children: notification.message })
              ]
            },
            notification.id
          )) }),
          notifications.length > 3 && (0, import_jsx_runtime5.jsx)(
            "button",
            {
              onClick: () => handleNavigate("/notifications", "notifications"),
              className: "w-full mt-2 text-xs text-green-600 hover:text-green-800 text-center",
              children: "View all notifications"
            }
          )
        ] })
      ]
    }
  );
};

// packages/layouts/src/components/ConsultantNav.tsx
var import_react6 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var ConsultantNav = ({
  consultant,
  clients,
  activeWorkspaces,
  onClientSelect,
  onWorkspaceSelect,
  onNavigate,
  permissions = [],
  responsive = true,
  analytics,
  className
}) => {
  const [activeSection, setActiveSection] = (0, import_react6.useState)("dashboard");
  const [expandedSections, setExpandedSections] = (0, import_react6.useState)(/* @__PURE__ */ new Set(["clients"]));
  const handleNavigate = (0, import_react6.useCallback)((path, section) => {
    setActiveSection(section);
    if (onNavigate) {
      onNavigate(path);
    }
  }, [onNavigate]);
  const toggleSection = (0, import_react6.useCallback)((sectionId) => {
    setExpandedSections((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(sectionId)) {
        newSet.delete(sectionId);
      } else {
        newSet.add(sectionId);
      }
      return newSet;
    });
  }, []);
  const getStatusColor = (0, import_react6.useCallback)((status) => {
    switch (status) {
      case "active":
        return "bg-green-500";
      case "busy":
        return "bg-red-500";
      case "away":
        return "bg-yellow-500";
      case "offline":
        return "bg-gray-400";
      default:
        return "bg-gray-400";
    }
  }, []);
  const getClientPriorityColor = (0, import_react6.useCallback)((priority) => {
    switch (priority) {
      case "urgent":
        return "text-red-600 bg-red-100";
      case "high":
        return "text-orange-600 bg-orange-100";
      case "medium":
        return "text-yellow-600 bg-yellow-100";
      case "low":
        return "text-green-600 bg-green-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  }, []);
  const navigationSections = [
    {
      id: "main",
      title: "Main",
      items: [
        {
          id: "dashboard",
          label: "Dashboard",
          icon: "dashboard",
          path: "/dashboard",
          description: "Overview and key metrics"
        },
        {
          id: "calendar",
          label: "Calendar",
          icon: "calendar",
          path: "/calendar",
          description: "Schedule and appointments",
          badge: 3
          // Upcoming appointments
        },
        {
          id: "tasks",
          label: "Tasks",
          icon: "check-square",
          path: "/tasks",
          description: "Action items and to-dos",
          badge: 8
          // Pending tasks
        }
      ]
    },
    {
      id: "clients",
      title: "Client Management",
      expandable: true,
      items: [
        {
          id: "clients-overview",
          label: "All Clients",
          icon: "users",
          path: "/clients",
          description: "Manage client relationships",
          badge: clients.length
        },
        {
          id: "active-projects",
          label: "Active Projects",
          icon: "folder",
          path: "/projects/active",
          description: "Current project work",
          badge: activeWorkspaces.length
        },
        {
          id: "proposals",
          label: "Proposals",
          icon: "file-text",
          path: "/proposals",
          description: "Pending and sent proposals",
          permission: "proposals"
        },
        {
          id: "contracts",
          label: "Contracts",
          icon: "file-signature",
          path: "/contracts",
          description: "Client agreements",
          permission: "contracts"
        }
      ]
    },
    {
      id: "business",
      title: "Business Operations",
      expandable: true,
      items: [
        {
          id: "billing",
          label: "Billing & Invoices",
          icon: "credit-card",
          path: "/billing",
          description: "Financial management",
          permission: "billing",
          badge: 2
          // Pending invoices
        },
        {
          id: "time-tracking",
          label: "Time Tracking",
          icon: "clock",
          path: "/time",
          description: "Log and manage time",
          permission: "time-tracking"
        },
        {
          id: "analytics",
          label: "Analytics",
          icon: "chart",
          path: "/analytics",
          description: "Performance insights",
          permission: "analytics"
        },
        {
          id: "reports",
          label: "Reports",
          icon: "bar-chart",
          path: "/reports",
          description: "Business reports",
          permission: "reports"
        }
      ]
    },
    {
      id: "tools",
      title: "Tools & Resources",
      expandable: true,
      items: [
        {
          id: "knowledge-base",
          label: "Knowledge Base",
          icon: "book",
          path: "/knowledge",
          description: "Resources and documentation"
        },
        {
          id: "templates",
          label: "Templates",
          icon: "layout",
          path: "/templates",
          description: "Reusable templates"
        },
        {
          id: "integrations",
          label: "Integrations",
          icon: "link",
          path: "/integrations",
          description: "Connected services",
          permission: "integrations"
        }
      ]
    }
  ];
  const filteredSections = navigationSections.map((section) => ({
    ...section,
    items: section.items.filter(
      (item) => !item.permission || permissions.includes(item.permission)
    )
  })).filter((section) => section.items.length > 0);
  return (0, import_jsx_runtime6.jsxs)(
    "nav",
    {
      className: cn(
        "flex flex-col h-full bg-blue-50 border-r border-blue-200 text-blue-900",
        responsive && "lg:w-80",
        "w-80",
        className
      ),
      "aria-label": "Consultant navigation",
      children: [
        (0, import_jsx_runtime6.jsx)("div", { className: "p-6 border-b border-blue-200", children: (0, import_jsx_runtime6.jsxs)("div", { className: "flex items-center space-x-4", children: [
          (0, import_jsx_runtime6.jsxs)("div", { className: "relative", children: [
            consultant.avatar ? (0, import_jsx_runtime6.jsx)(
              "img",
              {
                src: consultant.avatar,
                alt: consultant.name,
                className: "w-12 h-12 rounded-full border-2 border-blue-300"
              }
            ) : (0, import_jsx_runtime6.jsx)("div", { className: "w-12 h-12 bg-blue-200 rounded-full flex items-center justify-center border-2 border-blue-300", children: (0, import_jsx_runtime6.jsx)("span", { className: "text-lg font-semibold text-blue-700", children: consultant.name.charAt(0).toUpperCase() }) }),
            (0, import_jsx_runtime6.jsx)("div", { className: cn(
              "absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-white",
              getStatusColor(consultant.status)
            ) })
          ] }),
          (0, import_jsx_runtime6.jsxs)("div", { className: "flex-1 min-w-0", children: [
            (0, import_jsx_runtime6.jsx)("h2", { className: "text-lg font-semibold text-blue-900 truncate", children: consultant.name }),
            (0, import_jsx_runtime6.jsx)("p", { className: "text-sm text-blue-700 truncate", children: consultant.title }),
            (0, import_jsx_runtime6.jsxs)("div", { className: "flex flex-wrap gap-1 mt-1", children: [
              consultant.specialties.slice(0, 2).map((specialty) => (0, import_jsx_runtime6.jsx)(
                "span",
                {
                  className: "inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800",
                  children: specialty
                },
                specialty
              )),
              consultant.specialties.length > 2 && (0, import_jsx_runtime6.jsxs)("span", { className: "text-xs text-blue-600", children: [
                "+",
                consultant.specialties.length - 2,
                " more"
              ] })
            ] })
          ] })
        ] }) }),
        analytics && (0, import_jsx_runtime6.jsxs)("div", { className: "p-4 border-b border-blue-200", children: [
          (0, import_jsx_runtime6.jsx)("h3", { className: "text-sm font-medium text-blue-800 mb-3", children: "Quick Stats" }),
          (0, import_jsx_runtime6.jsxs)("div", { className: "grid grid-cols-2 gap-3", children: [
            (0, import_jsx_runtime6.jsxs)("div", { className: "bg-white p-3 rounded-md border border-blue-200", children: [
              (0, import_jsx_runtime6.jsx)("p", { className: "text-xs text-blue-600", children: "Active Clients" }),
              (0, import_jsx_runtime6.jsx)("p", { className: "text-lg font-semibold text-blue-900", children: analytics.activeClients })
            ] }),
            (0, import_jsx_runtime6.jsxs)("div", { className: "bg-white p-3 rounded-md border border-blue-200", children: [
              (0, import_jsx_runtime6.jsx)("p", { className: "text-xs text-blue-600", children: "This Month" }),
              (0, import_jsx_runtime6.jsxs)("p", { className: "text-lg font-semibold text-blue-900", children: [
                analytics.hoursThisMonth,
                "h"
              ] })
            ] }),
            (0, import_jsx_runtime6.jsxs)("div", { className: "bg-white p-3 rounded-md border border-blue-200", children: [
              (0, import_jsx_runtime6.jsx)("p", { className: "text-xs text-blue-600", children: "Revenue" }),
              (0, import_jsx_runtime6.jsxs)("p", { className: "text-lg font-semibold text-blue-900", children: [
                "$",
                analytics.totalRevenue.toLocaleString()
              ] })
            ] }),
            (0, import_jsx_runtime6.jsxs)("div", { className: "bg-white p-3 rounded-md border border-blue-200", children: [
              (0, import_jsx_runtime6.jsx)("p", { className: "text-xs text-blue-600", children: "Satisfaction" }),
              (0, import_jsx_runtime6.jsxs)("p", { className: "text-lg font-semibold text-blue-900", children: [
                analytics.clientSatisfaction,
                "%"
              ] })
            ] })
          ] })
        ] }),
        (0, import_jsx_runtime6.jsx)("div", { className: "flex-1 overflow-y-auto p-4 space-y-6", children: filteredSections.map((section) => (0, import_jsx_runtime6.jsxs)("div", { children: [
          section.expandable ? (0, import_jsx_runtime6.jsxs)(
            "button",
            {
              onClick: () => toggleSection(section.id),
              className: "w-full flex items-center justify-between mb-3 text-sm font-medium text-blue-800 hover:text-blue-900",
              children: [
                (0, import_jsx_runtime6.jsx)("span", { children: section.title }),
                (0, import_jsx_runtime6.jsx)("span", { className: cn(
                  "w-4 h-4 transition-transform duration-200",
                  expandedSections.has(section.id) && "transform rotate-90"
                ), children: (0, import_jsx_runtime6.jsx)("div", { className: "w-0 h-0 border-l-4 border-l-current border-y-2 border-y-transparent" }) })
              ]
            }
          ) : (0, import_jsx_runtime6.jsx)("h3", { className: "text-sm font-medium text-blue-800 mb-3", children: section.title }),
          (!section.expandable || expandedSections.has(section.id)) && (0, import_jsx_runtime6.jsx)("div", { className: "space-y-1", children: section.items.map((item) => (0, import_jsx_runtime6.jsxs)(
            "button",
            {
              onClick: () => handleNavigate(item.path, item.id),
              className: cn(
                "w-full flex items-center justify-between p-3 text-left rounded-lg transition-colors duration-200",
                "hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",
                activeSection === item.id ? "bg-blue-200 text-blue-900 font-medium" : "text-blue-800 hover:text-blue-900"
              ),
              "aria-label": item.label,
              children: [
                (0, import_jsx_runtime6.jsxs)("div", { className: "flex items-start space-x-3", children: [
                  (0, import_jsx_runtime6.jsx)("div", { className: "flex-shrink-0 w-5 h-5 mt-0.5", children: (0, import_jsx_runtime6.jsx)("div", { className: "w-5 h-5 bg-current opacity-60 rounded-sm" }) }),
                  (0, import_jsx_runtime6.jsxs)("div", { className: "flex-1 min-w-0", children: [
                    (0, import_jsx_runtime6.jsx)("p", { className: "text-sm font-medium truncate", children: item.label }),
                    (0, import_jsx_runtime6.jsx)("p", { className: "text-xs opacity-75 truncate", children: item.description })
                  ] })
                ] }),
                item.badge && item.badge > 0 && (0, import_jsx_runtime6.jsx)("span", { className: "inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-600 rounded-full ml-2", children: item.badge > 99 ? "99+" : item.badge })
              ]
            },
            item.id
          )) })
        ] }, section.id)) }),
        clients.length > 0 && (0, import_jsx_runtime6.jsxs)("div", { className: "border-t border-blue-200 p-4", children: [
          (0, import_jsx_runtime6.jsxs)("div", { className: "flex items-center justify-between mb-3", children: [
            (0, import_jsx_runtime6.jsx)("h3", { className: "text-sm font-medium text-blue-800", children: "Recent Clients" }),
            (0, import_jsx_runtime6.jsx)(
              "button",
              {
                onClick: () => handleNavigate("/clients", "clients-overview"),
                className: "text-xs text-blue-600 hover:text-blue-800",
                children: "View all"
              }
            )
          ] }),
          (0, import_jsx_runtime6.jsx)("div", { className: "space-y-2 max-h-40 overflow-y-auto", children: clients.slice(0, 4).map((client) => (0, import_jsx_runtime6.jsxs)(
            "button",
            {
              onClick: () => onClientSelect && onClientSelect(client),
              className: "w-full flex items-center space-x-3 p-2 text-left rounded-md hover:bg-blue-100 transition-colors duration-200",
              children: [
                client.avatar ? (0, import_jsx_runtime6.jsx)(
                  "img",
                  {
                    src: client.avatar,
                    alt: client.name,
                    className: "w-8 h-8 rounded-full"
                  }
                ) : (0, import_jsx_runtime6.jsx)("div", { className: "w-8 h-8 bg-blue-200 rounded-full flex items-center justify-center", children: (0, import_jsx_runtime6.jsx)("span", { className: "text-xs font-semibold text-blue-700", children: client.name.charAt(0).toUpperCase() }) }),
                (0, import_jsx_runtime6.jsxs)("div", { className: "flex-1 min-w-0", children: [
                  (0, import_jsx_runtime6.jsx)("p", { className: "text-sm font-medium text-blue-900 truncate", children: client.name }),
                  (0, import_jsx_runtime6.jsx)("p", { className: "text-xs text-blue-600 truncate", children: client.company })
                ] }),
                (0, import_jsx_runtime6.jsx)("span", { className: cn(
                  "inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium",
                  getClientPriorityColor(client.priority)
                ), children: client.priority })
              ]
            },
            client.id
          )) })
        ] }),
        activeWorkspaces.length > 0 && (0, import_jsx_runtime6.jsxs)("div", { className: "border-t border-blue-200 p-4", children: [
          (0, import_jsx_runtime6.jsxs)("div", { className: "flex items-center justify-between mb-3", children: [
            (0, import_jsx_runtime6.jsx)("h3", { className: "text-sm font-medium text-blue-800", children: "Active Workspaces" }),
            (0, import_jsx_runtime6.jsxs)("span", { className: "text-xs text-blue-600", children: [
              activeWorkspaces.length,
              " active"
            ] })
          ] }),
          (0, import_jsx_runtime6.jsx)("div", { className: "space-y-2 max-h-32 overflow-y-auto", children: activeWorkspaces.slice(0, 3).map((workspace) => (0, import_jsx_runtime6.jsxs)(
            "button",
            {
              onClick: () => onWorkspaceSelect && onWorkspaceSelect(workspace),
              className: "w-full flex items-center justify-between p-2 text-left rounded-md hover:bg-blue-100 transition-colors duration-200",
              children: [
                (0, import_jsx_runtime6.jsxs)("div", { className: "flex-1 min-w-0", children: [
                  (0, import_jsx_runtime6.jsx)("p", { className: "text-sm font-medium text-blue-900 truncate", children: workspace.name }),
                  (0, import_jsx_runtime6.jsxs)("p", { className: "text-xs text-blue-600", children: [
                    workspace.hoursLogged,
                    "h logged"
                  ] })
                ] }),
                (0, import_jsx_runtime6.jsxs)("div", { className: "text-right", children: [
                  (0, import_jsx_runtime6.jsxs)("p", { className: "text-xs font-medium text-blue-900", children: [
                    "$",
                    workspace.revenue.toLocaleString()
                  ] }),
                  (0, import_jsx_runtime6.jsx)("div", { className: cn(
                    "w-2 h-2 rounded-full",
                    workspace.status === "active" ? "bg-green-500" : workspace.status === "paused" ? "bg-yellow-500" : "bg-gray-400"
                  ) })
                ] })
              ]
            },
            workspace.id
          )) })
        ] })
      ]
    }
  );
};

// packages/layouts/src/components/SideNavigation.tsx
var import_react7 = __toESM(require_react());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var SideNavigation = ({
  context = "neutral",
  items,
  currentPath,
  onItemClick,
  collapsible = true,
  defaultCollapsed = false,
  onCollapseChange,
  permissions = [],
  responsive = true,
  className
}) => {
  const [collapsed, setCollapsed] = (0, import_react7.useState)(defaultCollapsed);
  const [expandedItems, setExpandedItems] = (0, import_react7.useState)(/* @__PURE__ */ new Set());
  const handleCollapseToggle = (0, import_react7.useCallback)(() => {
    const newCollapsed = !collapsed;
    setCollapsed(newCollapsed);
    onCollapseChange == null ? void 0 : onCollapseChange(newCollapsed);
  }, [collapsed, onCollapseChange]);
  const handleItemExpand = (0, import_react7.useCallback)((itemId) => {
    setExpandedItems((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(itemId)) {
        newSet.delete(itemId);
      } else {
        newSet.add(itemId);
      }
      return newSet;
    });
  }, []);
  const filterItems = (0, import_react7.useCallback)((items2) => {
    return items2.filter((item) => {
      if (item.permission && !permissions.includes(item.permission)) {
        return false;
      }
      if (item.workspaceContext && item.workspaceContext !== context) {
        return false;
      }
      return true;
    }).map((item) => ({
      ...item,
      children: item.children ? filterItems(item.children) : void 0
    }));
  }, [permissions, context]);
  const filteredItems = filterItems(items);
  const handleItemClick = (0, import_react7.useCallback)((item, event) => {
    event.preventDefault();
    if (item.disabled) return;
    if (item.children && item.children.length > 0) {
      handleItemExpand(item.id);
      return;
    }
    onItemClick == null ? void 0 : onItemClick(item);
  }, [onItemClick, handleItemExpand]);
  const isItemActive = (0, import_react7.useCallback)((item) => {
    if (item.active) return true;
    if (currentPath && item.path) {
      return currentPath === item.path || currentPath.startsWith(item.path + "/");
    }
    return false;
  }, [currentPath]);
  const renderNavigationItem = (0, import_react7.useCallback)((item, level = 0) => {
    const isActive = isItemActive(item);
    const isExpanded = expandedItems.has(item.id);
    const hasChildren = item.children && item.children.length > 0;
    return (0, import_jsx_runtime7.jsxs)("div", { className: "navigation-item", children: [
      (0, import_jsx_runtime7.jsxs)(
        "button",
        {
          onClick: (e) => handleItemClick(item, e),
          disabled: item.disabled,
          className: cn(
            "w-full flex items-center gap-3 px-3 py-2 text-left transition-colors duration-200",
            "hover:bg-gray-100 dark:hover:bg-gray-800",
            "focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset",
            {
              "bg-blue-50 text-blue-700 border-r-2 border-blue-700 dark:bg-blue-900/20 dark:text-blue-300": isActive,
              "text-gray-700 dark:text-gray-300": !isActive && !item.disabled,
              "text-gray-400 dark:text-gray-600 cursor-not-allowed": item.disabled,
              "pl-6": level > 0,
              "pl-9": level > 1
            },
            // Workspace context styling
            {
              "border-l-4 border-l-blue-500": context === "consultant" && isActive,
              "border-l-4 border-l-green-500": context === "client" && isActive,
              "border-l-4 border-l-purple-500": context === "admin" && isActive
            }
          ),
          "aria-expanded": hasChildren ? isExpanded : void 0,
          "aria-current": isActive ? "page" : void 0,
          children: [
            item.icon && !collapsed && (0, import_jsx_runtime7.jsx)(
              Icon,
              {
                name: item.icon,
                size: "sm",
                className: cn(
                  "flex-shrink-0",
                  {
                    "text-blue-700 dark:text-blue-300": isActive,
                    "text-gray-500 dark:text-gray-400": !isActive
                  }
                )
              }
            ),
            collapsed && item.icon && (0, import_jsx_runtime7.jsx)(
              Icon,
              {
                name: item.icon,
                size: "sm",
                className: cn(
                  "flex-shrink-0 mx-auto",
                  {
                    "text-blue-700 dark:text-blue-300": isActive,
                    "text-gray-500 dark:text-gray-400": !isActive
                  }
                )
              }
            ),
            !collapsed && (0, import_jsx_runtime7.jsxs)(import_jsx_runtime7.Fragment, { children: [
              (0, import_jsx_runtime7.jsx)("span", { className: "flex-1 truncate", children: item.label }),
              item.badge && item.badge > 0 && (0, import_jsx_runtime7.jsx)("span", { className: cn(
                "inline-flex items-center justify-center px-2 py-1 text-xs font-medium rounded-full",
                {
                  "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200": isActive,
                  "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200": !isActive
                }
              ), children: item.badge > 99 ? "99+" : item.badge }),
              hasChildren && (0, import_jsx_runtime7.jsx)(
                Icon,
                {
                  name: isExpanded ? "ChevronDown" : "ChevronRight",
                  size: "sm",
                  className: "flex-shrink-0 text-gray-400"
                }
              )
            ] })
          ]
        }
      ),
      hasChildren && isExpanded && !collapsed && (0, import_jsx_runtime7.jsx)("div", { className: "ml-3 border-l border-gray-200 dark:border-gray-700", children: item.children.map((child) => renderNavigationItem(child, level + 1)) })
    ] }, item.id);
  }, [collapsed, expandedItems, handleItemClick, isItemActive, context]);
  (0, import_react7.useEffect)(() => {
    if (!responsive) return;
    const handleResize = () => {
      if (window.innerWidth < 768) {
        setCollapsed(true);
      }
    };
    window.addEventListener("resize", handleResize);
    handleResize();
    return () => window.removeEventListener("resize", handleResize);
  }, [responsive]);
  return (0, import_jsx_runtime7.jsxs)(
    "nav",
    {
      className: cn(
        "flex flex-col bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700",
        "transition-all duration-300 ease-in-out",
        {
          "w-64": !collapsed,
          "w-16": collapsed
        },
        // Workspace context styling
        {
          "border-r-blue-200 dark:border-r-blue-800": context === "consultant",
          "border-r-green-200 dark:border-r-green-800": context === "client",
          "border-r-purple-200 dark:border-r-purple-800": context === "admin"
        },
        className
      ),
      role: "navigation",
      "aria-label": "Side navigation",
      children: [
        collapsible && (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center justify-between p-3 border-b border-gray-200 dark:border-gray-700", children: [
          !collapsed && (0, import_jsx_runtime7.jsx)("h2", { className: "text-sm font-semibold text-gray-900 dark:text-gray-100 truncate", children: "Navigation" }),
          (0, import_jsx_runtime7.jsx)(
            "button",
            {
              onClick: handleCollapseToggle,
              className: cn(
                "p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800",
                "focus:outline-none focus:ring-2 focus:ring-blue-500",
                {
                  "mx-auto": collapsed
                }
              ),
              "aria-label": collapsed ? "Expand navigation" : "Collapse navigation",
              children: (0, import_jsx_runtime7.jsx)(
                Icon,
                {
                  name: collapsed ? "ChevronRight" : "ChevronLeft",
                  size: "sm",
                  className: "text-gray-500 dark:text-gray-400"
                }
              )
            }
          )
        ] }),
        (0, import_jsx_runtime7.jsx)("div", { className: "flex-1 overflow-y-auto py-2", children: filteredItems.map((item) => renderNavigationItem(item)) }),
        (0, import_jsx_runtime7.jsx)("div", { className: "border-t border-gray-200 dark:border-gray-700 p-3", children: !collapsed ? (0, import_jsx_runtime7.jsxs)("div", { className: "text-xs text-gray-500 dark:text-gray-400 text-center", children: [
          context.charAt(0).toUpperCase() + context.slice(1),
          " Workspace"
        ] }) : (0, import_jsx_runtime7.jsx)("div", { className: "w-2 h-2 rounded-full bg-gray-400 mx-auto" }) })
      ]
    }
  );
};
var SideNavigation_default = SideNavigation;

// packages/layouts/src/components/MobileNav.tsx
var import_react8 = __toESM(require_react());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var MobileNav = ({
  context = "neutral",
  items,
  currentPath,
  onItemClick,
  workspaces = [],
  currentWorkspace,
  onWorkspaceChange,
  user,
  bottomSheet = false,
  swipeGestures = true,
  isOpen = false,
  onToggle,
  className
}) => {
  const [expandedItems, setExpandedItems] = (0, import_react8.useState)(/* @__PURE__ */ new Set());
  const [showWorkspaceSwitcher, setShowWorkspaceSwitcher] = (0, import_react8.useState)(false);
  const [touchStart, setTouchStart] = (0, import_react8.useState)(null);
  const [touchEnd, setTouchEnd] = (0, import_react8.useState)(null);
  const handleItemExpand = (0, import_react8.useCallback)((itemId) => {
    setExpandedItems((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(itemId)) {
        newSet.delete(itemId);
      } else {
        newSet.add(itemId);
      }
      return newSet;
    });
  }, []);
  const handleItemClick = (0, import_react8.useCallback)((item, event) => {
    event.preventDefault();
    if (item.disabled) return;
    if (item.children && item.children.length > 0) {
      handleItemExpand(item.id);
      return;
    }
    onItemClick == null ? void 0 : onItemClick(item);
    onToggle == null ? void 0 : onToggle(false);
  }, [onItemClick, handleItemExpand, onToggle]);
  const isItemActive = (0, import_react8.useCallback)((item) => {
    if (item.active) return true;
    if (currentPath && item.path) {
      return currentPath === item.path || currentPath.startsWith(item.path + "/");
    }
    return false;
  }, [currentPath]);
  const handleWorkspaceChange = (0, import_react8.useCallback)((workspace) => {
    onWorkspaceChange == null ? void 0 : onWorkspaceChange(workspace);
    setShowWorkspaceSwitcher(false);
  }, [onWorkspaceChange]);
  const minSwipeDistance = 50;
  const onTouchStart = (0, import_react8.useCallback)((e) => {
    if (!swipeGestures) return;
    setTouchEnd(null);
    setTouchStart(e.targetTouches[0].clientX);
  }, [swipeGestures]);
  const onTouchMove = (0, import_react8.useCallback)((e) => {
    if (!swipeGestures) return;
    setTouchEnd(e.targetTouches[0].clientX);
  }, [swipeGestures]);
  const onTouchEnd = (0, import_react8.useCallback)(() => {
    if (!swipeGestures || !touchStart || !touchEnd) return;
    const distance = touchStart - touchEnd;
    const isLeftSwipe = distance > minSwipeDistance;
    const isRightSwipe = distance < -minSwipeDistance;
    if (isLeftSwipe && isOpen) {
      onToggle == null ? void 0 : onToggle(false);
    } else if (isRightSwipe && !isOpen) {
      onToggle == null ? void 0 : onToggle(true);
    }
  }, [swipeGestures, touchStart, touchEnd, isOpen, onToggle, minSwipeDistance]);
  const handleBackdropClick = (0, import_react8.useCallback)(() => {
    onToggle == null ? void 0 : onToggle(false);
  }, [onToggle]);
  (0, import_react8.useEffect)(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }
    return () => {
      document.body.style.overflow = "";
    };
  }, [isOpen]);
  const renderNavigationItem = (0, import_react8.useCallback)((item, level = 0) => {
    const isActive = isItemActive(item);
    const isExpanded = expandedItems.has(item.id);
    const hasChildren = item.children && item.children.length > 0;
    return (0, import_jsx_runtime8.jsxs)("div", { className: "navigation-item", children: [
      (0, import_jsx_runtime8.jsxs)(
        "button",
        {
          onClick: (e) => handleItemClick(item, e),
          disabled: item.disabled,
          className: cn(
            "w-full flex items-center gap-4 px-4 py-3 text-left transition-colors duration-200",
            "hover:bg-gray-100 dark:hover:bg-gray-800",
            "focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset",
            "text-base font-medium",
            {
              "bg-blue-50 text-blue-700 border-r-4 border-blue-700 dark:bg-blue-900/20 dark:text-blue-300": isActive,
              "text-gray-700 dark:text-gray-300": !isActive && !item.disabled,
              "text-gray-400 dark:text-gray-600 cursor-not-allowed": item.disabled,
              "pl-8": level > 0,
              "pl-12": level > 1
            },
            // Workspace context styling
            {
              "border-r-blue-500": context === "consultant" && isActive,
              "border-r-green-500": context === "client" && isActive,
              "border-r-purple-500": context === "admin" && isActive
            }
          ),
          "aria-expanded": hasChildren ? isExpanded : void 0,
          "aria-current": isActive ? "page" : void 0,
          children: [
            item.icon && (0, import_jsx_runtime8.jsx)(
              Icon,
              {
                name: item.icon,
                size: "md",
                className: cn(
                  "flex-shrink-0",
                  {
                    "text-blue-700 dark:text-blue-300": isActive,
                    "text-gray-500 dark:text-gray-400": !isActive
                  }
                )
              }
            ),
            (0, import_jsx_runtime8.jsx)("span", { className: "flex-1 truncate", children: item.label }),
            item.badge && item.badge > 0 && (0, import_jsx_runtime8.jsx)("span", { className: cn(
              "inline-flex items-center justify-center px-2 py-1 text-xs font-medium rounded-full",
              {
                "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200": isActive,
                "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200": !isActive
              }
            ), children: item.badge > 99 ? "99+" : item.badge }),
            hasChildren && (0, import_jsx_runtime8.jsx)(
              Icon,
              {
                name: isExpanded ? "ChevronDown" : "ChevronRight",
                size: "sm",
                className: "flex-shrink-0 text-gray-400"
              }
            )
          ]
        }
      ),
      hasChildren && isExpanded && (0, import_jsx_runtime8.jsx)("div", { className: "border-l-2 border-gray-200 dark:border-gray-700 ml-6", children: item.children.map((child) => renderNavigationItem(child, level + 1)) })
    ] }, item.id);
  }, [expandedItems, handleItemClick, isItemActive, context]);
  if (!isOpen) return null;
  return (0, import_jsx_runtime8.jsxs)(import_jsx_runtime8.Fragment, { children: [
    (0, import_jsx_runtime8.jsx)(
      "div",
      {
        className: "fixed inset-0 bg-black bg-opacity-50 z-40",
        onClick: handleBackdropClick,
        "aria-hidden": "true"
      }
    ),
    (0, import_jsx_runtime8.jsxs)(
      "div",
      {
        className: cn(
          "fixed inset-y-0 left-0 z-50 w-80 max-w-sm bg-white dark:bg-gray-900",
          "transform transition-transform duration-300 ease-in-out",
          "flex flex-col shadow-xl",
          {
            "bottom-0 top-auto rounded-t-xl": bottomSheet
          },
          // Workspace context styling
          {
            "border-r-2 border-r-blue-200 dark:border-r-blue-800": context === "consultant",
            "border-r-2 border-r-green-200 dark:border-r-green-800": context === "client",
            "border-r-2 border-r-purple-200 dark:border-r-purple-800": context === "admin"
          },
          className
        ),
        onTouchStart,
        onTouchMove,
        onTouchEnd,
        role: "navigation",
        "aria-label": "Mobile navigation",
        children: [
          (0, import_jsx_runtime8.jsxs)("div", { className: "flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700", children: [
            (0, import_jsx_runtime8.jsxs)("div", { className: "flex items-center gap-3", children: [
              (0, import_jsx_runtime8.jsx)("div", { className: cn(
                "w-3 h-3 rounded-full",
                {
                  "bg-blue-500": context === "consultant",
                  "bg-green-500": context === "client",
                  "bg-purple-500": context === "admin",
                  "bg-gray-500": context === "neutral"
                }
              ) }),
              (0, import_jsx_runtime8.jsx)("h2", { className: "text-lg font-semibold text-gray-900 dark:text-gray-100", children: (currentWorkspace == null ? void 0 : currentWorkspace.name) || "Navigation" })
            ] }),
            (0, import_jsx_runtime8.jsx)(
              "button",
              {
                onClick: () => onToggle == null ? void 0 : onToggle(false),
                className: "p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500",
                "aria-label": "Close navigation",
                children: (0, import_jsx_runtime8.jsx)(Icon, { name: "X", size: "sm", className: "text-gray-500 dark:text-gray-400" })
              }
            )
          ] }),
          (user || workspaces.length > 0) && (0, import_jsx_runtime8.jsxs)("div", { className: "p-4 border-b border-gray-200 dark:border-gray-700", children: [
            user && (0, import_jsx_runtime8.jsxs)("div", { className: "flex items-center gap-3 mb-3", children: [
              (0, import_jsx_runtime8.jsx)("div", { className: "w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center", children: user.avatar ? (0, import_jsx_runtime8.jsx)("img", { src: user.avatar, alt: user.name, className: "w-8 h-8 rounded-full" }) : (0, import_jsx_runtime8.jsx)(Icon, { name: "User", size: "sm", className: "text-gray-600 dark:text-gray-300" }) }),
              (0, import_jsx_runtime8.jsxs)("div", { className: "flex-1 min-w-0", children: [
                (0, import_jsx_runtime8.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100 truncate", children: user.name }),
                (0, import_jsx_runtime8.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400 truncate", children: user.role })
              ] })
            ] }),
            workspaces.length > 0 && (0, import_jsx_runtime8.jsxs)(
              "button",
              {
                onClick: () => setShowWorkspaceSwitcher(!showWorkspaceSwitcher),
                className: "w-full flex items-center justify-between p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500",
                children: [
                  (0, import_jsx_runtime8.jsx)("span", { className: "text-sm font-medium text-gray-700 dark:text-gray-300", children: "Switch Workspace" }),
                  (0, import_jsx_runtime8.jsx)(
                    Icon,
                    {
                      name: showWorkspaceSwitcher ? "ChevronUp" : "ChevronDown",
                      size: "sm",
                      className: "text-gray-400"
                    }
                  )
                ]
              }
            ),
            showWorkspaceSwitcher && workspaces.length > 0 && (0, import_jsx_runtime8.jsx)("div", { className: "mt-2 space-y-1", children: workspaces.map((workspace) => (0, import_jsx_runtime8.jsxs)(
              "button",
              {
                onClick: () => handleWorkspaceChange(workspace),
                className: cn(
                  "w-full flex items-center gap-3 p-2 rounded-md text-left transition-colors",
                  "hover:bg-gray-100 dark:hover:bg-gray-800",
                  "focus:outline-none focus:ring-2 focus:ring-blue-500",
                  {
                    "bg-blue-50 text-blue-700 dark:bg-blue-900/20 dark:text-blue-300": (currentWorkspace == null ? void 0 : currentWorkspace.id) === workspace.id,
                    "text-gray-700 dark:text-gray-300": (currentWorkspace == null ? void 0 : currentWorkspace.id) !== workspace.id
                  }
                ),
                children: [
                  (0, import_jsx_runtime8.jsx)("div", { className: cn(
                    "w-2 h-2 rounded-full",
                    {
                      "bg-blue-500": workspace.type === "consultant",
                      "bg-green-500": workspace.type === "client",
                      "bg-purple-500": workspace.type === "admin"
                    }
                  ) }),
                  (0, import_jsx_runtime8.jsx)("span", { className: "text-sm font-medium truncate", children: workspace.name })
                ]
              },
              workspace.id
            )) })
          ] }),
          (0, import_jsx_runtime8.jsx)("div", { className: "flex-1 overflow-y-auto py-2", children: items.map((item) => renderNavigationItem(item)) }),
          (0, import_jsx_runtime8.jsxs)("div", { className: "border-t border-gray-200 dark:border-gray-700 p-4", children: [
            (0, import_jsx_runtime8.jsxs)("div", { className: "text-xs text-gray-500 dark:text-gray-400 text-center", children: [
              context.charAt(0).toUpperCase() + context.slice(1),
              " Workspace"
            ] }),
            swipeGestures && (0, import_jsx_runtime8.jsx)("div", { className: "text-xs text-gray-400 dark:text-gray-500 text-center mt-1", children: "Swipe left to close" })
          ] })
        ]
      }
    )
  ] });
};
var MobileNav_default = MobileNav;

// packages/layouts/src/components/data-display/ActivityFeed.tsx
var import_react9 = __toESM(require_react());

// packages/layouts/src/components/data-display/utils.ts
var getWorkspaceTheme = (context = "neutral") => {
  const themes = {
    consultant: {
      primary: "bg-blue-600 text-white",
      secondary: "bg-blue-50 text-blue-900 border-blue-200",
      accent: "text-blue-600",
      hover: "hover:bg-blue-50"
    },
    client: {
      primary: "bg-green-600 text-white",
      secondary: "bg-green-50 text-green-900 border-green-200",
      accent: "text-green-600",
      hover: "hover:bg-green-50"
    },
    admin: {
      primary: "bg-purple-600 text-white",
      secondary: "bg-purple-50 text-purple-900 border-purple-200",
      accent: "text-purple-600",
      hover: "hover:bg-purple-50"
    },
    expert: {
      primary: "bg-orange-600 text-white",
      secondary: "bg-orange-50 text-orange-900 border-orange-200",
      accent: "text-orange-600",
      hover: "hover:bg-orange-50"
    },
    "tool-creator": {
      primary: "bg-indigo-600 text-white",
      secondary: "bg-indigo-50 text-indigo-900 border-indigo-200",
      accent: "text-indigo-600",
      hover: "hover:bg-indigo-50"
    },
    founder: {
      primary: "bg-red-600 text-white",
      secondary: "bg-red-50 text-red-900 border-red-200",
      accent: "text-red-600",
      hover: "hover:bg-red-50"
    },
    neutral: {
      primary: "bg-gray-600 text-white",
      secondary: "bg-gray-50 text-gray-900 border-gray-200",
      accent: "text-gray-600",
      hover: "hover:bg-gray-50"
    }
  };
  return themes[context];
};
var hasPermission = (userPermissions = [], requiredPermission) => {
  if (!requiredPermission) return true;
  return userPermissions.includes(requiredPermission) || userPermissions.includes("*");
};
var filterColumnsByPermissions = (columns, userPermissions = [], context = "neutral") => {
  return columns.filter((column) => {
    if (!hasPermission(userPermissions, column.permission)) {
      return false;
    }
    if (column.workspaceContext && !column.workspaceContext.includes(context)) {
      return false;
    }
    if (column.hidden) {
      return false;
    }
    return true;
  });
};
var sortData = (data, field, direction) => {
  return [...data].sort((a, b) => {
    const aValue = getNestedValue(a, field);
    const bValue = getNestedValue(b, field);
    if (aValue === null || aValue === void 0) return direction === "asc" ? 1 : -1;
    if (bValue === null || bValue === void 0) return direction === "asc" ? -1 : 1;
    if (typeof aValue === "string" && typeof bValue === "string") {
      return direction === "asc" ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
    }
    if (typeof aValue === "number" && typeof bValue === "number") {
      return direction === "asc" ? aValue - bValue : bValue - aValue;
    }
    if (aValue instanceof Date && bValue instanceof Date) {
      return direction === "asc" ? aValue.getTime() - bValue.getTime() : bValue.getTime() - aValue.getTime();
    }
    const aStr = String(aValue);
    const bStr = String(bValue);
    return direction === "asc" ? aStr.localeCompare(bStr) : bStr.localeCompare(aStr);
  });
};
var filterData = (data, filters, searchTerm) => {
  let filteredData = [...data];
  if (searchTerm && searchTerm.trim()) {
    const searchLower = searchTerm.toLowerCase();
    filteredData = filteredData.filter(
      (item) => Object.values(item).some(
        (value) => String(value).toLowerCase().includes(searchLower)
      )
    );
  }
  Object.entries(filters).forEach(([field, filterValue]) => {
    if (filterValue !== void 0 && filterValue !== null && filterValue !== "") {
      filteredData = filteredData.filter((item) => {
        const itemValue = getNestedValue(item, field);
        if (Array.isArray(filterValue)) {
          return filterValue.includes(itemValue);
        }
        if (typeof filterValue === "string") {
          return String(itemValue).toLowerCase().includes(filterValue.toLowerCase());
        }
        return itemValue === filterValue;
      });
    }
  });
  return filteredData;
};
var getNestedValue = (obj, path) => {
  return path.split(".").reduce((current, key) => current == null ? void 0 : current[key], obj);
};
var paginateData = (data, page, pageSize) => {
  const startIndex = (page - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  return {
    data: data.slice(startIndex, endIndex),
    total: data.length,
    totalPages: Math.ceil(data.length / pageSize)
  };
};
var getRowKey = (row, getRowKey2) => {
  if (getRowKey2) return getRowKey2(row);
  if (typeof row === "object" && row !== null && "id" in row) {
    return String(row.id);
  }
  return JSON.stringify(row);
};
var toggleSelection = (selectedKeys, key, type = "checkbox") => {
  if (type === "radio") {
    return [key];
  }
  const index = selectedKeys.indexOf(key);
  if (index > -1) {
    return selectedKeys.filter((k) => k !== key);
  } else {
    return [...selectedKeys, key];
  }
};
var calculateVirtualItems = (totalItems, itemHeight, containerHeight, scrollTop, overscan = 5) => {
  const visibleStart = Math.floor(scrollTop / itemHeight);
  const visibleEnd = Math.min(
    totalItems - 1,
    Math.ceil((scrollTop + containerHeight) / itemHeight)
  );
  const start = Math.max(0, visibleStart - overscan);
  const end = Math.min(totalItems - 1, visibleEnd + overscan);
  return {
    start,
    end,
    visibleStart,
    visibleEnd,
    totalHeight: totalItems * itemHeight,
    offsetY: start * itemHeight
  };
};
var getAriaSort = (columnKey, sortField, sortDirection) => {
  if (sortField !== columnKey) return "none";
  return sortDirection === "asc" ? "ascending" : "descending";
};
var debounce = (func, wait) => {
  let timeout;
  return (...args) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
};
var formatCellValue = (value, column) => {
  if (value === null || value === void 0) return "";
  if (column.render) {
    return String(value);
  }
  if (value instanceof Date) {
    return value.toLocaleDateString();
  }
  if (typeof value === "number") {
    return value.toLocaleString();
  }
  if (typeof value === "boolean") {
    return value ? "Yes" : "No";
  }
  return String(value);
};

// packages/layouts/src/components/data-display/ActivityFeed.tsx
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var ActivityFeed = ({
  activities,
  loading = false,
  context = "neutral",
  permissions = [],
  grouped = false,
  onActivityClick,
  onUserClick,
  realTimeUpdates = false,
  onNewActivity,
  userFilters = [],
  typeFilters = [],
  onFilterChange,
  infiniteScroll = false,
  onLoadMore,
  hasMore = false,
  maxHeight,
  showAvatars = true,
  showTimestamps = true,
  className = "",
  style
}) => {
  const [activeFilters, setActiveFilters] = (0, import_react9.useState)({});
  const theme = getWorkspaceTheme(context);
  const filteredActivities = (0, import_react9.useMemo)(() => {
    let filtered = activities;
    if (activeFilters.users && activeFilters.users.length > 0) {
      filtered = filtered.filter(
        (activity) => activeFilters.users.includes(activity.user.id)
      );
    }
    if (activeFilters.types && activeFilters.types.length > 0) {
      filtered = filtered.filter(
        (activity) => activeFilters.types.includes(activity.type)
      );
    }
    if (activeFilters.dateRange) {
      filtered = filtered.filter((activity) => {
        const activityDate = new Date(activity.timestamp);
        return activityDate >= activeFilters.dateRange.start && activityDate <= activeFilters.dateRange.end;
      });
    }
    if (activeFilters.unreadOnly) {
      filtered = filtered.filter((activity) => !activity.read);
    }
    return filtered;
  }, [activities, activeFilters]);
  const groupedActivities = (0, import_react9.useMemo)(() => {
    if (!grouped) {
      return { "All Activities": filteredActivities };
    }
    const groups = {};
    filteredActivities.forEach((activity) => {
      const date = new Date(activity.timestamp);
      const today = /* @__PURE__ */ new Date();
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);
      let groupKey;
      if (date.toDateString() === today.toDateString()) {
        groupKey = "Today";
      } else if (date.toDateString() === yesterday.toDateString()) {
        groupKey = "Yesterday";
      } else {
        groupKey = date.toLocaleDateString();
      }
      if (!groups[groupKey]) {
        groups[groupKey] = [];
      }
      groups[groupKey].push(activity);
    });
    Object.keys(groups).forEach((key) => {
      groups[key].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
    });
    return groups;
  }, [filteredActivities, grouped]);
  const handleFilterChange = (0, import_react9.useCallback)((newFilters) => {
    setActiveFilters(newFilters);
    onFilterChange == null ? void 0 : onFilterChange(newFilters);
  }, [onFilterChange]);
  const handleActivityClick = (0, import_react9.useCallback)((activity) => {
    onActivityClick == null ? void 0 : onActivityClick(activity);
  }, [onActivityClick]);
  const handleUserClick = (0, import_react9.useCallback)((user) => {
    onUserClick == null ? void 0 : onUserClick(user);
  }, [onUserClick]);
  import_react9.default.useEffect(() => {
    if (realTimeUpdates && onNewActivity) {
      const handleNewActivity = (activity) => {
        onNewActivity(activity);
      };
      return () => {
      };
    }
  }, [realTimeUpdates, onNewActivity]);
  const renderActivityIcon = (activity) => {
    const typeIcons = {
      create: "➕",
      update: "✏️",
      delete: "🗑️",
      comment: "💬",
      like: "👍",
      share: "🔗",
      view: "👁️",
      download: "⬇️",
      upload: "⬆️",
      login: "🔑",
      logout: "🚪",
      error: "❌",
      warning: "⚠️",
      success: "✅",
      info: "ℹ️"
    };
    const typeColors = {
      create: "bg-green-500",
      update: "bg-blue-500",
      delete: "bg-red-500",
      comment: "bg-purple-500",
      like: "bg-pink-500",
      share: "bg-indigo-500",
      view: "bg-gray-500",
      download: "bg-teal-500",
      upload: "bg-orange-500",
      login: "bg-emerald-500",
      logout: "bg-slate-500",
      error: "bg-red-500",
      warning: "bg-yellow-500",
      success: "bg-green-500",
      info: "bg-blue-500"
    };
    return (0, import_jsx_runtime9.jsx)(
      "div",
      {
        className: `
          w-8 h-8 rounded-full flex items-center justify-center text-white text-sm
          ${typeColors[activity.type] || theme.primary}
        `,
        children: typeIcons[activity.type] || "•"
      }
    );
  };
  const formatTimestamp = (timestamp) => {
    const date = new Date(timestamp);
    const now = /* @__PURE__ */ new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / 6e4);
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);
    if (diffMins < 1) return "Just now";
    if (diffMins < 60) return `${diffMins}m ago`;
    if (diffHours < 24) return `${diffHours}h ago`;
    if (diffDays < 7) return `${diffDays}d ago`;
    return date.toLocaleDateString();
  };
  const renderActivity = (activity) => {
    const canView = !activity.workspaceContext || activity.workspaceContext === context || permissions.includes("view_all_activities");
    if (!canView) return null;
    return (0, import_jsx_runtime9.jsxs)(
      "div",
      {
        className: `
          flex gap-3 p-3 rounded-lg transition-colors
          ${onActivityClick ? "cursor-pointer hover:bg-gray-50" : ""}
          ${!activity.read ? "bg-blue-50 border-l-4 border-blue-500" : ""}
        `,
        onClick: () => handleActivityClick(activity),
        children: [
          (0, import_jsx_runtime9.jsx)("div", { className: "flex-shrink-0", children: renderActivityIcon(activity) }),
          (0, import_jsx_runtime9.jsxs)("div", { className: "flex-1 min-w-0", children: [
            (0, import_jsx_runtime9.jsxs)("div", { className: "flex items-start justify-between gap-2", children: [
              (0, import_jsx_runtime9.jsxs)("div", { className: "flex-1 min-w-0", children: [
                (0, import_jsx_runtime9.jsx)("p", { className: "text-gray-900 text-sm font-medium", children: activity.title }),
                activity.description && (0, import_jsx_runtime9.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: activity.description }),
                (0, import_jsx_runtime9.jsxs)("div", { className: "flex items-center gap-3 mt-2 text-xs text-gray-500", children: [
                  showTimestamps && (0, import_jsx_runtime9.jsx)("span", { children: formatTimestamp(activity.timestamp) }),
                  showAvatars && activity.user && (0, import_jsx_runtime9.jsxs)(
                    "div",
                    {
                      className: "flex items-center gap-1 cursor-pointer hover:text-gray-700",
                      onClick: (e) => {
                        e.stopPropagation();
                        handleUserClick(activity.user);
                      },
                      children: [
                        activity.user.avatar && (0, import_jsx_runtime9.jsx)(
                          Avatar,
                          {
                            src: activity.user.avatar,
                            alt: activity.user.name,
                            size: "xs"
                          }
                        ),
                        (0, import_jsx_runtime9.jsx)("span", { children: activity.user.name }),
                        activity.user.role && (0, import_jsx_runtime9.jsxs)("span", { className: "text-gray-400", children: [
                          "(",
                          activity.user.role,
                          ")"
                        ] })
                      ]
                    }
                  ),
                  (0, import_jsx_runtime9.jsx)("span", { className: "capitalize", children: activity.type.replace(/_/g, " ") }),
                  activity.target && (0, import_jsx_runtime9.jsxs)("span", { children: [
                    "→ ",
                    activity.target.name
                  ] })
                ] })
              ] }),
              !activity.read && (0, import_jsx_runtime9.jsx)("div", { className: "w-2 h-2 bg-blue-500 rounded-full flex-shrink-0 mt-1" })
            ] }),
            activity.metadata && Object.keys(activity.metadata).length > 0 && (0, import_jsx_runtime9.jsx)("div", { className: "mt-2 pt-2 border-t border-gray-100", children: (0, import_jsx_runtime9.jsx)("div", { className: "grid grid-cols-2 gap-2 text-xs", children: Object.entries(activity.metadata).slice(0, 4).map(([key, value]) => (0, import_jsx_runtime9.jsxs)("div", { children: [
              (0, import_jsx_runtime9.jsxs)("span", { className: "font-medium text-gray-600", children: [
                key.replace(/_/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
                ":"
              ] }),
              (0, import_jsx_runtime9.jsx)("span", { className: "ml-1 text-gray-900", children: typeof value === "object" ? JSON.stringify(value) : String(value) })
            ] }, key)) }) })
          ] })
        ]
      },
      activity.id
    );
  };
  const renderGroup = (groupKey, groupActivities) => {
    return (0, import_jsx_runtime9.jsxs)("div", { className: "mb-4", children: [
      grouped && (0, import_jsx_runtime9.jsxs)("div", { className: "flex items-center justify-between mb-3 px-3", children: [
        (0, import_jsx_runtime9.jsx)("h3", { className: "font-semibold text-gray-900 text-sm", children: groupKey }),
        (0, import_jsx_runtime9.jsxs)("span", { className: "text-xs text-gray-500", children: [
          groupActivities.length,
          " activit",
          groupActivities.length !== 1 ? "ies" : "y"
        ] })
      ] }),
      (0, import_jsx_runtime9.jsx)("div", { className: "space-y-1", children: groupActivities.map((activity) => renderActivity(activity)) })
    ] }, groupKey);
  };
  if (loading) {
    return (0, import_jsx_runtime9.jsxs)("div", { className: "flex items-center justify-center p-8", children: [
      (0, import_jsx_runtime9.jsx)(Spinner, { size: "lg" }),
      (0, import_jsx_runtime9.jsx)("span", { className: "ml-2 text-gray-600", children: "Loading activities..." })
    ] });
  }
  if (filteredActivities.length === 0) {
    return (0, import_jsx_runtime9.jsx)(
      EmptyState,
      {
        title: "No activities found",
        description: Object.keys(activeFilters).length > 0 ? "No activities match your current filters." : "There are no activities to display.",
        actions: Object.keys(activeFilters).length > 0 ? (0, import_jsx_runtime9.jsx)(Button, { onClick: () => handleFilterChange({}), children: "Clear filters" }) : void 0
      }
    );
  }
  return (0, import_jsx_runtime9.jsxs)("div", { className: `${className}`, style, children: [
    (userFilters.length > 0 || typeFilters.length > 0) && (0, import_jsx_runtime9.jsxs)("div", { className: "mb-4 p-3 bg-gray-50 rounded-lg", children: [
      (0, import_jsx_runtime9.jsx)("h4", { className: "font-medium text-gray-900 mb-2 text-sm", children: "Filters" }),
      (0, import_jsx_runtime9.jsxs)("div", { className: "space-y-2", children: [
        userFilters.length > 0 && (0, import_jsx_runtime9.jsxs)("div", { children: [
          (0, import_jsx_runtime9.jsx)("span", { className: "text-xs text-gray-600 mb-1 block", children: "Users:" }),
          (0, import_jsx_runtime9.jsx)("div", { className: "flex flex-wrap gap-1", children: userFilters.map((user) => {
            var _a;
            return (0, import_jsx_runtime9.jsx)(
              Button,
              {
                variant: ((_a = activeFilters.users) == null ? void 0 : _a.includes(user.id)) ? "primary" : "outline",
                size: "sm",
                onClick: () => {
                  const currentUsers = activeFilters.users || [];
                  const isActive = currentUsers.includes(user.id);
                  const newUsers = isActive ? currentUsers.filter((id) => id !== user.id) : [...currentUsers, user.id];
                  handleFilterChange({
                    ...activeFilters,
                    users: newUsers.length > 0 ? newUsers : void 0
                  });
                },
                children: user.name
              },
              user.id
            );
          }) })
        ] }),
        typeFilters.length > 0 && (0, import_jsx_runtime9.jsxs)("div", { children: [
          (0, import_jsx_runtime9.jsx)("span", { className: "text-xs text-gray-600 mb-1 block", children: "Types:" }),
          (0, import_jsx_runtime9.jsx)("div", { className: "flex flex-wrap gap-1", children: typeFilters.map((type) => {
            var _a;
            return (0, import_jsx_runtime9.jsx)(
              Button,
              {
                variant: ((_a = activeFilters.types) == null ? void 0 : _a.includes(type)) ? "primary" : "outline",
                size: "sm",
                onClick: () => {
                  const currentTypes = activeFilters.types || [];
                  const isActive = currentTypes.includes(type);
                  const newTypes = isActive ? currentTypes.filter((t) => t !== type) : [...currentTypes, type];
                  handleFilterChange({
                    ...activeFilters,
                    types: newTypes.length > 0 ? newTypes : void 0
                  });
                },
                children: type.replace(/_/g, " ").replace(/\b\w/g, (l) => l.toUpperCase())
              },
              type
            );
          }) })
        ] }),
        (0, import_jsx_runtime9.jsx)("div", { children: (0, import_jsx_runtime9.jsx)(
          Button,
          {
            variant: activeFilters.unreadOnly ? "primary" : "outline",
            size: "sm",
            onClick: () => {
              handleFilterChange({
                ...activeFilters,
                unreadOnly: !activeFilters.unreadOnly
              });
            },
            children: "Unread only"
          }
        ) })
      ] }),
      Object.keys(activeFilters).length > 0 && (0, import_jsx_runtime9.jsx)("div", { className: "mt-2 pt-2 border-t border-gray-200", children: (0, import_jsx_runtime9.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          onClick: () => handleFilterChange({}),
          children: "Clear all filters"
        }
      ) })
    ] }),
    (0, import_jsx_runtime9.jsxs)(
      "div",
      {
        className: `
          bg-white border border-gray-200 rounded-lg
          ${maxHeight ? "overflow-y-auto" : ""}
        `,
        style: { maxHeight },
        children: [
          Object.entries(groupedActivities).map(
            ([groupKey, groupActivities]) => renderGroup(groupKey, groupActivities)
          ),
          infiniteScroll && hasMore && (0, import_jsx_runtime9.jsx)("div", { className: "p-4 text-center", children: (0, import_jsx_runtime9.jsx)(
            Button,
            {
              variant: "outline",
              onClick: onLoadMore,
              disabled: loading,
              children: loading ? "Loading..." : "Load more"
            }
          ) })
        ]
      }
    ),
    realTimeUpdates && (0, import_jsx_runtime9.jsxs)("div", { className: "mt-3 flex items-center justify-center text-xs text-gray-500", children: [
      (0, import_jsx_runtime9.jsx)("div", { className: "w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2" }),
      "Live updates enabled"
    ] })
  ] });
};

// packages/layouts/src/components/data-display/CardGrid.tsx
var import_react10 = __toESM(require_react());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var CardGrid = ({
  data,
  loading = false,
  context = "neutral",
  permissions = [],
  columns = "auto",
  gap = "md",
  itemHeight = "auto",
  renderCard,
  minCardWidth = 280,
  maxCardWidth = 400,
  aspectRatio,
  pagination,
  filtering,
  selection,
  virtualScrolling,
  sortable = false,
  sortOptions = [],
  onSort,
  draggable = false,
  onDragStart,
  onDragEnd,
  masonry = false,
  masonryBreakpoints,
  onItemClick,
  onItemDoubleClick,
  infiniteScroll = false,
  onLoadMore,
  hasMore = false,
  responsive = true,
  className = "",
  style
}) => {
  const [searchTerm, setSearchTerm] = (0, import_react10.useState)("");
  const [selectedKeys, setSelectedKeys] = (0, import_react10.useState)((selection == null ? void 0 : selection.selectedKeys) || []);
  const [currentPage, setCurrentPage] = (0, import_react10.useState)((pagination == null ? void 0 : pagination.page) || 1);
  const [pageSize, setPageSize] = (0, import_react10.useState)((pagination == null ? void 0 : pagination.pageSize) || 12);
  const [scrollTop, setScrollTop] = (0, import_react10.useState)(0);
  const [sortKey, setSortKey] = (0, import_react10.useState)("");
  const [sortDirection, setSortDirection] = (0, import_react10.useState)("asc");
  const [draggedItem, setDraggedItem] = (0, import_react10.useState)(null);
  const gridRef = (0, import_react10.useRef)(null);
  const observerRef = (0, import_react10.useRef)(null);
  const loadMoreRef = (0, import_react10.useRef)(null);
  const theme = getWorkspaceTheme(context);
  const debouncedSearch = (0, import_react10.useCallback)(
    debounce((term) => {
      setSearchTerm(term);
      setCurrentPage(1);
      if (filtering == null ? void 0 : filtering.onSearch) {
        filtering.onSearch(term);
      }
    }, 300),
    [filtering]
  );
  const processedData = (0, import_react10.useMemo)(() => {
    let result = [...data];
    if ((filtering == null ? void 0 : filtering.enabled) !== false && searchTerm) {
      result = filterData(result, {}, searchTerm);
    }
    if (sortKey && onSort) {
      onSort(sortKey, sortDirection);
    } else if (sortKey) {
      result.sort((a, b) => {
        const aValue = a[sortKey];
        const bValue = b[sortKey];
        if (aValue < bValue) return sortDirection === "asc" ? -1 : 1;
        if (aValue > bValue) return sortDirection === "asc" ? 1 : -1;
        return 0;
      });
    }
    if ((pagination == null ? void 0 : pagination.enabled) !== false && !(virtualScrolling == null ? void 0 : virtualScrolling.enabled) && !infiniteScroll) {
      const paginatedResult = paginateData(result, currentPage, pageSize);
      return {
        data: paginatedResult.data,
        total: paginatedResult.total,
        totalPages: paginatedResult.totalPages,
        filteredTotal: result.length
      };
    }
    return {
      data: result,
      total: result.length,
      totalPages: 1,
      filteredTotal: result.length
    };
  }, [data, searchTerm, sortKey, sortDirection, currentPage, pageSize, filtering, pagination, virtualScrolling, infiniteScroll, onSort]);
  const gridConfig = (0, import_react10.useMemo)(() => {
    if (typeof columns === "number") {
      return {
        columns: `repeat(${columns}, 1fr)`,
        autoFit: false
      };
    }
    const gapSize = gap === "sm" ? 8 : gap === "md" ? 16 : gap === "lg" ? 24 : typeof gap === "number" ? gap : 16;
    if (masonry) {
      return {
        columns: "auto",
        autoFit: true,
        gap: gapSize,
        masonry: true
      };
    }
    return {
      columns: `repeat(auto-fit, minmax(${minCardWidth}px, 1fr))`,
      autoFit: true,
      gap: gapSize
    };
  }, [columns, gap, minCardWidth, masonry]);
  const virtualItems = (0, import_react10.useMemo)(() => {
    if (!(virtualScrolling == null ? void 0 : virtualScrolling.enabled) || !gridRef.current || itemHeight === "auto") {
      return null;
    }
    const containerHeight = gridRef.current.clientHeight;
    const itemHeightNum = typeof itemHeight === "number" ? itemHeight : 200;
    return calculateVirtualItems(
      processedData.data.length,
      itemHeightNum,
      containerHeight,
      scrollTop,
      virtualScrolling.overscan
    );
  }, [virtualScrolling, processedData.data.length, scrollTop, itemHeight]);
  const handleItemSelection = (0, import_react10.useCallback)((itemKey) => {
    if (!(selection == null ? void 0 : selection.enabled)) return;
    const newSelectedKeys = toggleSelection(selectedKeys, itemKey, selection.type);
    setSelectedKeys(newSelectedKeys);
    if (selection.onSelectionChange) {
      const selectedItems = processedData.data.filter(
        (item) => newSelectedKeys.includes(getRowKey(item, selection.getRowKey))
      );
      selection.onSelectionChange(newSelectedKeys, selectedItems);
    }
  }, [selectedKeys, selection, processedData.data]);
  const handleItemClick = (0, import_react10.useCallback)((item, index) => {
    onItemClick == null ? void 0 : onItemClick(item, index);
  }, [onItemClick]);
  const handleItemDoubleClick = (0, import_react10.useCallback)((item, index) => {
    onItemDoubleClick == null ? void 0 : onItemDoubleClick(item, index);
  }, [onItemDoubleClick]);
  const handleSort = (0, import_react10.useCallback)((newSortKey) => {
    const newDirection = sortKey === newSortKey && sortDirection === "asc" ? "desc" : "asc";
    setSortKey(newSortKey);
    setSortDirection(newDirection);
  }, [sortKey, sortDirection]);
  const handleDragStart = (0, import_react10.useCallback)((item, index) => {
    if (!draggable) return;
    setDraggedItem({ item, index });
    onDragStart == null ? void 0 : onDragStart(item, index);
  }, [draggable, onDragStart]);
  const handleDragEnd = (0, import_react10.useCallback)((item, fromIndex, toIndex) => {
    if (!draggable) return;
    setDraggedItem(null);
    onDragEnd == null ? void 0 : onDragEnd(item, fromIndex, toIndex);
  }, [draggable, onDragEnd]);
  const handleScroll = (0, import_react10.useCallback)((e) => {
    if (virtualScrolling == null ? void 0 : virtualScrolling.enabled) {
      setScrollTop(e.currentTarget.scrollTop);
      if (virtualScrolling.onScroll) {
        virtualScrolling.onScroll(e.currentTarget.scrollTop);
      }
    }
  }, [virtualScrolling]);
  import_react10.default.useEffect(() => {
    if (!infiniteScroll || !loadMoreRef.current || !hasMore) return;
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && onLoadMore) {
          onLoadMore();
        }
      },
      { threshold: 0.1 }
    );
    observer.observe(loadMoreRef.current);
    observerRef.current = observer;
    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, [infiniteScroll, hasMore, onLoadMore]);
  const gapClasses = {
    sm: "gap-2",
    md: "gap-4",
    lg: "gap-6"
  };
  const gapClass = typeof gap === "string" ? gapClasses[gap] : "";
  const renderGridItem = (item, index) => {
    const itemKey = getRowKey(item, selection == null ? void 0 : selection.getRowKey);
    const isSelected = selectedKeys.includes(itemKey);
    const isDragged = (draggedItem == null ? void 0 : draggedItem.item) === item;
    return (0, import_jsx_runtime10.jsx)(
      "div",
      {
        className: `
          ${responsive ? "w-full" : ""}
          ${onItemClick ? "cursor-pointer" : ""}
          ${isDragged ? "opacity-50" : ""}
          ${isSelected ? "ring-2 ring-blue-500" : ""}
          transition-all duration-150 hover:scale-[1.02]
        `,
        style: {
          height: itemHeight === "auto" ? "auto" : itemHeight,
          maxWidth: maxCardWidth,
          aspectRatio: aspectRatio ? `${aspectRatio}` : void 0
        },
        draggable,
        onDragStart: () => handleDragStart(item, index),
        onDragEnd: () => handleDragEnd(item, (draggedItem == null ? void 0 : draggedItem.index) || 0, index),
        onClick: () => handleItemClick(item, index),
        onDoubleClick: () => handleItemDoubleClick(item, index),
        children: (0, import_jsx_runtime10.jsxs)("div", { className: "relative h-full", children: [
          (selection == null ? void 0 : selection.enabled) && (0, import_jsx_runtime10.jsx)("div", { className: "absolute top-2 right-2 z-10", children: (0, import_jsx_runtime10.jsx)(
            "input",
            {
              type: selection.type === "radio" ? "radio" : "checkbox",
              checked: isSelected,
              onChange: () => handleItemSelection(itemKey),
              className: "w-4 h-4",
              onClick: (e) => e.stopPropagation()
            }
          ) }),
          renderCard(item, index, context)
        ] })
      },
      itemKey
    );
  };
  const renderVirtualizedGrid = () => {
    if (!virtualItems) return null;
    const { start, end, totalHeight, offsetY } = virtualItems;
    const visibleItems = processedData.data.slice(start, end + 1);
    return (0, import_jsx_runtime10.jsx)("div", { style: { height: totalHeight, position: "relative" }, children: (0, import_jsx_runtime10.jsx)("div", { style: { transform: `translateY(${offsetY}px)` }, children: (0, import_jsx_runtime10.jsx)(
      "div",
      {
        className: `grid ${gapClass}`,
        style: {
          gridTemplateColumns: gridConfig.columns,
          gap: typeof gap === "number" ? `${gap}px` : void 0
        },
        children: visibleItems.map((item, index) => renderGridItem(item, start + index))
      }
    ) }) });
  };
  const renderMasonryGrid = () => (0, import_jsx_runtime10.jsx)(
    "div",
    {
      className: "columns-1 sm:columns-2 md:columns-3 lg:columns-4 xl:columns-5",
      style: {
        columnGap: typeof gap === "number" ? `${gap}px` : void 0
      },
      children: processedData.data.map((item, index) => (0, import_jsx_runtime10.jsx)("div", { className: "break-inside-avoid mb-4", children: renderGridItem(item, index) }, getRowKey(item, selection == null ? void 0 : selection.getRowKey)))
    }
  );
  const renderRegularGrid = () => (0, import_jsx_runtime10.jsx)(
    "div",
    {
      className: `grid ${gapClass}`,
      style: {
        gridTemplateColumns: gridConfig.columns,
        gap: typeof gap === "number" ? `${gap}px` : void 0
      },
      children: processedData.data.map((item, index) => renderGridItem(item, index))
    }
  );
  if (loading) {
    return (0, import_jsx_runtime10.jsxs)("div", { className: "flex items-center justify-center p-8", children: [
      (0, import_jsx_runtime10.jsx)(Spinner, { size: "lg" }),
      (0, import_jsx_runtime10.jsx)("span", { className: "ml-2 text-gray-600", children: "Loading..." })
    ] });
  }
  if (processedData.data.length === 0) {
    return (0, import_jsx_runtime10.jsx)(
      EmptyState,
      {
        title: "No items found",
        description: searchTerm ? "No results found for your search." : "There are no items to display.",
        actions: searchTerm ? (0, import_jsx_runtime10.jsx)(
          "button",
          {
            onClick: () => setSearchTerm(""),
            className: `px-4 py-2 rounded-md ${theme.primary} hover:opacity-90 transition-opacity`,
            children: "Clear search"
          }
        ) : void 0
      }
    );
  }
  return (0, import_jsx_runtime10.jsxs)("div", { className: `${className}`, style, children: [
    ((filtering == null ? void 0 : filtering.enabled) !== false || sortable || selectedKeys.length > 0) && (0, import_jsx_runtime10.jsx)("div", { className: "mb-6 space-y-4", children: (0, import_jsx_runtime10.jsxs)("div", { className: "flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4", children: [
      (0, import_jsx_runtime10.jsxs)("div", { className: "flex items-center gap-4 flex-1", children: [
        (filtering == null ? void 0 : filtering.enabled) !== false && (0, import_jsx_runtime10.jsx)("div", { className: "flex-1 max-w-md", children: (0, import_jsx_runtime10.jsx)(
          "input",
          {
            type: "text",
            placeholder: (filtering == null ? void 0 : filtering.searchPlaceholder) || "Search items...",
            onChange: (e) => debouncedSearch(e.target.value),
            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          }
        ) }),
        sortable && sortOptions.length > 0 && (0, import_jsx_runtime10.jsxs)("div", { className: "flex items-center gap-2", children: [
          (0, import_jsx_runtime10.jsx)("label", { className: "text-sm font-medium text-gray-700", children: "Sort by:" }),
          (0, import_jsx_runtime10.jsxs)(
            "select",
            {
              value: sortKey,
              onChange: (e) => handleSort(e.target.value),
              className: "px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
              children: [
                (0, import_jsx_runtime10.jsx)("option", { value: "", children: "Default" }),
                sortOptions.map((option) => (0, import_jsx_runtime10.jsx)("option", { value: option.key, children: option.label }, option.key))
              ]
            }
          ),
          sortKey && (0, import_jsx_runtime10.jsx)(
            "button",
            {
              onClick: () => setSortDirection(sortDirection === "asc" ? "desc" : "asc"),
              className: "p-2 text-gray-500 hover:text-gray-700",
              title: `Sort ${sortDirection === "asc" ? "descending" : "ascending"}`,
              children: sortDirection === "asc" ? "↑" : "↓"
            }
          )
        ] })
      ] }),
      selectedKeys.length > 0 && (0, import_jsx_runtime10.jsxs)("div", { className: "text-sm text-gray-600", children: [
        selectedKeys.length,
        " selected"
      ] })
    ] }) }),
    (0, import_jsx_runtime10.jsxs)(
      "div",
      {
        ref: gridRef,
        className: `
          ${(virtualScrolling == null ? void 0 : virtualScrolling.enabled) ? "overflow-auto" : ""}
          ${responsive ? "w-full" : ""}
        `,
        style: {
          maxHeight: (virtualScrolling == null ? void 0 : virtualScrolling.enabled) ? 600 : void 0
        },
        onScroll: handleScroll,
        children: [
          (virtualScrolling == null ? void 0 : virtualScrolling.enabled) ? renderVirtualizedGrid() : masonry ? renderMasonryGrid() : renderRegularGrid(),
          infiniteScroll && hasMore && (0, import_jsx_runtime10.jsx)("div", { ref: loadMoreRef, className: "flex justify-center py-4", children: (0, import_jsx_runtime10.jsx)(Spinner, { size: "md" }) })
        ]
      }
    ),
    (pagination == null ? void 0 : pagination.enabled) !== false && !(virtualScrolling == null ? void 0 : virtualScrolling.enabled) && !infiniteScroll && processedData.totalPages > 1 && (0, import_jsx_runtime10.jsxs)("div", { className: "mt-6 flex items-center justify-between", children: [
      (0, import_jsx_runtime10.jsxs)("div", { className: "text-sm text-gray-700", children: [
        "Showing ",
        (currentPage - 1) * pageSize + 1,
        " to ",
        Math.min(currentPage * pageSize, processedData.filteredTotal),
        " of ",
        processedData.filteredTotal,
        " results"
      ] }),
      (0, import_jsx_runtime10.jsxs)("div", { className: "flex items-center gap-2", children: [
        (0, import_jsx_runtime10.jsx)(
          "button",
          {
            onClick: () => setCurrentPage(Math.max(1, currentPage - 1)),
            disabled: currentPage === 1,
            className: `
                px-3 py-1 text-sm border rounded-md
                ${currentPage === 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50 border-gray-300"}
              `,
            children: "Previous"
          }
        ),
        (0, import_jsx_runtime10.jsxs)("span", { className: "text-sm text-gray-700 px-3", children: [
          "Page ",
          currentPage,
          " of ",
          processedData.totalPages
        ] }),
        (0, import_jsx_runtime10.jsx)(
          "button",
          {
            onClick: () => setCurrentPage(Math.min(processedData.totalPages, currentPage + 1)),
            disabled: currentPage === processedData.totalPages,
            className: `
                px-3 py-1 text-sm border rounded-md
                ${currentPage === processedData.totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50 border-gray-300"}
              `,
            children: "Next"
          }
        )
      ] })
    ] })
  ] });
};

// packages/layouts/src/components/data-display/DataGrid.tsx
var import_react11 = __toESM(require_react());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var DataGrid = ({
  data,
  loading = false,
  context = "neutral",
  permissions = [],
  columns = "auto",
  gap = "md",
  itemHeight = "auto",
  cardComponent: CardComponent,
  pagination,
  filtering,
  selection,
  virtualScrolling,
  onItemClick,
  onItemDoubleClick,
  infiniteScroll = false,
  onLoadMore,
  hasMore = false,
  responsive = true,
  className = "",
  style
}) => {
  const [searchTerm, setSearchTerm] = (0, import_react11.useState)("");
  const [selectedKeys, setSelectedKeys] = (0, import_react11.useState)((selection == null ? void 0 : selection.selectedKeys) || []);
  const [currentPage, setCurrentPage] = (0, import_react11.useState)((pagination == null ? void 0 : pagination.page) || 1);
  const [pageSize, setPageSize] = (0, import_react11.useState)((pagination == null ? void 0 : pagination.pageSize) || 12);
  const [scrollTop, setScrollTop] = (0, import_react11.useState)(0);
  const gridRef = (0, import_react11.useRef)(null);
  const observerRef = (0, import_react11.useRef)(null);
  const loadMoreRef = (0, import_react11.useRef)(null);
  const theme = getWorkspaceTheme(context);
  const debouncedSearch = (0, import_react11.useCallback)(
    debounce((term) => {
      setSearchTerm(term);
      setCurrentPage(1);
      if (filtering == null ? void 0 : filtering.onSearch) {
        filtering.onSearch(term);
      }
    }, 300),
    [filtering]
  );
  const processedData = (0, import_react11.useMemo)(() => {
    let result = [...data];
    if ((filtering == null ? void 0 : filtering.enabled) !== false && searchTerm) {
      result = filterData(result, {}, searchTerm);
    }
    if ((pagination == null ? void 0 : pagination.enabled) !== false && !(virtualScrolling == null ? void 0 : virtualScrolling.enabled) && !infiniteScroll) {
      const paginatedResult = paginateData(result, currentPage, pageSize);
      return {
        data: paginatedResult.data,
        total: paginatedResult.total,
        totalPages: paginatedResult.totalPages,
        filteredTotal: result.length
      };
    }
    return {
      data: result,
      total: result.length,
      totalPages: 1,
      filteredTotal: result.length
    };
  }, [data, searchTerm, currentPage, pageSize, filtering, pagination, virtualScrolling, infiniteScroll]);
  const virtualItems = (0, import_react11.useMemo)(() => {
    if (!(virtualScrolling == null ? void 0 : virtualScrolling.enabled) || !gridRef.current || itemHeight === "auto") {
      return null;
    }
    const containerHeight = gridRef.current.clientHeight;
    const itemHeightNum = typeof itemHeight === "number" ? itemHeight : 200;
    return calculateVirtualItems(
      processedData.data.length,
      itemHeightNum,
      containerHeight,
      scrollTop,
      virtualScrolling.overscan
    );
  }, [virtualScrolling, processedData.data.length, scrollTop, itemHeight]);
  const gridConfig = (0, import_react11.useMemo)(() => {
    if (typeof columns === "number") {
      return {
        columns: `repeat(${columns}, 1fr)`,
        autoFit: false
      };
    }
    const minItemWidth = 280;
    const gapSize = gap === "sm" ? 8 : gap === "md" ? 16 : gap === "lg" ? 24 : typeof gap === "number" ? gap : 16;
    return {
      columns: `repeat(auto-fit, minmax(${minItemWidth}px, 1fr))`,
      autoFit: true,
      gap: gapSize
    };
  }, [columns, gap]);
  const handleItemSelection = (0, import_react11.useCallback)((itemKey) => {
    if (!(selection == null ? void 0 : selection.enabled)) return;
    const newSelectedKeys = toggleSelection(selectedKeys, itemKey, selection.type);
    setSelectedKeys(newSelectedKeys);
    if (selection.onSelectionChange) {
      const selectedItems = processedData.data.filter(
        (item) => newSelectedKeys.includes(getRowKey(item, selection.getRowKey))
      );
      selection.onSelectionChange(newSelectedKeys, selectedItems);
    }
  }, [selectedKeys, selection, processedData.data]);
  const handleItemClick = (0, import_react11.useCallback)((item, index) => {
    onItemClick == null ? void 0 : onItemClick(item, index);
  }, [onItemClick]);
  const handleItemDoubleClick = (0, import_react11.useCallback)((item, index) => {
    onItemDoubleClick == null ? void 0 : onItemDoubleClick(item, index);
  }, [onItemDoubleClick]);
  const handleScroll = (0, import_react11.useCallback)((e) => {
    if (virtualScrolling == null ? void 0 : virtualScrolling.enabled) {
      setScrollTop(e.currentTarget.scrollTop);
      if (virtualScrolling.onScroll) {
        virtualScrolling.onScroll(e.currentTarget.scrollTop);
      }
    }
  }, [virtualScrolling]);
  import_react11.default.useEffect(() => {
    if (!infiniteScroll || !loadMoreRef.current || !hasMore) return;
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && onLoadMore) {
          onLoadMore();
        }
      },
      { threshold: 0.1 }
    );
    observer.observe(loadMoreRef.current);
    observerRef.current = observer;
    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, [infiniteScroll, hasMore, onLoadMore]);
  const gapClasses = {
    sm: "gap-2",
    md: "gap-4",
    lg: "gap-6"
  };
  const gapClass = typeof gap === "string" ? gapClasses[gap] : "";
  const renderGridItem = (item, index) => {
    const itemKey = getRowKey(item, selection == null ? void 0 : selection.getRowKey);
    const isSelected = selectedKeys.includes(itemKey);
    return (0, import_jsx_runtime11.jsx)(
      "div",
      {
        className: `
          ${responsive ? "w-full" : ""}
          ${onItemClick ? "cursor-pointer" : ""}
          transition-transform duration-150 hover:scale-[1.02]
        `,
        onClick: () => handleItemClick(item, index),
        onDoubleClick: () => handleItemDoubleClick(item, index),
        style: {
          height: itemHeight === "auto" ? "auto" : itemHeight
        },
        children: (0, import_jsx_runtime11.jsx)(
          CardComponent,
          {
            item,
            context,
            selected: isSelected,
            onSelect: (selection == null ? void 0 : selection.enabled) ? () => handleItemSelection(itemKey) : void 0
          }
        )
      },
      itemKey
    );
  };
  const renderVirtualizedGrid = () => {
    if (!virtualItems) return null;
    const { start, end, totalHeight, offsetY } = virtualItems;
    const visibleItems = processedData.data.slice(start, end + 1);
    return (0, import_jsx_runtime11.jsx)("div", { style: { height: totalHeight, position: "relative" }, children: (0, import_jsx_runtime11.jsx)("div", { style: { transform: `translateY(${offsetY}px)` }, children: (0, import_jsx_runtime11.jsx)(
      "div",
      {
        className: `grid ${gapClass}`,
        style: {
          gridTemplateColumns: gridConfig.columns,
          gap: typeof gap === "number" ? `${gap}px` : void 0
        },
        children: visibleItems.map((item, index) => renderGridItem(item, start + index))
      }
    ) }) });
  };
  const renderRegularGrid = () => (0, import_jsx_runtime11.jsx)(
    "div",
    {
      className: `grid ${gapClass}`,
      style: {
        gridTemplateColumns: gridConfig.columns,
        gap: typeof gap === "number" ? `${gap}px` : void 0
      },
      children: processedData.data.map((item, index) => renderGridItem(item, index))
    }
  );
  if (loading) {
    return (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-center justify-center p-8", children: [
      (0, import_jsx_runtime11.jsx)(Spinner, { size: "lg" }),
      (0, import_jsx_runtime11.jsx)("span", { className: "ml-2 text-gray-600", children: "Loading..." })
    ] });
  }
  if (processedData.data.length === 0) {
    return (0, import_jsx_runtime11.jsx)(
      EmptyState,
      {
        title: "No items found",
        description: searchTerm ? "No results found for your search." : "There are no items to display.",
        actions: searchTerm ? (0, import_jsx_runtime11.jsx)(
          "button",
          {
            onClick: () => setSearchTerm(""),
            className: `px-4 py-2 rounded-md ${theme.primary} hover:opacity-90 transition-opacity`,
            children: "Clear search"
          }
        ) : void 0
      }
    );
  }
  return (0, import_jsx_runtime11.jsxs)("div", { className: `${className}`, style, children: [
    (filtering == null ? void 0 : filtering.enabled) !== false && (0, import_jsx_runtime11.jsx)("div", { className: "mb-6", children: (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-center gap-4", children: [
      (0, import_jsx_runtime11.jsx)("div", { className: "flex-1 max-w-md", children: (0, import_jsx_runtime11.jsx)(
        "input",
        {
          type: "text",
          placeholder: (filtering == null ? void 0 : filtering.searchPlaceholder) || "Search items...",
          onChange: (e) => debouncedSearch(e.target.value),
          className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        }
      ) }),
      selectedKeys.length > 0 && (0, import_jsx_runtime11.jsxs)("div", { className: "text-sm text-gray-600", children: [
        selectedKeys.length,
        " selected"
      ] })
    ] }) }),
    (0, import_jsx_runtime11.jsxs)(
      "div",
      {
        ref: gridRef,
        className: `
          ${(virtualScrolling == null ? void 0 : virtualScrolling.enabled) ? "overflow-auto" : ""}
          ${responsive ? "w-full" : ""}
        `,
        style: {
          maxHeight: (virtualScrolling == null ? void 0 : virtualScrolling.enabled) ? 600 : void 0
        },
        onScroll: handleScroll,
        children: [
          (virtualScrolling == null ? void 0 : virtualScrolling.enabled) ? renderVirtualizedGrid() : renderRegularGrid(),
          infiniteScroll && hasMore && (0, import_jsx_runtime11.jsx)("div", { ref: loadMoreRef, className: "flex justify-center py-4", children: (0, import_jsx_runtime11.jsx)(Spinner, { size: "md" }) })
        ]
      }
    ),
    (pagination == null ? void 0 : pagination.enabled) !== false && !(virtualScrolling == null ? void 0 : virtualScrolling.enabled) && !infiniteScroll && processedData.totalPages > 1 && (0, import_jsx_runtime11.jsxs)("div", { className: "mt-6 flex items-center justify-between", children: [
      (0, import_jsx_runtime11.jsxs)("div", { className: "text-sm text-gray-700", children: [
        "Showing ",
        (currentPage - 1) * pageSize + 1,
        " to ",
        Math.min(currentPage * pageSize, processedData.filteredTotal),
        " of ",
        processedData.filteredTotal,
        " results"
      ] }),
      (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-center gap-2", children: [
        (0, import_jsx_runtime11.jsx)(
          "button",
          {
            onClick: () => setCurrentPage(Math.max(1, currentPage - 1)),
            disabled: currentPage === 1,
            className: `
                px-3 py-1 text-sm border rounded-md
                ${currentPage === 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50 border-gray-300"}
              `,
            children: "Previous"
          }
        ),
        (0, import_jsx_runtime11.jsxs)("span", { className: "text-sm text-gray-700 px-3", children: [
          "Page ",
          currentPage,
          " of ",
          processedData.totalPages
        ] }),
        (0, import_jsx_runtime11.jsx)(
          "button",
          {
            onClick: () => setCurrentPage(Math.min(processedData.totalPages, currentPage + 1)),
            disabled: currentPage === processedData.totalPages,
            className: `
                px-3 py-1 text-sm border rounded-md
                ${currentPage === processedData.totalPages ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-white text-gray-700 hover:bg-gray-50 border-gray-300"}
              `,
            children: "Next"
          }
        )
      ] })
    ] })
  ] });
};

// packages/layouts/src/components/data-display/DataTable.tsx
var import_react12 = __toESM(require_react());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var DataTable = ({
  data,
  columns,
  loading = false,
  context = "neutral",
  permissions = [],
  pagination,
  sorting,
  filtering,
  selection,
  bulkActions = [],
  virtualScrolling,
  onRowClick,
  onRowDoubleClick,
  onCellClick,
  size = "md",
  variant = "default",
  responsive = true,
  stickyHeader = false,
  maxHeight,
  expandable,
  exportable = false,
  onExport,
  ariaLabel,
  ariaLabelledBy,
  className = "",
  style
}) => {
  const [sortField, setSortField] = (0, import_react12.useState)(sorting == null ? void 0 : sorting.field);
  const [sortDirection, setSortDirection] = (0, import_react12.useState)((sorting == null ? void 0 : sorting.direction) || "asc");
  const [searchTerm, setSearchTerm] = (0, import_react12.useState)("");
  const [columnFilters, setColumnFilters] = (0, import_react12.useState)({});
  const [selectedKeys, setSelectedKeys] = (0, import_react12.useState)((selection == null ? void 0 : selection.selectedKeys) || []);
  const [expandedKeys, setExpandedKeys] = (0, import_react12.useState)((expandable == null ? void 0 : expandable.expandedRowKeys) || []);
  const [currentPage, setCurrentPage] = (0, import_react12.useState)((pagination == null ? void 0 : pagination.page) || 1);
  const [pageSize, setPageSize] = (0, import_react12.useState)((pagination == null ? void 0 : pagination.pageSize) || 10);
  const [scrollTop, setScrollTop] = (0, import_react12.useState)(0);
  const tableRef = (0, import_react12.useRef)(null);
  const headerRef = (0, import_react12.useRef)(null);
  const theme = getWorkspaceTheme(context);
  const visibleColumns = (0, import_react12.useMemo)(() => {
    return filterColumnsByPermissions(columns, permissions, context);
  }, [columns, permissions, context]);
  const processedData = (0, import_react12.useMemo)(() => {
    let result = [...data];
    if ((filtering == null ? void 0 : filtering.enabled) !== false) {
      result = filterData(result, columnFilters, searchTerm);
    }
    if (sortField && (sorting == null ? void 0 : sorting.onSort)) {
      sorting.onSort(sortField, sortDirection);
    } else if (sortField) {
      result = sortData(result, sortField, sortDirection);
    }
    if ((pagination == null ? void 0 : pagination.enabled) !== false && !(virtualScrolling == null ? void 0 : virtualScrolling.enabled)) {
      const paginatedResult = paginateData(result, currentPage, pageSize);
      return {
        data: paginatedResult.data,
        total: paginatedResult.total,
        totalPages: paginatedResult.totalPages,
        filteredTotal: result.length
      };
    }
    return {
      data: result,
      total: result.length,
      totalPages: 1,
      filteredTotal: result.length
    };
  }, [data, columnFilters, searchTerm, sortField, sortDirection, currentPage, pageSize, filtering, sorting, pagination, virtualScrolling]);
  const virtualItems = (0, import_react12.useMemo)(() => {
    if (!(virtualScrolling == null ? void 0 : virtualScrolling.enabled) || !tableRef.current) {
      return null;
    }
    const containerHeight = tableRef.current.clientHeight;
    const itemHeight = virtualScrolling.itemHeight || 48;
    return calculateVirtualItems(
      processedData.data.length,
      itemHeight,
      containerHeight,
      scrollTop,
      virtualScrolling.overscan
    );
  }, [virtualScrolling, processedData.data.length, scrollTop]);
  const debouncedSearch = (0, import_react12.useCallback)(
    debounce((term) => {
      setSearchTerm(term);
      setCurrentPage(1);
      if (filtering == null ? void 0 : filtering.onSearch) {
        filtering.onSearch(term);
      }
    }, 300),
    [filtering]
  );
  const handleSort = (0, import_react12.useCallback)((columnKey) => {
    const column = visibleColumns.find((col) => String(col.key) === columnKey);
    if (!(column == null ? void 0 : column.sortable)) return;
    const newDirection = sortField === columnKey && sortDirection === "asc" ? "desc" : "asc";
    setSortField(columnKey);
    setSortDirection(newDirection);
    if (sorting == null ? void 0 : sorting.onSort) {
      sorting.onSort(columnKey, newDirection);
    }
  }, [visibleColumns, sortField, sortDirection, sorting]);
  const handleRowSelection = (0, import_react12.useCallback)((rowKey) => {
    if (!(selection == null ? void 0 : selection.enabled)) return;
    const newSelectedKeys = toggleSelection(selectedKeys, rowKey, selection.type);
    setSelectedKeys(newSelectedKeys);
    if (selection.onSelectionChange) {
      const selectedRows = processedData.data.filter(
        (row) => newSelectedKeys.includes(getRowKey(row, selection.getRowKey))
      );
      selection.onSelectionChange(newSelectedKeys, selectedRows);
    }
  }, [selectedKeys, selection, processedData.data]);
  const handleSelectAll = (0, import_react12.useCallback)(() => {
    if (!(selection == null ? void 0 : selection.enabled) || selection.type === "radio") return;
    const allKeys = processedData.data.map((row) => getRowKey(row, selection.getRowKey));
    const newSelectedKeys = selectedKeys.length === allKeys.length ? [] : allKeys;
    setSelectedKeys(newSelectedKeys);
    if (selection.onSelectionChange) {
      const selectedRows = newSelectedKeys.length > 0 ? processedData.data : [];
      selection.onSelectionChange(newSelectedKeys, selectedRows);
    }
  }, [selectedKeys, selection, processedData.data]);
  const handleBulkAction = (0, import_react12.useCallback)((actionId) => {
    const action = bulkActions.find((a) => a.id === actionId);
    if (!action) return;
    const selectedRows = processedData.data.filter(
      (row) => selectedKeys.includes(getRowKey(row, selection == null ? void 0 : selection.getRowKey))
    );
    if (action.confirmMessage && !window.confirm(action.confirmMessage)) {
      return;
    }
    action.onClick(selectedRows);
  }, [bulkActions, processedData.data, selectedKeys, selection]);
  const handleExport = (0, import_react12.useCallback)(() => {
    if (!exportable || !onExport) return;
    const exportData = selectedKeys.length > 0 ? processedData.data.filter((row) => selectedKeys.includes(getRowKey(row, selection == null ? void 0 : selection.getRowKey))) : processedData.data;
    onExport(exportData);
  }, [exportable, onExport, processedData.data, selectedKeys, selection]);
  const handleScroll = (0, import_react12.useCallback)((e) => {
    if (virtualScrolling == null ? void 0 : virtualScrolling.enabled) {
      setScrollTop(e.currentTarget.scrollTop);
      if (virtualScrolling.onScroll) {
        virtualScrolling.onScroll(e.currentTarget.scrollTop);
      }
    }
  }, [virtualScrolling]);
  const sizeClasses = {
    sm: "text-xs",
    md: "text-sm",
    lg: "text-base"
  };
  const cellPaddingClasses = {
    sm: "px-2 py-1",
    md: "px-3 py-2",
    lg: "px-4 py-3"
  };
  const variantClasses = {
    default: "",
    striped: "[&>tbody>tr:nth-child(odd)]:bg-gray-50",
    bordered: "border border-gray-200"
  };
  const renderTableHeader = () => (0, import_jsx_runtime12.jsx)(
    "thead",
    {
      ref: headerRef,
      className: `bg-gray-50 ${stickyHeader ? "sticky top-0 z-10" : ""}`,
      children: (0, import_jsx_runtime12.jsxs)("tr", { children: [
        (selection == null ? void 0 : selection.enabled) && (0, import_jsx_runtime12.jsx)("th", { className: `${cellPaddingClasses[size]} w-12`, children: selection.type === "checkbox" && selection.selectAll !== false && (0, import_jsx_runtime12.jsx)(
          Checkbox,
          {
            checked: selectedKeys.length === processedData.data.length && processedData.data.length > 0,
            onChange: handleSelectAll,
            "aria-label": "Select all rows"
          }
        ) }),
        visibleColumns.map((column) => (0, import_jsx_runtime12.jsx)(
          "th",
          {
            className: `
              ${cellPaddingClasses[size]}
              text-left font-medium text-gray-900
              ${column.sortable ? "cursor-pointer hover:bg-gray-100" : ""}
              ${column.align === "center" ? "text-center" : ""}
              ${column.align === "right" ? "text-right" : ""}
            `,
            style: {
              width: column.width,
              minWidth: column.minWidth,
              maxWidth: column.maxWidth
            },
            onClick: () => column.sortable && handleSort(String(column.key)),
            "aria-sort": getAriaSort(String(column.key), sortField, sortDirection),
            children: (0, import_jsx_runtime12.jsxs)("div", { className: "flex items-center gap-1", children: [
              column.headerRender ? column.headerRender() : column.title,
              column.sortable && (0, import_jsx_runtime12.jsxs)("div", { className: "flex flex-col", children: [
                (0, import_jsx_runtime12.jsx)(
                  "span",
                  {
                    className: `text-xs ${sortField === String(column.key) && sortDirection === "asc" ? "text-blue-600" : "text-gray-400"}`,
                    children: "▲"
                  }
                ),
                (0, import_jsx_runtime12.jsx)(
                  "span",
                  {
                    className: `text-xs -mt-1 ${sortField === String(column.key) && sortDirection === "desc" ? "text-blue-600" : "text-gray-400"}`,
                    children: "▼"
                  }
                )
              ] }),
              column.filterable && (0, import_jsx_runtime12.jsx)("span", { className: "text-xs text-gray-400", children: "🔍" })
            ] })
          },
          String(column.key)
        )),
        expandable && (0, import_jsx_runtime12.jsx)("th", { className: `${cellPaddingClasses[size]} w-12`, children: (0, import_jsx_runtime12.jsx)("span", { className: "sr-only", children: "Expand" }) })
      ] })
    }
  );
  const renderTableRow = (row, index) => {
    const rowKey = getRowKey(row, selection == null ? void 0 : selection.getRowKey);
    const isSelected = selectedKeys.includes(rowKey);
    const isExpanded = expandedKeys.includes(rowKey);
    return (0, import_jsx_runtime12.jsxs)(import_react12.default.Fragment, { children: [
      (0, import_jsx_runtime12.jsxs)(
        "tr",
        {
          className: `
            ${isSelected ? theme.secondary : "hover:bg-gray-50"}
            ${onRowClick ? "cursor-pointer" : ""}
            transition-colors duration-150
          `,
          onClick: () => onRowClick == null ? void 0 : onRowClick(row, index),
          onDoubleClick: () => onRowDoubleClick == null ? void 0 : onRowDoubleClick(row, index),
          children: [
            (selection == null ? void 0 : selection.enabled) && (0, import_jsx_runtime12.jsx)("td", { className: cellPaddingClasses[size], children: (0, import_jsx_runtime12.jsx)(
              Checkbox,
              {
                checked: isSelected,
                onChange: () => handleRowSelection(rowKey),
                "aria-label": `Select row ${index + 1}`
              }
            ) }),
            visibleColumns.map((column) => {
              const value = getNestedValue(row, String(column.key));
              return (0, import_jsx_runtime12.jsx)(
                "td",
                {
                  className: `
                  ${cellPaddingClasses[size]}
                  ${column.align === "center" ? "text-center" : ""}
                  ${column.align === "right" ? "text-right" : ""}
                  ${onCellClick ? "cursor-pointer" : ""}
                `,
                  onClick: (e) => {
                    e.stopPropagation();
                    onCellClick == null ? void 0 : onCellClick(value, row, column);
                  },
                  children: column.render ? column.render(value, row, index) : formatCellValue(value, column)
                },
                String(column.key)
              );
            }),
            expandable && (0, import_jsx_runtime12.jsx)("td", { className: cellPaddingClasses[size], children: (0, import_jsx_runtime12.jsx)(
              Button,
              {
                variant: "ghost",
                size: "sm",
                onClick: (e) => {
                  var _a;
                  e.stopPropagation();
                  const newExpandedKeys = expandedKeys.includes(rowKey) ? expandedKeys.filter((k) => k !== rowKey) : [...expandedKeys, rowKey];
                  setExpandedKeys(newExpandedKeys);
                  (_a = expandable.onExpand) == null ? void 0 : _a.call(expandable, !isExpanded, row);
                },
                "aria-label": isExpanded ? "Collapse row" : "Expand row",
                children: isExpanded ? (0, import_jsx_runtime12.jsx)("span", { className: "text-sm", children: "▲" }) : (0, import_jsx_runtime12.jsx)("span", { className: "text-sm", children: "▼" })
              }
            ) })
          ]
        }
      ),
      expandable && isExpanded && (0, import_jsx_runtime12.jsx)("tr", { children: (0, import_jsx_runtime12.jsx)(
        "td",
        {
          colSpan: visibleColumns.length + ((selection == null ? void 0 : selection.enabled) ? 1 : 0) + 1,
          className: "p-0",
          children: (0, import_jsx_runtime12.jsx)("div", { className: "bg-gray-50 p-4", children: expandable.expandedRowRender(row) })
        }
      ) })
    ] }, rowKey);
  };
  const renderVirtualizedRows = () => {
    if (!virtualItems) return null;
    const { start, end, totalHeight, offsetY } = virtualItems;
    const visibleRows = processedData.data.slice(start, end + 1);
    return (0, import_jsx_runtime12.jsxs)("tbody", { style: { height: totalHeight }, children: [
      (0, import_jsx_runtime12.jsx)("tr", { style: { height: offsetY }, children: (0, import_jsx_runtime12.jsx)("td", { colSpan: visibleColumns.length + ((selection == null ? void 0 : selection.enabled) ? 1 : 0) + (expandable ? 1 : 0) }) }),
      visibleRows.map((row, index) => renderTableRow(row, start + index))
    ] });
  };
  const renderRegularRows = () => (0, import_jsx_runtime12.jsx)("tbody", { children: processedData.data.map((row, index) => renderTableRow(row, index)) });
  if (loading) {
    return (0, import_jsx_runtime12.jsxs)("div", { className: "flex items-center justify-center p-8", children: [
      (0, import_jsx_runtime12.jsx)(Spinner, { size: "lg" }),
      (0, import_jsx_runtime12.jsx)("span", { className: "ml-2 text-gray-600", children: "Loading..." })
    ] });
  }
  if (processedData.data.length === 0) {
    return (0, import_jsx_runtime12.jsx)(
      EmptyState,
      {
        title: "No data available",
        description: searchTerm ? "No results found for your search." : "There are no items to display.",
        actions: searchTerm ? (0, import_jsx_runtime12.jsx)(Button, { onClick: () => setSearchTerm(""), children: "Clear search" }) : void 0
      }
    );
  }
  return (0, import_jsx_runtime12.jsxs)("div", { className: `${className}`, style, children: [
    ((filtering == null ? void 0 : filtering.enabled) !== false || bulkActions.length > 0 || exportable) && (0, import_jsx_runtime12.jsxs)("div", { className: "mb-4 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between", children: [
      (0, import_jsx_runtime12.jsx)("div", { className: "flex flex-1 items-center gap-4", children: (filtering == null ? void 0 : filtering.searchable) !== false && (0, import_jsx_runtime12.jsx)("div", { className: "flex-1 max-w-sm", children: (0, import_jsx_runtime12.jsx)(
        Input,
        {
          name: "search",
          placeholder: (filtering == null ? void 0 : filtering.searchPlaceholder) || "Search...",
          onChange: (e) => debouncedSearch(e.target.value),
          className: "w-full"
        }
      ) }) }),
      (0, import_jsx_runtime12.jsxs)("div", { className: "flex items-center gap-2", children: [
        selectedKeys.length > 0 && bulkActions.length > 0 && (0, import_jsx_runtime12.jsxs)("div", { className: "flex items-center gap-2", children: [
          (0, import_jsx_runtime12.jsxs)("span", { className: "text-sm text-gray-600", children: [
            selectedKeys.length,
            " selected"
          ] }),
          bulkActions.map((action) => (0, import_jsx_runtime12.jsx)(
            Button,
            {
              variant: action.variant || "secondary",
              size: "sm",
              onClick: () => handleBulkAction(action.id),
              disabled: action.disabled,
              children: action.label
            },
            action.id
          ))
        ] }),
        exportable && (0, import_jsx_runtime12.jsx)(
          Button,
          {
            variant: "outline",
            size: "sm",
            onClick: handleExport,
            children: "Export"
          }
        )
      ] })
    ] }),
    (0, import_jsx_runtime12.jsx)(
      "div",
      {
        ref: tableRef,
        className: `
          overflow-auto border border-gray-200 rounded-lg
          ${maxHeight ? "" : "max-h-96"}
        `,
        style: { maxHeight },
        onScroll: handleScroll,
        children: (0, import_jsx_runtime12.jsxs)(
          "table",
          {
            className: `
            min-w-full divide-y divide-gray-200
            ${sizeClasses[size]}
            ${variantClasses[variant]}
          `,
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledBy,
            children: [
              renderTableHeader(),
              (virtualScrolling == null ? void 0 : virtualScrolling.enabled) ? renderVirtualizedRows() : renderRegularRows()
            ]
          }
        )
      }
    ),
    (pagination == null ? void 0 : pagination.enabled) !== false && !(virtualScrolling == null ? void 0 : virtualScrolling.enabled) && processedData.totalPages > 1 && (0, import_jsx_runtime12.jsxs)("div", { className: "mt-4 flex items-center justify-between", children: [
      (0, import_jsx_runtime12.jsxs)("div", { className: "text-sm text-gray-700", children: [
        "Showing ",
        (currentPage - 1) * pageSize + 1,
        " to ",
        Math.min(currentPage * pageSize, processedData.filteredTotal),
        " of ",
        processedData.filteredTotal,
        " results"
      ] }),
      (0, import_jsx_runtime12.jsxs)("div", { className: "flex items-center gap-2", children: [
        (0, import_jsx_runtime12.jsx)(
          Button,
          {
            variant: "outline",
            size: "sm",
            onClick: () => setCurrentPage(Math.max(1, currentPage - 1)),
            disabled: currentPage === 1,
            children: "Previous"
          }
        ),
        (0, import_jsx_runtime12.jsxs)("span", { className: "text-sm text-gray-700", children: [
          "Page ",
          currentPage,
          " of ",
          processedData.totalPages
        ] }),
        (0, import_jsx_runtime12.jsx)(
          Button,
          {
            variant: "outline",
            size: "sm",
            onClick: () => setCurrentPage(Math.min(processedData.totalPages, currentPage + 1)),
            disabled: currentPage === processedData.totalPages,
            children: "Next"
          }
        )
      ] })
    ] })
  ] });
};

// packages/layouts/src/components/data-display/Timeline.tsx
var import_react13 = __toESM(require_react());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var Timeline = ({
  events,
  loading = false,
  context = "neutral",
  permissions = [],
  groupBy = "date",
  filtering = [],
  onEventClick,
  onFilterChange,
  realTimeUpdates = false,
  onNewEvent,
  responsive = true,
  maxHeight,
  showTime = true,
  showUser = true,
  className = "",
  style
}) => {
  const [activeFilters, setActiveFilters] = (0, import_react13.useState)(filtering);
  const [expandedGroups, setExpandedGroups] = (0, import_react13.useState)(/* @__PURE__ */ new Set());
  const theme = getWorkspaceTheme(context);
  const filteredEvents = (0, import_react13.useMemo)(() => {
    if (activeFilters.length === 0) return events;
    return events.filter((event) => {
      return activeFilters.every((filter) => {
        var _a;
        switch (filter.type) {
          case "user":
            return ((_a = event.user) == null ? void 0 : _a.id) === filter.value;
          case "type":
            return event.type === filter.value;
          case "status":
            return event.status === filter.value;
          case "date":
            const eventDate = new Date(event.timestamp);
            const filterDate = new Date(filter.value);
            return eventDate.toDateString() === filterDate.toDateString();
          default:
            return true;
        }
      });
    });
  }, [events, activeFilters]);
  const groupedEvents = (0, import_react13.useMemo)(() => {
    if (groupBy === "none") {
      return { "All Events": filteredEvents };
    }
    const groups = {};
    filteredEvents.forEach((event) => {
      var _a;
      let groupKey;
      switch (groupBy) {
        case "date":
          groupKey = new Date(event.timestamp).toDateString();
          break;
        case "type":
          groupKey = event.type;
          break;
        case "user":
          groupKey = ((_a = event.user) == null ? void 0 : _a.name) || "Unknown User";
          break;
        default:
          groupKey = "All Events";
      }
      if (!groups[groupKey]) {
        groups[groupKey] = [];
      }
      groups[groupKey].push(event);
    });
    Object.keys(groups).forEach((key) => {
      groups[key].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
    });
    return groups;
  }, [filteredEvents, groupBy]);
  const handleFilterChange = (0, import_react13.useCallback)((newFilters) => {
    setActiveFilters(newFilters);
    onFilterChange == null ? void 0 : onFilterChange(newFilters);
  }, [onFilterChange]);
  const handleEventClick = (0, import_react13.useCallback)((event) => {
    onEventClick == null ? void 0 : onEventClick(event);
  }, [onEventClick]);
  const toggleGroupExpansion = (0, import_react13.useCallback)((groupKey) => {
    const newExpanded = new Set(expandedGroups);
    if (newExpanded.has(groupKey)) {
      newExpanded.delete(groupKey);
    } else {
      newExpanded.add(groupKey);
    }
    setExpandedGroups(newExpanded);
  }, [expandedGroups]);
  import_react13.default.useEffect(() => {
    if (realTimeUpdates && onNewEvent) {
      const handleNewEvent = (event) => {
        onNewEvent(event);
      };
      return () => {
      };
    }
  }, [realTimeUpdates, onNewEvent]);
  const renderEventIcon = (event) => {
    if (event.icon) {
      return (0, import_jsx_runtime13.jsx)(
        "div",
        {
          className: `
            w-8 h-8 rounded-full flex items-center justify-center text-white text-sm
            ${event.color ? "" : theme.primary}
          `,
          style: { backgroundColor: event.color },
          children: event.icon
        }
      );
    }
    const statusColors = {
      pending: "bg-yellow-500",
      completed: "bg-green-500",
      failed: "bg-red-500",
      cancelled: "bg-gray-500"
    };
    const statusIcons = {
      pending: "⏳",
      completed: "✓",
      failed: "✗",
      cancelled: "⊘"
    };
    return (0, import_jsx_runtime13.jsx)(
      "div",
      {
        className: `
          w-8 h-8 rounded-full flex items-center justify-center text-white text-sm
          ${event.status ? statusColors[event.status] : theme.primary}
        `,
        children: event.status ? statusIcons[event.status] : "•"
      }
    );
  };
  const renderEvent = (event, isLast) => {
    const canView = !event.workspaceContext || event.workspaceContext === context || permissions.includes("view_all_events");
    if (!canView) return null;
    return (0, import_jsx_runtime13.jsxs)("div", { className: "relative flex gap-4 pb-6", children: [
      !isLast && (0, import_jsx_runtime13.jsx)("div", { className: "absolute left-4 top-8 w-0.5 h-full bg-gray-200" }),
      (0, import_jsx_runtime13.jsx)("div", { className: "relative z-10", children: renderEventIcon(event) }),
      (0, import_jsx_runtime13.jsx)("div", { className: "flex-1 min-w-0", children: (0, import_jsx_runtime13.jsxs)(
        "div",
        {
          className: `
              bg-white border border-gray-200 rounded-lg p-4 shadow-sm
              ${onEventClick ? "cursor-pointer hover:shadow-md transition-shadow" : ""}
            `,
          onClick: () => handleEventClick(event),
          children: [
            (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-start justify-between gap-4 mb-2", children: [
              (0, import_jsx_runtime13.jsxs)("div", { className: "flex-1 min-w-0", children: [
                (0, import_jsx_runtime13.jsx)("h4", { className: "font-medium text-gray-900 truncate", children: event.title }),
                event.description && (0, import_jsx_runtime13.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: event.description })
              ] }),
              event.status && (0, import_jsx_runtime13.jsx)(
                Badge,
                {
                  variant: event.status === "completed" ? "success" : event.status === "failed" ? "error" : event.status === "cancelled" ? "secondary" : "warning",
                  size: "sm",
                  children: event.status
                }
              )
            ] }),
            (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center gap-4 text-xs text-gray-500", children: [
              showTime && (0, import_jsx_runtime13.jsx)("span", { children: new Date(event.timestamp).toLocaleString() }),
              showUser && event.user && (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center gap-2", children: [
                event.user.avatar && (0, import_jsx_runtime13.jsx)(
                  Avatar,
                  {
                    src: event.user.avatar,
                    alt: event.user.name,
                    size: "xs"
                  }
                ),
                (0, import_jsx_runtime13.jsx)("span", { children: event.user.name })
              ] }),
              (0, import_jsx_runtime13.jsx)("span", { className: "capitalize", children: event.type })
            ] }),
            event.metadata && Object.keys(event.metadata).length > 0 && (0, import_jsx_runtime13.jsx)("div", { className: "mt-3 pt-3 border-t border-gray-100", children: (0, import_jsx_runtime13.jsx)("div", { className: "grid grid-cols-2 gap-2 text-xs", children: Object.entries(event.metadata).map(([key, value]) => (0, import_jsx_runtime13.jsxs)("div", { children: [
              (0, import_jsx_runtime13.jsxs)("span", { className: "font-medium text-gray-600", children: [
                key.replace(/_/g, " ").replace(/\b\w/g, (l) => l.toUpperCase()),
                ":"
              ] }),
              (0, import_jsx_runtime13.jsx)("span", { className: "ml-1 text-gray-900", children: typeof value === "object" ? JSON.stringify(value) : String(value) })
            ] }, key)) }) })
          ]
        }
      ) })
    ] }, event.id);
  };
  const renderGroup = (groupKey, groupEvents) => {
    const isExpanded = expandedGroups.has(groupKey) || groupBy === "none";
    return (0, import_jsx_runtime13.jsxs)("div", { className: "mb-6", children: [
      groupBy !== "none" && (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [
        (0, import_jsx_runtime13.jsx)("h3", { className: "text-lg font-semibold text-gray-900", children: groupKey }),
        (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center gap-2", children: [
          (0, import_jsx_runtime13.jsxs)("span", { className: "text-sm text-gray-500", children: [
            groupEvents.length,
            " event",
            groupEvents.length !== 1 ? "s" : ""
          ] }),
          (0, import_jsx_runtime13.jsx)(
            Button,
            {
              variant: "ghost",
              size: "sm",
              onClick: () => toggleGroupExpansion(groupKey),
              children: isExpanded ? "▲" : "▼"
            }
          )
        ] })
      ] }),
      isExpanded && (0, import_jsx_runtime13.jsx)("div", { className: "space-y-0", children: groupEvents.map(
        (event, index) => renderEvent(event, index === groupEvents.length - 1)
      ) })
    ] }, groupKey);
  };
  if (loading) {
    return (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-center justify-center p-8", children: [
      (0, import_jsx_runtime13.jsx)(Spinner, { size: "lg" }),
      (0, import_jsx_runtime13.jsx)("span", { className: "ml-2 text-gray-600", children: "Loading timeline..." })
    ] });
  }
  if (filteredEvents.length === 0) {
    return (0, import_jsx_runtime13.jsx)(
      EmptyState,
      {
        title: "No events found",
        description: activeFilters.length > 0 ? "No events match your current filters." : "There are no events to display.",
        actions: activeFilters.length > 0 ? (0, import_jsx_runtime13.jsx)(Button, { onClick: () => handleFilterChange([]), children: "Clear filters" }) : void 0
      }
    );
  }
  return (0, import_jsx_runtime13.jsxs)("div", { className: `${className}`, style, children: [
    filtering.length > 0 && (0, import_jsx_runtime13.jsxs)("div", { className: "mb-6 p-4 bg-gray-50 rounded-lg", children: [
      (0, import_jsx_runtime13.jsx)("h4", { className: "font-medium text-gray-900 mb-3", children: "Filters" }),
      (0, import_jsx_runtime13.jsx)("div", { className: "flex flex-wrap gap-2", children: filtering.map((filter) => (0, import_jsx_runtime13.jsx)(
        Button,
        {
          variant: activeFilters.some((f) => f.type === filter.type && f.value === filter.value) ? "primary" : "outline",
          size: "sm",
          onClick: () => {
            const isActive = activeFilters.some(
              (f) => f.type === filter.type && f.value === filter.value
            );
            if (isActive) {
              handleFilterChange(
                activeFilters.filter(
                  (f) => !(f.type === filter.type && f.value === filter.value)
                )
              );
            } else {
              handleFilterChange([...activeFilters, filter]);
            }
          },
          children: filter.label
        },
        `${filter.type}-${filter.value}`
      )) }),
      activeFilters.length > 0 && (0, import_jsx_runtime13.jsx)("div", { className: "mt-3 pt-3 border-t border-gray-200", children: (0, import_jsx_runtime13.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          onClick: () => handleFilterChange([]),
          children: "Clear all filters"
        }
      ) })
    ] }),
    (0, import_jsx_runtime13.jsx)(
      "div",
      {
        className: `
          ${responsive ? "w-full" : ""}
          ${maxHeight ? "overflow-y-auto" : ""}
        `,
        style: { maxHeight },
        children: Object.entries(groupedEvents).map(
          ([groupKey, groupEvents]) => renderGroup(groupKey, groupEvents)
        )
      }
    ),
    realTimeUpdates && (0, import_jsx_runtime13.jsxs)("div", { className: "mt-4 flex items-center justify-center text-sm text-gray-500", children: [
      (0, import_jsx_runtime13.jsx)("div", { className: "w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2" }),
      "Live updates enabled"
    ] })
  ] });
};

// packages/layouts/src/components/forms/FormBuilder.tsx
var import_react14 = __toESM(require_react());

// packages/layouts/src/components/forms/utils.ts
function validateField(field, value, allData = {}, context) {
  if (!field.validation) return null;
  for (const rule of field.validation) {
    if (rule.workspaceContext && context && rule.workspaceContext !== context) {
      continue;
    }
    const error = validateRule(rule, value, field, allData);
    if (error) return error;
  }
  return null;
}
function validateRule(rule, value, field, allData) {
  switch (rule.type) {
    case "required":
      if (value === void 0 || value === null || value === "") {
        return rule.message || `${field.label} is required`;
      }
      break;
    case "minLength":
      if (typeof value === "string" && value.length < rule.value) {
        return rule.message || `${field.label} must be at least ${rule.value} characters`;
      }
      break;
    case "maxLength":
      if (typeof value === "string" && value.length > rule.value) {
        return rule.message || `${field.label} must be no more than ${rule.value} characters`;
      }
      break;
    case "pattern":
      if (typeof value === "string" && !new RegExp(rule.value).test(value)) {
        return rule.message || `${field.label} format is invalid`;
      }
      break;
    case "email":
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (typeof value === "string" && !emailRegex.test(value)) {
        return rule.message || `${field.label} must be a valid email address`;
      }
      break;
    case "url":
      try {
        new URL(value);
      } catch {
        return rule.message || `${field.label} must be a valid URL`;
      }
      break;
    case "number":
      if (isNaN(Number(value))) {
        return rule.message || `${field.label} must be a valid number`;
      }
      break;
    case "custom":
      if (typeof rule.value === "function") {
        const result = rule.value(value, allData, field);
        if (result !== true) {
          return typeof result === "string" ? result : rule.message;
        }
      }
      break;
  }
  return null;
}
function validateForm(fields, data, context) {
  const errors = {};
  for (const field of fields) {
    const error = validateField(field, data[field.name], data, context);
    if (error) {
      errors[field.name] = error;
    }
  }
  return errors;
}
function evaluateConditionalRules(field, data) {
  let visible = true;
  let required = field.required || false;
  let disabled = false;
  let readonly = false;
  if (!field.conditional) {
    return { visible, required, disabled, readonly };
  }
  for (const rule of field.conditional) {
    const fieldValue = data[rule.field];
    const conditionMet = evaluateCondition(rule, fieldValue);
    if (conditionMet) {
      switch (rule.action) {
        case "show":
          visible = true;
          break;
        case "hide":
          visible = false;
          break;
        case "required":
          required = true;
          break;
        case "disabled":
          disabled = true;
          break;
        case "readonly":
          readonly = true;
          break;
      }
    }
  }
  return { visible, required, disabled, readonly };
}
function evaluateCondition(rule, value) {
  switch (rule.operator) {
    case "equals":
      return value === rule.value;
    case "not_equals":
      return value !== rule.value;
    case "contains":
      return typeof value === "string" && value.includes(rule.value);
    case "greater_than":
      return Number(value) > Number(rule.value);
    case "less_than":
      return Number(value) < Number(rule.value);
    case "in":
      return Array.isArray(rule.value) && rule.value.includes(value);
    case "not_in":
      return Array.isArray(rule.value) && !rule.value.includes(value);
    default:
      return false;
  }
}
function filterFieldsByPermissions(fields, userPermissions = [], context) {
  return fields.filter((field) => {
    if (field.workspaceContext && context && field.workspaceContext !== context) {
      return false;
    }
    if (field.permission && !userPermissions.includes(field.permission)) {
      return false;
    }
    return true;
  });
}
function getVisibleFields(fields, data, userPermissions = [], context) {
  const filteredFields = filterFieldsByPermissions(fields, userPermissions, context);
  return filteredFields.filter((field) => {
    const { visible } = evaluateConditionalRules(field, data);
    return visible;
  });
}
function calculateFormCompletion(fields, data, userPermissions = [], context) {
  const visibleFields = getVisibleFields(fields, data, userPermissions, context);
  const requiredFields = visibleFields.filter((field) => {
    const { required } = evaluateConditionalRules(field, data);
    return required;
  });
  if (requiredFields.length === 0) return 100;
  const completedFields = requiredFields.filter((field) => {
    const value = data[field.name];
    return value !== void 0 && value !== null && value !== "";
  });
  return Math.round(completedFields.length / requiredFields.length * 100);
}
function debounce2(func, wait) {
  let timeout;
  return (...args) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}
function deepClone(obj) {
  if (obj === null || typeof obj !== "object") return obj;
  if (obj instanceof Date) return new Date(obj.getTime());
  if (obj instanceof Array) return obj.map((item) => deepClone(item));
  if (typeof obj === "object") {
    const cloned = {};
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        cloned[key] = deepClone(obj[key]);
      }
    }
    return cloned;
  }
  return obj;
}
function generateFieldId(fieldName, formId) {
  const base = formId ? `${formId}-${fieldName}` : fieldName;
  return base.replace(/[^a-zA-Z0-9-_]/g, "-").toLowerCase();
}
function hasUnsavedChanges(currentData, savedData) {
  return JSON.stringify(currentData) !== JSON.stringify(savedData);
}

// packages/layouts/src/components/forms/FormBuilder.tsx
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
function FormBuilder({
  context = "neutral",
  schema,
  initialData = {},
  onSubmit,
  onChange,
  onValidationChange,
  template,
  workspaceId,
  autoSave = false,
  autoSaveInterval = 2e3,
  collaborative = false,
  readonly = false,
  permissions = [],
  className = "",
  loading = false,
  disabled = false
}) {
  var _a, _b;
  const [formState, setFormState] = (0, import_react14.useState)({
    data: { ...initialData },
    errors: {},
    touched: {},
    isValid: true,
    isSubmitting: false,
    isDirty: false,
    lastSaved: void 0
  });
  const [autoSaveStatus, setAutoSaveStatus] = (0, import_react14.useState)("idle");
  const savedDataRef = (0, import_react14.useRef)({ ...initialData });
  const autoSaveTimeoutRef = (0, import_react14.useRef)();
  const visibleFields = (0, import_react14.useMemo)(
    () => getVisibleFields(schema.fields, formState.data, permissions, context),
    [schema.fields, formState.data, permissions, context]
  );
  const completionPercentage = (0, import_react14.useMemo)(
    () => calculateFormCompletion(visibleFields, formState.data, permissions, context),
    [visibleFields, formState.data, permissions, context]
  );
  const validateFormData = (0, import_react14.useCallback)((data) => {
    const errors = validateForm(visibleFields, data, context);
    const isValid = Object.keys(errors).length === 0;
    return { errors, isValid };
  }, [visibleFields, context]);
  const handleFieldChange = (0, import_react14.useCallback)((fieldName, value) => {
    if (readonly || disabled) return;
    setFormState((prevState) => {
      const newData = { ...prevState.data, [fieldName]: value };
      const { errors, isValid } = validateFormData(newData);
      const isDirty = hasUnsavedChanges(newData, savedDataRef.current);
      const newState = {
        ...prevState,
        data: newData,
        errors,
        isValid,
        isDirty,
        touched: { ...prevState.touched, [fieldName]: true }
      };
      onChange == null ? void 0 : onChange(newData);
      onValidationChange == null ? void 0 : onValidationChange(errors);
      return newState;
    });
  }, [readonly, disabled, validateFormData, onChange, onValidationChange]);
  const debouncedAutoSave = (0, import_react14.useMemo)(
    () => debounce2(async (data) => {
      if (!autoSave || readonly) return;
      try {
        setAutoSaveStatus("saving");
        await new Promise((resolve) => setTimeout(resolve, 500));
        savedDataRef.current = deepClone(data);
        setFormState((prev) => ({ ...prev, lastSaved: /* @__PURE__ */ new Date(), isDirty: false }));
        setAutoSaveStatus("saved");
        setTimeout(() => setAutoSaveStatus("idle"), 2e3);
      } catch (error) {
        console.error("Auto-save failed:", error);
        setAutoSaveStatus("error");
        setTimeout(() => setAutoSaveStatus("idle"), 3e3);
      }
    }, autoSaveInterval),
    [autoSave, autoSaveInterval, readonly]
  );
  (0, import_react14.useEffect)(() => {
    if (autoSave && formState.isDirty && !formState.isSubmitting) {
      debouncedAutoSave(formState.data);
    }
  }, [autoSave, formState.isDirty, formState.isSubmitting, formState.data, debouncedAutoSave]);
  const handleSubmit = (0, import_react14.useCallback)(async (e) => {
    e.preventDefault();
    if (readonly || disabled || formState.isSubmitting) return;
    const { errors, isValid } = validateFormData(formState.data);
    setFormState((prev) => ({
      ...prev,
      errors,
      isValid,
      isSubmitting: true,
      touched: visibleFields.reduce((acc, field) => ({ ...acc, [field.name]: true }), {})
    }));
    if (isValid && onSubmit) {
      try {
        await onSubmit(formState.data);
        savedDataRef.current = deepClone(formState.data);
        setFormState((prev) => ({ ...prev, isDirty: false, lastSaved: /* @__PURE__ */ new Date() }));
      } catch (error) {
        console.error("Form submission failed:", error);
      }
    }
    setFormState((prev) => ({ ...prev, isSubmitting: false }));
  }, [readonly, disabled, formState.isSubmitting, formState.data, validateFormData, visibleFields, onSubmit]);
  const handleReset = (0, import_react14.useCallback)(() => {
    if (readonly || disabled) return;
    setFormState({
      data: { ...initialData },
      errors: {},
      touched: {},
      isValid: true,
      isSubmitting: false,
      isDirty: false,
      lastSaved: void 0
    });
    savedDataRef.current = { ...initialData };
  }, [readonly, disabled, initialData]);
  const renderField = (0, import_react14.useCallback)((field) => {
    const fieldId = generateFieldId(field.name, workspaceId);
    const value = formState.data[field.name] || "";
    const error = formState.errors[field.name];
    const touched = formState.touched[field.name];
    return (0, import_jsx_runtime14.jsxs)("div", { className: "space-y-2", children: [
      (0, import_jsx_runtime14.jsxs)("label", { htmlFor: fieldId, className: "block text-sm font-medium text-gray-700", children: [
        field.label,
        field.required && (0, import_jsx_runtime14.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
      ] }),
      (0, import_jsx_runtime14.jsx)(
        "input",
        {
          id: fieldId,
          name: field.name,
          type: field.type || "text",
          placeholder: field.placeholder,
          value,
          disabled: disabled || readonly,
          onChange: (e) => handleFieldChange(field.name, e.target.value),
          className: `
            w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
            ${touched && error ? "border-red-500" : "border-gray-300"}
            ${disabled || readonly ? "bg-gray-50 cursor-not-allowed" : "bg-white"}
          `,
          ...field.props
        }
      ),
      touched && error && (0, import_jsx_runtime14.jsx)("p", { className: "text-sm text-red-600", children: error })
    ] }, field.name);
  }, [formState.data, formState.errors, formState.touched, disabled, readonly, workspaceId, handleFieldChange]);
  const renderAutoSaveIndicator = () => {
    if (!autoSave) return null;
    const statusMessages = {
      idle: "",
      saving: "Saving...",
      saved: "Saved",
      error: "Save failed"
    };
    const statusColors = {
      idle: "text-gray-500",
      saving: "text-blue-500",
      saved: "text-green-500",
      error: "text-red-500"
    };
    return (0, import_jsx_runtime14.jsxs)("div", { className: `text-sm ${statusColors[autoSaveStatus]} transition-colors duration-200`, children: [
      statusMessages[autoSaveStatus],
      formState.lastSaved && autoSaveStatus === "idle" && (0, import_jsx_runtime14.jsxs)("span", { className: "text-gray-400 ml-2", children: [
        "Last saved: ",
        formState.lastSaved.toLocaleTimeString()
      ] })
    ] });
  };
  const renderFormLayout = () => {
    var _a2, _b2, _c;
    const layout = ((_a2 = schema.layout) == null ? void 0 : _a2.type) || "single-column";
    const spacing = ((_b2 = schema.layout) == null ? void 0 : _b2.spacing) || "normal";
    const spacingClasses = {
      compact: "space-y-3",
      normal: "space-y-4",
      relaxed: "space-y-6"
    };
    const layoutClasses = {
      "single-column": "grid grid-cols-1",
      "two-column": "grid grid-cols-1 md:grid-cols-2 gap-x-6",
      "grid": `grid grid-cols-1 md:grid-cols-${((_c = schema.layout) == null ? void 0 : _c.columns) || 2} gap-x-6`,
      "tabs": "space-y-4",
      "accordion": "space-y-2"
    };
    return (0, import_jsx_runtime14.jsx)("div", { className: `${layoutClasses[layout]} ${spacingClasses[spacing]}`, children: visibleFields.map(renderField) });
  };
  const getWorkspaceStyles = () => {
    const baseStyles = "bg-white border border-gray-200 rounded-lg shadow-sm";
    const workspaceStyles = {
      consultant: "border-blue-200 focus-within:border-blue-500",
      client: "border-green-200 focus-within:border-green-500",
      admin: "border-purple-200 focus-within:border-purple-500",
      expert: "border-orange-200 focus-within:border-orange-500",
      "tool-creator": "border-indigo-200 focus-within:border-indigo-500",
      founder: "border-red-200 focus-within:border-red-500",
      neutral: "border-gray-200 focus-within:border-gray-500"
    };
    return `${baseStyles} ${workspaceStyles[context]}`;
  };
  return (0, import_jsx_runtime14.jsxs)("div", { className: `form-builder ${className}`, children: [
    (((_a = schema.metadata) == null ? void 0 : _a.title) || completionPercentage < 100 || autoSave) && (0, import_jsx_runtime14.jsxs)("div", { className: "mb-6", children: [
      ((_b = schema.metadata) == null ? void 0 : _b.title) && (0, import_jsx_runtime14.jsxs)("div", { className: "mb-4", children: [
        (0, import_jsx_runtime14.jsx)("h2", { className: "text-xl font-semibold text-gray-900", children: schema.metadata.title }),
        schema.metadata.description && (0, import_jsx_runtime14.jsx)("p", { className: "text-gray-600 mt-1", children: schema.metadata.description })
      ] }),
      (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center justify-between", children: [
        (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center space-x-4", children: [
          (0, import_jsx_runtime14.jsxs)("div", { className: "text-sm text-gray-600", children: [
            "Progress: ",
            completionPercentage,
            "%"
          ] }),
          (0, import_jsx_runtime14.jsx)("div", { className: "w-32 bg-gray-200 rounded-full h-2", children: (0, import_jsx_runtime14.jsx)(
            "div",
            {
              className: "bg-blue-500 h-2 rounded-full transition-all duration-300",
              style: { width: `${completionPercentage}%` }
            }
          ) })
        ] }),
        renderAutoSaveIndicator()
      ] })
    ] }),
    (0, import_jsx_runtime14.jsxs)("form", { onSubmit: handleSubmit, className: getWorkspaceStyles(), children: [
      (0, import_jsx_runtime14.jsx)("div", { className: "p-6", children: loading ? (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center justify-center py-12", children: [
        (0, import_jsx_runtime14.jsx)("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500" }),
        (0, import_jsx_runtime14.jsx)("span", { className: "ml-3 text-gray-600", children: "Loading form..." })
      ] }) : renderFormLayout() }),
      !readonly && (0, import_jsx_runtime14.jsx)("div", { className: "px-6 py-4 bg-gray-50 border-t border-gray-200 rounded-b-lg", children: (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center justify-between", children: [
        (0, import_jsx_runtime14.jsx)("div", { className: "flex items-center space-x-3", children: formState.isDirty && (0, import_jsx_runtime14.jsx)("span", { className: "text-sm text-orange-600", children: "You have unsaved changes" }) }),
        (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center space-x-3", children: [
          (0, import_jsx_runtime14.jsx)(
            Button,
            {
              type: "button",
              variant: "secondary",
              onClick: handleReset,
              disabled: disabled || formState.isSubmitting || !formState.isDirty,
              children: "Reset"
            }
          ),
          (0, import_jsx_runtime14.jsx)(
            Button,
            {
              type: "submit",
              variant: "primary",
              disabled: disabled || formState.isSubmitting || !formState.isValid,
              isLoading: formState.isSubmitting,
              children: formState.isSubmitting ? "Submitting..." : "Submit"
            }
          )
        ] })
      ] }) })
    ] }),
    collaborative && (0, import_jsx_runtime14.jsx)("div", { className: "mt-4 text-sm text-gray-500", children: (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center space-x-2", children: [
      (0, import_jsx_runtime14.jsx)("div", { className: "w-2 h-2 bg-green-500 rounded-full animate-pulse" }),
      (0, import_jsx_runtime14.jsx)("span", { children: "Collaborative editing enabled" })
    ] }) })
  ] });
}

// packages/layouts/src/components/forms/FormTemplate.tsx
var import_react15 = __toESM(require_react());
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
function useFormTemplate(template, options = {}) {
  const [currentTemplate, setCurrentTemplate] = (0, import_react15.useState)(template);
  const [isEditing, setIsEditing] = (0, import_react15.useState)(false);
  const [isDirty, setIsDirty] = (0, import_react15.useState)(false);
  const [isSaving, setIsSaving] = (0, import_react15.useState)(false);
  const [lastSaved, setLastSaved] = (0, import_react15.useState)(null);
  const debouncedAutoSave = (0, import_react15.useMemo)(() => {
    if (!options.autoSave) return null;
    return debounce2((template2) => {
      setIsSaving(true);
      setTimeout(() => {
        setIsSaving(false);
        setLastSaved(/* @__PURE__ */ new Date());
        setIsDirty(false);
      }, 500);
    }, options.autoSaveInterval || 2e3);
  }, [options.autoSave, options.autoSaveInterval]);
  const updateTemplate = (0, import_react15.useCallback)((updates) => {
    if (!currentTemplate) return;
    const updatedTemplate = { ...currentTemplate, ...updates };
    setCurrentTemplate(updatedTemplate);
    setIsDirty(true);
    if (options.onTemplateChange) {
      options.onTemplateChange(updatedTemplate);
    }
    if (debouncedAutoSave) {
      debouncedAutoSave(updatedTemplate);
    }
  }, [currentTemplate, options, debouncedAutoSave]);
  const saveTemplate = (0, import_react15.useCallback)(async () => {
    if (!currentTemplate || !isDirty) return;
    setIsSaving(true);
    try {
      if (options.onTemplateSave) {
        options.onTemplateSave(currentTemplate);
      }
      setLastSaved(/* @__PURE__ */ new Date());
      setIsDirty(false);
    } finally {
      setIsSaving(false);
    }
  }, [currentTemplate, isDirty, options]);
  const startEditing = (0, import_react15.useCallback)(() => {
    setIsEditing(true);
  }, []);
  const stopEditing = (0, import_react15.useCallback)(() => {
    setIsEditing(false);
  }, []);
  const cancelEditing = (0, import_react15.useCallback)(() => {
    setCurrentTemplate(template);
    setIsEditing(false);
    setIsDirty(false);
  }, [template]);
  return {
    currentTemplate,
    isEditing,
    isDirty,
    isSaving,
    lastSaved,
    updateTemplate,
    saveTemplate,
    startEditing,
    stopEditing,
    cancelEditing
  };
}
function TemplateMetadataEditor({
  metadata,
  onMetadataChange,
  context,
  disabled = false
}) {
  var _a;
  const handleChange = (field, value) => {
    onMetadataChange({
      ...metadata,
      [field]: value
    });
  };
  return (0, import_jsx_runtime15.jsxs)("div", { className: "space-y-4", children: [
    (0, import_jsx_runtime15.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
      (0, import_jsx_runtime15.jsxs)("div", { children: [
        (0, import_jsx_runtime15.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Template Name *" }),
        (0, import_jsx_runtime15.jsx)(
          "input",
          {
            type: "text",
            value: metadata.name,
            onChange: (e) => handleChange("name", e.target.value),
            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
            placeholder: "Enter template name",
            disabled
          }
        )
      ] }),
      (0, import_jsx_runtime15.jsxs)("div", { children: [
        (0, import_jsx_runtime15.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Category" }),
        (0, import_jsx_runtime15.jsxs)(
          "select",
          {
            value: metadata.category,
            onChange: (e) => handleChange("category", e.target.value),
            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
            disabled,
            children: [
              (0, import_jsx_runtime15.jsx)("option", { value: "general", children: "General" }),
              (0, import_jsx_runtime15.jsx)("option", { value: "onboarding", children: "Onboarding" }),
              (0, import_jsx_runtime15.jsx)("option", { value: "survey", children: "Survey" }),
              (0, import_jsx_runtime15.jsx)("option", { value: "application", children: "Application" }),
              (0, import_jsx_runtime15.jsx)("option", { value: "feedback", children: "Feedback" }),
              (0, import_jsx_runtime15.jsx)("option", { value: "registration", children: "Registration" }),
              (0, import_jsx_runtime15.jsx)("option", { value: "contact", children: "Contact" }),
              (0, import_jsx_runtime15.jsx)("option", { value: "custom", children: "Custom" })
            ]
          }
        )
      ] })
    ] }),
    (0, import_jsx_runtime15.jsxs)("div", { children: [
      (0, import_jsx_runtime15.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Description" }),
      (0, import_jsx_runtime15.jsx)(
        "textarea",
        {
          value: metadata.description || "",
          onChange: (e) => handleChange("description", e.target.value),
          className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
          placeholder: "Describe what this template is for",
          rows: 3,
          disabled
        }
      )
    ] }),
    (0, import_jsx_runtime15.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [
      (0, import_jsx_runtime15.jsxs)("div", { children: [
        (0, import_jsx_runtime15.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Version" }),
        (0, import_jsx_runtime15.jsx)(
          "input",
          {
            type: "text",
            value: metadata.version,
            onChange: (e) => handleChange("version", e.target.value),
            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
            placeholder: "1.0.0",
            disabled
          }
        )
      ] }),
      (0, import_jsx_runtime15.jsxs)("div", { children: [
        (0, import_jsx_runtime15.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Author" }),
        (0, import_jsx_runtime15.jsx)(
          "input",
          {
            type: "text",
            value: metadata.author || "",
            onChange: (e) => handleChange("author", e.target.value),
            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
            placeholder: "Template author",
            disabled
          }
        )
      ] }),
      (0, import_jsx_runtime15.jsxs)("div", { children: [
        (0, import_jsx_runtime15.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Estimated Time (minutes)" }),
        (0, import_jsx_runtime15.jsx)(
          "input",
          {
            type: "number",
            value: metadata.estimatedTime || "",
            onChange: (e) => handleChange("estimatedTime", parseInt(e.target.value) || void 0),
            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
            placeholder: "5",
            min: "1",
            disabled
          }
        )
      ] })
    ] }),
    (0, import_jsx_runtime15.jsxs)("div", { children: [
      (0, import_jsx_runtime15.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Tags" }),
      (0, import_jsx_runtime15.jsx)(
        "input",
        {
          type: "text",
          value: ((_a = metadata.tags) == null ? void 0 : _a.join(", ")) || "",
          onChange: (e) => handleChange("tags", e.target.value.split(",").map((tag) => tag.trim()).filter(Boolean)),
          className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
          placeholder: "tag1, tag2, tag3",
          disabled
        }
      ),
      (0, import_jsx_runtime15.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: "Separate tags with commas" })
    ] }),
    (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center space-x-4", children: [
      (0, import_jsx_runtime15.jsxs)("label", { className: "flex items-center", children: [
        (0, import_jsx_runtime15.jsx)(
          "input",
          {
            type: "checkbox",
            checked: metadata.isPublic || false,
            onChange: (e) => handleChange("isPublic", e.target.checked),
            className: "mr-2",
            disabled
          }
        ),
        (0, import_jsx_runtime15.jsx)("span", { className: "text-sm text-gray-700", children: "Make template public" })
      ] }),
      (0, import_jsx_runtime15.jsxs)("label", { className: "flex items-center", children: [
        (0, import_jsx_runtime15.jsx)(
          "input",
          {
            type: "checkbox",
            checked: metadata.isShared || false,
            onChange: (e) => handleChange("isShared", e.target.checked),
            className: "mr-2",
            disabled
          }
        ),
        (0, import_jsx_runtime15.jsx)("span", { className: "text-sm text-gray-700", children: "Allow sharing" })
      ] })
    ] })
  ] });
}
function TemplatePreview({ template, context }) {
  const visibleFields = (0, import_react15.useMemo)(() => {
    return getVisibleFields(template.fields, {}, [], context);
  }, [template.fields, context]);
  return (0, import_jsx_runtime15.jsxs)("div", { className: "space-y-6", children: [
    (0, import_jsx_runtime15.jsxs)("div", { className: "border-b border-gray-200 pb-4", children: [
      (0, import_jsx_runtime15.jsx)("h3", { className: "text-lg font-medium text-gray-900", children: template.metadata.name }),
      template.metadata.description && (0, import_jsx_runtime15.jsx)("p", { className: "text-gray-600 mt-1", children: template.metadata.description }),
      (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center space-x-4 mt-2 text-sm text-gray-500", children: [
        (0, import_jsx_runtime15.jsxs)("span", { children: [
          "Category: ",
          template.metadata.category
        ] }),
        (0, import_jsx_runtime15.jsxs)("span", { children: [
          "Version: ",
          template.metadata.version
        ] }),
        template.metadata.estimatedTime && (0, import_jsx_runtime15.jsxs)("span", { children: [
          "Est. time: ",
          template.metadata.estimatedTime,
          " min"
        ] })
      ] })
    ] }),
    (0, import_jsx_runtime15.jsxs)("div", { className: "space-y-4", children: [
      (0, import_jsx_runtime15.jsxs)("h4", { className: "font-medium text-gray-900", children: [
        "Form Fields (",
        visibleFields.length,
        ")"
      ] }),
      (0, import_jsx_runtime15.jsx)("div", { className: "grid grid-cols-1 gap-4", children: visibleFields.map((field, index) => (0, import_jsx_runtime15.jsxs)("div", { className: "border border-gray-200 rounded-md p-3", children: [
        (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
          (0, import_jsx_runtime15.jsxs)("span", { className: "font-medium text-sm text-gray-900", children: [
            field.label,
            field.required && (0, import_jsx_runtime15.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
          ] }),
          (0, import_jsx_runtime15.jsx)("span", { className: "text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded", children: field.type })
        ] }),
        field.placeholder && (0, import_jsx_runtime15.jsxs)("p", { className: "text-xs text-gray-500", children: [
          "Placeholder: ",
          field.placeholder
        ] }),
        field.validation && (0, import_jsx_runtime15.jsxs)("p", { className: "text-xs text-gray-500", children: [
          "Validation: ",
          JSON.stringify(field.validation)
        ] })
      ] }, field.name)) })
    ] }),
    template.metadata.tags && template.metadata.tags.length > 0 && (0, import_jsx_runtime15.jsxs)("div", { children: [
      (0, import_jsx_runtime15.jsx)("h4", { className: "font-medium text-gray-900 mb-2", children: "Tags" }),
      (0, import_jsx_runtime15.jsx)("div", { className: "flex flex-wrap gap-2", children: template.metadata.tags.map((tag, index) => (0, import_jsx_runtime15.jsx)(
        "span",
        {
          className: "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800",
          children: tag
        },
        index
      )) })
    ] })
  ] });
}
function FormTemplate({
  context = "neutral",
  template: initialTemplate,
  mode = "view",
  onTemplateChange,
  onTemplateSave,
  onTemplateUse,
  onTemplateShare,
  onTemplateDelete,
  autoSave = false,
  autoSaveInterval = 2e3,
  permissions = [],
  className = "",
  loading = false,
  disabled = false
}) {
  const workspace = { type: "neutral" };
  const workspaceContext = context || (workspace == null ? void 0 : workspace.type) || "neutral";
  const {
    currentTemplate,
    isEditing,
    isDirty,
    isSaving,
    lastSaved,
    updateTemplate,
    saveTemplate,
    startEditing,
    stopEditing,
    cancelEditing
  } = useFormTemplate(initialTemplate || null, {
    autoSave,
    autoSaveInterval,
    onTemplateChange,
    onTemplateSave,
    context: workspaceContext,
    permissions
  });
  const handleMetadataChange = (0, import_react15.useCallback)((metadata) => {
    updateTemplate({ metadata });
  }, [updateTemplate]);
  const handleUseTemplate = (0, import_react15.useCallback)(() => {
    if (currentTemplate && onTemplateUse) {
      onTemplateUse(currentTemplate);
    }
  }, [currentTemplate, onTemplateUse]);
  const handleShareTemplate = (0, import_react15.useCallback)(() => {
    if (currentTemplate && onTemplateShare) {
      onTemplateShare(currentTemplate);
    }
  }, [currentTemplate, onTemplateShare]);
  const handleDeleteTemplate = (0, import_react15.useCallback)(() => {
    if (currentTemplate && onTemplateDelete) {
      onTemplateDelete(currentTemplate);
    }
  }, [currentTemplate, onTemplateDelete]);
  const baseClasses = `
    bg-white rounded-lg shadow-sm border border-gray-200 p-6
    ${className}
  `;
  if (loading) {
    return (0, import_jsx_runtime15.jsx)("div", { className: baseClasses, children: (0, import_jsx_runtime15.jsxs)("div", { className: "animate-pulse space-y-6", children: [
      (0, import_jsx_runtime15.jsx)("div", { className: "h-4 bg-gray-200 rounded w-1/4" }),
      (0, import_jsx_runtime15.jsxs)("div", { className: "space-y-3", children: [
        (0, import_jsx_runtime15.jsx)("div", { className: "h-4 bg-gray-200 rounded" }),
        (0, import_jsx_runtime15.jsx)("div", { className: "h-4 bg-gray-200 rounded w-5/6" })
      ] })
    ] }) });
  }
  if (!currentTemplate) {
    return (0, import_jsx_runtime15.jsx)("div", { className: baseClasses, children: (0, import_jsx_runtime15.jsx)("div", { className: "text-center py-8", children: (0, import_jsx_runtime15.jsx)("div", { className: "text-gray-500", children: "No template selected" }) }) });
  }
  return (0, import_jsx_runtime15.jsxs)("div", { className: baseClasses, children: [
    (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center justify-between mb-6", children: [
      (0, import_jsx_runtime15.jsxs)("div", { children: [
        (0, import_jsx_runtime15.jsx)("h2", { className: "text-xl font-semibold text-gray-900", children: mode === "edit" || isEditing ? "Edit Template" : "Template" }),
        lastSaved && (0, import_jsx_runtime15.jsxs)("p", { className: "text-sm text-gray-500", children: [
          "Last saved: ",
          lastSaved.toLocaleTimeString()
        ] })
      ] }),
      (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center space-x-2", children: [
        mode === "view" && !isEditing && (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [
          (0, import_jsx_runtime15.jsx)(
            Button,
            {
              variant: "secondary",
              onClick: handleUseTemplate,
              disabled,
              children: "Use Template"
            }
          ),
          currentTemplate.metadata.isShared && (0, import_jsx_runtime15.jsx)(
            Button,
            {
              variant: "ghost",
              onClick: handleShareTemplate,
              disabled,
              children: "Share"
            }
          ),
          (0, import_jsx_runtime15.jsx)(
            Button,
            {
              variant: "ghost",
              onClick: startEditing,
              disabled,
              children: "Edit"
            }
          )
        ] }),
        (mode === "edit" || isEditing) && (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [
          (0, import_jsx_runtime15.jsx)(
            Button,
            {
              variant: "ghost",
              onClick: cancelEditing,
              disabled: disabled || isSaving,
              children: "Cancel"
            }
          ),
          (0, import_jsx_runtime15.jsx)(
            Button,
            {
              variant: "primary",
              onClick: saveTemplate,
              disabled: disabled || !isDirty || isSaving,
              isLoading: isSaving,
              children: "Save"
            }
          )
        ] }),
        mode === "view" && !isEditing && onTemplateDelete && (0, import_jsx_runtime15.jsx)(
          Button,
          {
            variant: "ghost",
            onClick: handleDeleteTemplate,
            disabled,
            className: "text-red-600 hover:text-red-700",
            children: "Delete"
          }
        )
      ] })
    ] }),
    mode === "edit" || isEditing ? (0, import_jsx_runtime15.jsxs)("div", { className: "space-y-6", children: [
      (0, import_jsx_runtime15.jsxs)("div", { children: [
        (0, import_jsx_runtime15.jsx)("h3", { className: "text-lg font-medium text-gray-900 mb-4", children: "Template Information" }),
        (0, import_jsx_runtime15.jsx)(
          TemplateMetadataEditor,
          {
            metadata: currentTemplate.metadata,
            onMetadataChange: handleMetadataChange,
            context: workspaceContext,
            disabled: disabled || isSaving
          }
        )
      ] }),
      (0, import_jsx_runtime15.jsxs)("div", { children: [
        (0, import_jsx_runtime15.jsx)("h3", { className: "text-lg font-medium text-gray-900 mb-4", children: "Form Preview" }),
        (0, import_jsx_runtime15.jsx)(
          TemplatePreview,
          {
            template: currentTemplate,
            context: workspaceContext
          }
        )
      ] })
    ] }) : (0, import_jsx_runtime15.jsx)(
      TemplatePreview,
      {
        template: currentTemplate,
        context: workspaceContext
      }
    ),
    autoSave && isSaving && (0, import_jsx_runtime15.jsx)("div", { className: "mt-4 text-xs text-gray-500 text-center", children: "Saving..." })
  ] });
}

// packages/layouts/src/components/forms/FormWizard.tsx
var import_react16 = __toESM(require_react());
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
function useFormWizard(steps, initialData = {}, options = {}) {
  const [currentStep, setCurrentStep] = (0, import_react16.useState)(0);
  const [formState, setFormState] = (0, import_react16.useState)({
    data: initialData,
    errors: {},
    touched: {},
    isValid: false,
    isSubmitting: false,
    isDirty: false,
    currentStep: 0
  });
  const totalSteps = steps.length;
  const isFirstStep = currentStep === 0;
  const isLastStep = currentStep === totalSteps - 1;
  const currentStepConfig = steps[currentStep];
  const visibleFields = (0, import_react16.useMemo)(() => {
    if (!currentStepConfig) return [];
    return getVisibleFields(
      currentStepConfig.fields,
      formState.data,
      options.permissions,
      options.context
    );
  }, [currentStepConfig, formState.data, options.permissions, options.context]);
  const validateCurrentStep = (0, import_react16.useCallback)(() => {
    if (!currentStepConfig) return true;
    const stepErrors = validateForm(
      visibleFields,
      formState.data,
      options.context
    );
    setFormState((prev) => ({
      ...prev,
      errors: { ...prev.errors, ...stepErrors },
      isValid: Object.keys(stepErrors).length === 0
    }));
    return Object.keys(stepErrors).length === 0;
  }, [currentStepConfig, visibleFields, formState.data, options.context]);
  const canGoNext = (0, import_react16.useMemo)(() => {
    if (isLastStep) return false;
    const stepErrors = validateForm(
      visibleFields,
      formState.data,
      options.context
    );
    return Object.keys(stepErrors).length === 0;
  }, [isLastStep, visibleFields, formState.data, options.context]);
  const canGoPrevious = !isFirstStep;
  const debouncedAutoSave = (0, import_react16.useMemo)(() => {
    if (!options.autoSave) return null;
    return debounce2((data) => {
      setFormState((prev) => ({
        ...prev,
        lastSaved: /* @__PURE__ */ new Date()
      }));
    }, options.autoSaveInterval || 2e3);
  }, [options.autoSave, options.autoSaveInterval]);
  const setValue = (0, import_react16.useCallback)((field, value) => {
    setFormState((prev) => {
      const newData = { ...prev.data, [field]: value };
      const newState = {
        ...prev,
        data: newData,
        touched: { ...prev.touched, [field]: true },
        isDirty: hasUnsavedChanges(newData, initialData)
      };
      if (debouncedAutoSave) {
        debouncedAutoSave(newData);
      }
      return newState;
    });
  }, [debouncedAutoSave, initialData]);
  const setError = (0, import_react16.useCallback)((field, error) => {
    setFormState((prev) => ({
      ...prev,
      errors: { ...prev.errors, [field]: error }
    }));
  }, []);
  const clearError = (0, import_react16.useCallback)((field) => {
    setFormState((prev) => {
      const newErrors = { ...prev.errors };
      delete newErrors[field];
      return {
        ...prev,
        errors: newErrors
      };
    });
  }, []);
  const nextStep = (0, import_react16.useCallback)(() => {
    if (!canGoNext) return;
    const newStep = Math.min(currentStep + 1, totalSteps - 1);
    setCurrentStep(newStep);
    setFormState((prev) => ({ ...prev, currentStep: newStep }));
    if (options.onStepChange) {
      options.onStepChange(newStep, formState.data);
    }
  }, [canGoNext, currentStep, totalSteps, formState.data, options]);
  const previousStep = (0, import_react16.useCallback)(() => {
    if (!canGoPrevious) return;
    const newStep = Math.max(currentStep - 1, 0);
    setCurrentStep(newStep);
    setFormState((prev) => ({ ...prev, currentStep: newStep }));
    if (options.onStepChange) {
      options.onStepChange(newStep, formState.data);
    }
  }, [canGoPrevious, currentStep, formState.data, options]);
  const goToStep = (0, import_react16.useCallback)((step) => {
    if (step < 0 || step >= totalSteps) return;
    setCurrentStep(step);
    setFormState((prev) => ({ ...prev, currentStep: step }));
    if (options.onStepChange) {
      options.onStepChange(step, formState.data);
    }
  }, [totalSteps, formState.data, options]);
  const validate = (0, import_react16.useCallback)(() => {
    return validateCurrentStep();
  }, [validateCurrentStep]);
  const reset = (0, import_react16.useCallback)(() => {
    setCurrentStep(0);
    setFormState({
      data: initialData,
      errors: {},
      touched: {},
      isValid: false,
      isSubmitting: false,
      isDirty: false,
      currentStep: 0
    });
  }, [initialData]);
  const submit = (0, import_react16.useCallback)(() => {
    if (!isLastStep || !canGoNext) return;
    setFormState((prev) => ({ ...prev, isSubmitting: true }));
    if (options.onComplete) {
      options.onComplete(formState.data);
    }
  }, [isLastStep, canGoNext, formState.data, options]);
  return {
    formState,
    setValue,
    setError,
    clearError,
    validate,
    reset,
    submit,
    currentStep,
    totalSteps,
    canGoNext,
    canGoPrevious,
    nextStep,
    previousStep,
    goToStep,
    isFirstStep,
    isLastStep
  };
}
function WizardProgress({ steps, currentStep, completedSteps, context }) {
  const getStepStatus = (stepIndex) => {
    if (completedSteps.includes(stepIndex)) return "completed";
    if (stepIndex === currentStep) return "current";
    if (stepIndex < currentStep) return "completed";
    return "upcoming";
  };
  const getStepClasses = (stepIndex) => {
    const status = getStepStatus(stepIndex);
    const baseClasses = "flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium transition-colors";
    switch (status) {
      case "completed":
        return `${baseClasses} bg-green-500 text-white`;
      case "current":
        return `${baseClasses} bg-blue-500 text-white ring-2 ring-blue-200`;
      case "upcoming":
        return `${baseClasses} bg-gray-200 text-gray-500`;
      default:
        return baseClasses;
    }
  };
  return (0, import_jsx_runtime16.jsx)("div", { className: "mb-8", children: (0, import_jsx_runtime16.jsx)("div", { className: "flex items-center justify-between", children: steps.map((step, index) => (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center", children: [
    (0, import_jsx_runtime16.jsxs)("div", { className: "flex flex-col items-center", children: [
      (0, import_jsx_runtime16.jsx)("div", { className: getStepClasses(index), children: completedSteps.includes(index) ? (0, import_jsx_runtime16.jsx)("svg", { className: "w-4 h-4", fill: "currentColor", viewBox: "0 0 20 20", children: (0, import_jsx_runtime16.jsx)("path", { fillRule: "evenodd", d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z", clipRule: "evenodd" }) }) : (0, import_jsx_runtime16.jsx)("span", { children: index + 1 }) }),
      (0, import_jsx_runtime16.jsxs)("div", { className: "mt-2 text-center", children: [
        (0, import_jsx_runtime16.jsx)("div", { className: "text-sm font-medium text-gray-900", children: step.title }),
        step.estimatedTime && (0, import_jsx_runtime16.jsxs)("div", { className: "text-xs text-gray-500", children: [
          step.estimatedTime,
          " min"
        ] })
      ] })
    ] }),
    index < steps.length - 1 && (0, import_jsx_runtime16.jsx)("div", { className: "flex-1 mx-4 h-0.5 bg-gray-200", children: (0, import_jsx_runtime16.jsx)(
      "div",
      {
        className: "h-full bg-blue-500 transition-all duration-300",
        style: {
          width: index < currentStep ? "100%" : "0%"
        }
      }
    ) })
  ] }, step.id)) }) });
}
function WizardStepContent({
  step,
  formData,
  errors,
  onFieldChange,
  context,
  permissions
}) {
  const visibleFields = getVisibleFields(step.fields, formData, permissions, context);
  return (0, import_jsx_runtime16.jsxs)("div", { className: "space-y-6", children: [
    step.description && (0, import_jsx_runtime16.jsx)("div", { className: "text-gray-600 mb-6", children: step.description }),
    (0, import_jsx_runtime16.jsx)("div", { className: "grid grid-cols-1 gap-6", children: visibleFields.map((field) => (0, import_jsx_runtime16.jsxs)("div", { className: "space-y-2", children: [
      (0, import_jsx_runtime16.jsxs)("label", { className: "block text-sm font-medium text-gray-700", children: [
        field.label,
        field.required && (0, import_jsx_runtime16.jsx)("span", { className: "text-red-500 ml-1", children: "*" })
      ] }),
      (0, import_jsx_runtime16.jsx)(
        "input",
        {
          type: field.type || "text",
          value: formData[field.name] || "",
          onChange: (e) => onFieldChange(field.name, e.target.value),
          className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
          placeholder: field.placeholder,
          disabled: field.disabled || false
        }
      ),
      errors[field.name] && (0, import_jsx_runtime16.jsx)("p", { className: "text-sm text-red-600", children: errors[field.name] })
    ] }, field.name)) })
  ] });
}
function FormWizard({
  context = "neutral",
  steps,
  initialData = {},
  currentStep: controlledCurrentStep,
  onStepChange,
  onComplete,
  onCancel,
  template,
  workspaceId,
  autoSave = false,
  autoSaveInterval = 2e3,
  showProgress = true,
  allowStepSkip = false,
  allowStepBack = true,
  permissions = [],
  className = "",
  loading = false,
  disabled = false
}) {
  const workspace = { type: "neutral" };
  const workspaceContext = context || (workspace == null ? void 0 : workspace.type) || "neutral";
  const isControlled = controlledCurrentStep !== void 0;
  const {
    formState,
    setValue,
    setError,
    clearError,
    validate,
    reset,
    submit,
    currentStep: internalCurrentStep,
    totalSteps,
    canGoNext,
    canGoPrevious,
    nextStep: internalNextStep,
    previousStep: internalPreviousStep,
    goToStep: internalGoToStep,
    isFirstStep,
    isLastStep
  } = useFormWizard(steps, initialData, {
    autoSave,
    autoSaveInterval,
    onStepChange,
    onComplete,
    context: workspaceContext,
    permissions
  });
  const currentStep = isControlled ? controlledCurrentStep : internalCurrentStep;
  const nextStep = isControlled ? () => onStepChange == null ? void 0 : onStepChange(currentStep + 1, formState.data) : internalNextStep;
  const previousStep = isControlled ? () => onStepChange == null ? void 0 : onStepChange(currentStep - 1, formState.data) : internalPreviousStep;
  const goToStep = isControlled ? (step) => onStepChange == null ? void 0 : onStepChange(step, formState.data) : internalGoToStep;
  const [completedSteps, setCompletedSteps] = (0, import_react16.useState)([]);
  (0, import_react16.useEffect)(() => {
    if (currentStep > 0 && !completedSteps.includes(currentStep - 1)) {
      setCompletedSteps((prev) => [...prev, currentStep - 1]);
    }
  }, [currentStep, completedSteps]);
  const currentStepConfig = steps[currentStep];
  if (!currentStepConfig) {
    return (0, import_jsx_runtime16.jsx)("div", { className: "text-center py-8", children: (0, import_jsx_runtime16.jsx)("div", { className: "text-red-600", children: "Invalid step configuration" }) });
  }
  const overallProgress = Math.round((currentStep + 1) / totalSteps * 100);
  const handleFieldChange = (field, value) => {
    setValue(field, value);
    clearError(field);
  };
  const handleNext = () => {
    if (validate()) {
      nextStep();
    }
  };
  const handleComplete = () => {
    if (validate()) {
      submit();
    }
  };
  const baseClasses = `
    bg-white rounded-lg shadow-sm border border-gray-200 p-6
    ${className}
  `;
  if (loading) {
    return (0, import_jsx_runtime16.jsx)("div", { className: baseClasses, children: (0, import_jsx_runtime16.jsxs)("div", { className: "animate-pulse space-y-6", children: [
      (0, import_jsx_runtime16.jsx)("div", { className: "h-4 bg-gray-200 rounded w-1/4" }),
      (0, import_jsx_runtime16.jsxs)("div", { className: "space-y-3", children: [
        (0, import_jsx_runtime16.jsx)("div", { className: "h-4 bg-gray-200 rounded" }),
        (0, import_jsx_runtime16.jsx)("div", { className: "h-4 bg-gray-200 rounded w-5/6" })
      ] })
    ] }) });
  }
  return (0, import_jsx_runtime16.jsxs)("div", { className: baseClasses, children: [
    showProgress && (0, import_jsx_runtime16.jsx)(
      WizardProgress,
      {
        steps,
        currentStep,
        completedSteps,
        context: workspaceContext
      }
    ),
    (0, import_jsx_runtime16.jsxs)("div", { className: "mb-6", children: [
      (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [
        (0, import_jsx_runtime16.jsx)("h2", { className: "text-xl font-semibold text-gray-900", children: currentStepConfig.title }),
        (0, import_jsx_runtime16.jsxs)("div", { className: "text-sm text-gray-500", children: [
          "Step ",
          currentStep + 1,
          " of ",
          totalSteps,
          " (",
          overallProgress,
          "%)"
        ] })
      ] }),
      (0, import_jsx_runtime16.jsx)("div", { className: "w-full bg-gray-200 rounded-full h-2", children: (0, import_jsx_runtime16.jsx)(
        "div",
        {
          className: "bg-blue-500 h-2 rounded-full transition-all duration-300",
          style: { width: `${overallProgress}%` }
        }
      ) })
    ] }),
    (0, import_jsx_runtime16.jsx)(
      WizardStepContent,
      {
        step: currentStepConfig,
        formData: formState.data,
        errors: formState.errors,
        onFieldChange: handleFieldChange,
        context: workspaceContext,
        permissions
      }
    ),
    (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center justify-between mt-8 pt-6 border-t border-gray-200", children: [
      (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center space-x-3", children: [
        allowStepBack && canGoPrevious && (0, import_jsx_runtime16.jsx)(
          Button,
          {
            variant: "secondary",
            onClick: previousStep,
            disabled: disabled || formState.isSubmitting,
            children: "Previous"
          }
        ),
        onCancel && (0, import_jsx_runtime16.jsx)(
          Button,
          {
            variant: "ghost",
            onClick: onCancel,
            disabled: disabled || formState.isSubmitting,
            children: "Cancel"
          }
        )
      ] }),
      (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center space-x-3", children: [
        allowStepSkip && !isLastStep && (0, import_jsx_runtime16.jsx)(
          Button,
          {
            variant: "ghost",
            onClick: nextStep,
            disabled: disabled || formState.isSubmitting,
            children: "Skip"
          }
        ),
        isLastStep ? (0, import_jsx_runtime16.jsx)(
          Button,
          {
            variant: "primary",
            onClick: handleComplete,
            disabled: disabled || !canGoNext || formState.isSubmitting,
            isLoading: formState.isSubmitting,
            children: "Complete"
          }
        ) : (0, import_jsx_runtime16.jsx)(
          Button,
          {
            variant: "primary",
            onClick: handleNext,
            disabled: disabled || !canGoNext || formState.isSubmitting,
            children: "Next"
          }
        )
      ] })
    ] }),
    autoSave && formState.lastSaved && (0, import_jsx_runtime16.jsxs)("div", { className: "mt-4 text-xs text-gray-500 text-center", children: [
      "Last saved: ",
      formState.lastSaved.toLocaleTimeString()
    ] })
  ] });
}

// packages/layouts/src/components/communication/chat/ChatInterface.tsx
var import_react17 = __toESM(require_react());

// packages/layouts/src/lib/utils.ts
function cn2(...inputs) {
  return twMerge(clsx(inputs));
}

// packages/layouts/src/components/communication/chat/ChatInterface.tsx
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var useRealTimeCollaboration = () => {
  return {
    socket: {
      on: (event, handler) => {
      },
      off: (event) => {
      },
      emit: (event, data) => {
      }
    }
  };
};
var useWorkspace = () => {
  return {
    hasPermission: (permission) => true
  };
};
var formatDate = (date) => {
  const now = /* @__PURE__ */ new Date();
  const diff = now.getTime() - date.getTime();
  const minutes = Math.floor(diff / 6e4);
  const hours = Math.floor(diff / 36e5);
  const days = Math.floor(diff / 864e5);
  if (minutes < 1) return "Just now";
  if (minutes < 60) return `${minutes}m ago`;
  if (hours < 24) return `${hours}h ago`;
  if (days < 7) return `${days}d ago`;
  return date.toLocaleDateString();
};
var ChatList = ({
  chats,
  selectedChat,
  onChatSelect,
  context = "consultant",
  currentUser
}) => {
  const [searchQuery, setSearchQuery] = (0, import_react17.useState)("");
  const filteredChats = (0, import_react17.useMemo)(() => {
    if (!searchQuery) return chats;
    return chats.filter(
      (chat) => {
        var _a;
        return ((_a = chat.name) == null ? void 0 : _a.toLowerCase().includes(searchQuery.toLowerCase())) || chat.participants.some((p) => p.name.toLowerCase().includes(searchQuery.toLowerCase()));
      }
    );
  }, [chats, searchQuery]);
  const getContextStyles = (context2) => {
    const styles = {
      consultant: "border-l-blue-500 bg-blue-50",
      client: "border-l-green-500 bg-green-50",
      admin: "border-l-purple-500 bg-purple-50",
      expert: "border-l-orange-500 bg-orange-50",
      tool_creator: "border-l-indigo-500 bg-indigo-50",
      founder: "border-l-red-500 bg-red-50",
      neutral: "border-l-gray-500 bg-gray-50"
    };
    return styles[context2] || "border-l-gray-500 bg-gray-50";
  };
  return (0, import_jsx_runtime17.jsxs)("div", { className: "flex flex-col h-full bg-white border-r border-gray-200", children: [
    (0, import_jsx_runtime17.jsx)("div", { className: "p-4 border-b border-gray-200", children: (0, import_jsx_runtime17.jsxs)("div", { className: "relative", children: [
      (0, import_jsx_runtime17.jsx)(Icon, { name: "Search", className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }),
      (0, import_jsx_runtime17.jsx)(
        Input,
        {
          name: "search",
          placeholder: "Search conversations...",
          value: searchQuery,
          onChange: (e) => setSearchQuery(e.target.value),
          className: "pl-10"
        }
      )
    ] }) }),
    (0, import_jsx_runtime17.jsx)("div", { className: "flex-1 overflow-y-auto", children: filteredChats.length === 0 ? (0, import_jsx_runtime17.jsx)(
      EmptyState,
      {
        title: searchQuery ? "No conversations found" : "No conversations yet",
        description: "Start a new conversation to get started"
      }
    ) : (0, import_jsx_runtime17.jsx)("div", { className: "space-y-1 p-2", children: filteredChats.map((chat) => {
      var _a, _b, _c, _d, _e;
      return (0, import_jsx_runtime17.jsxs)(
        "div",
        {
          onClick: () => onChatSelect(chat),
          className: cn2(
            "flex items-center p-3 rounded-lg cursor-pointer transition-colors border-l-4",
            (selectedChat == null ? void 0 : selectedChat.id) === chat.id ? getContextStyles(context) : "border-l-transparent hover:bg-gray-50"
          ),
          children: [
            (0, import_jsx_runtime17.jsx)("div", { className: "flex-shrink-0 mr-3", children: chat.type === "direct" ? (0, import_jsx_runtime17.jsx)(
              Avatar,
              {
                src: ((_a = chat.participants.find((p) => p.id !== currentUser.id)) == null ? void 0 : _a.avatar) || ((_b = chat.participants[0]) == null ? void 0 : _b.avatar),
                alt: ((_c = chat.participants.find((p) => p.id !== currentUser.id)) == null ? void 0 : _c.name) || ((_d = chat.participants[0]) == null ? void 0 : _d.name),
                size: "md"
              }
            ) : (0, import_jsx_runtime17.jsx)("div", { className: "w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center", children: (0, import_jsx_runtime17.jsx)(Icon, { name: "Users", className: "w-5 h-5 text-gray-600" }) }) }),
            (0, import_jsx_runtime17.jsxs)("div", { className: "flex-1 min-w-0", children: [
              (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between", children: [
                (0, import_jsx_runtime17.jsx)("h3", { className: "text-sm font-medium text-gray-900 truncate", children: chat.name || chat.participants.filter((p) => p.id !== currentUser.id).map((p) => p.name).join(", ") }),
                chat.lastMessage && (0, import_jsx_runtime17.jsx)("span", { className: "text-xs text-gray-500", children: formatDate(chat.lastMessage.timestamp) })
              ] }),
              (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between mt-1", children: [
                (0, import_jsx_runtime17.jsx)("p", { className: "text-sm text-gray-600 truncate", children: ((_e = chat.lastMessage) == null ? void 0 : _e.content) || "No messages yet" }),
                chat.unreadCount > 0 && (0, import_jsx_runtime17.jsx)(Badge, { variant: "primary", size: "sm", children: chat.unreadCount })
              ] })
            ] })
          ]
        },
        chat.id
      );
    }) }) })
  ] });
};
var ChatHeader = ({ chat, context = "consultant", currentUser }) => {
  var _a, _b, _c, _d;
  const getContextColor = (context2) => {
    const colors = {
      consultant: "text-blue-600",
      client: "text-green-600",
      admin: "text-purple-600",
      expert: "text-orange-600",
      tool_creator: "text-indigo-600",
      founder: "text-red-600",
      neutral: "text-gray-600"
    };
    return colors[context2] || "text-gray-600";
  };
  return (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between p-4 border-b border-gray-200 bg-white", children: [
    (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center", children: [
      (0, import_jsx_runtime17.jsx)("div", { className: "flex-shrink-0 mr-3", children: chat.type === "direct" ? (0, import_jsx_runtime17.jsx)(
        Avatar,
        {
          src: ((_a = chat.participants.find((p) => p.id !== currentUser.id)) == null ? void 0 : _a.avatar) || ((_b = chat.participants[0]) == null ? void 0 : _b.avatar),
          alt: ((_c = chat.participants.find((p) => p.id !== currentUser.id)) == null ? void 0 : _c.name) || ((_d = chat.participants[0]) == null ? void 0 : _d.name),
          size: "md"
        }
      ) : (0, import_jsx_runtime17.jsx)("div", { className: "w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center", children: (0, import_jsx_runtime17.jsx)(Icon, { name: "Users", className: "w-5 h-5 text-gray-600" }) }) }),
      (0, import_jsx_runtime17.jsxs)("div", { children: [
        (0, import_jsx_runtime17.jsx)("h2", { className: "text-lg font-semibold text-gray-900", children: chat.name || chat.participants.filter((p) => p.id !== currentUser.id).map((p) => p.name).join(", ") }),
        (0, import_jsx_runtime17.jsxs)("p", { className: cn2("text-sm", getContextColor(context)), children: [
          chat.participants.length,
          " participant",
          chat.participants.length !== 1 ? "s" : ""
        ] })
      ] })
    ] }),
    (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center space-x-2", children: [
      (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: (0, import_jsx_runtime17.jsx)(Icon, { name: "Phone", className: "w-4 h-4" }) }),
      (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: (0, import_jsx_runtime17.jsx)(Icon, { name: "Video", className: "w-4 h-4" }) }),
      (0, import_jsx_runtime17.jsx)(Button, { variant: "ghost", size: "sm", children: (0, import_jsx_runtime17.jsx)(Icon, { name: "Info", className: "w-4 h-4" }) })
    ] })
  ] });
};
var MessageList = ({
  messages,
  currentUser,
  context = "consultant",
  onMessageReply,
  onMessageReact,
  loading
}) => {
  const getContextColor = (context2) => {
    const colors = {
      consultant: "bg-blue-500",
      client: "bg-green-500",
      admin: "bg-purple-500",
      expert: "bg-orange-500",
      tool_creator: "bg-indigo-500",
      founder: "bg-red-500",
      neutral: "bg-gray-500"
    };
    return colors[context2] || "bg-gray-500";
  };
  if (loading) {
    return (0, import_jsx_runtime17.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, import_jsx_runtime17.jsx)(Spinner, { size: "lg" }) });
  }
  if (messages.length === 0) {
    return (0, import_jsx_runtime17.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, import_jsx_runtime17.jsx)(
      EmptyState,
      {
        title: "No messages yet",
        description: "Start the conversation!"
      }
    ) });
  }
  return (0, import_jsx_runtime17.jsx)("div", { className: "flex-1 overflow-y-auto p-4 space-y-4", children: messages.map((message) => {
    const isOwnMessage = message.sender.id === currentUser.id;
    return (0, import_jsx_runtime17.jsx)(
      "div",
      {
        className: cn2(
          "flex",
          isOwnMessage ? "justify-end" : "justify-start"
        ),
        children: (0, import_jsx_runtime17.jsxs)("div", { className: cn2("flex max-w-xs lg:max-w-md", isOwnMessage ? "flex-row-reverse" : "flex-row"), children: [
          !isOwnMessage && (0, import_jsx_runtime17.jsx)(
            Avatar,
            {
              src: message.sender.avatar,
              alt: message.sender.name,
              size: "sm",
              className: "flex-shrink-0 mr-2"
            }
          ),
          (0, import_jsx_runtime17.jsxs)("div", { className: cn2("flex flex-col", isOwnMessage ? "items-end" : "items-start"), children: [
            !isOwnMessage && (0, import_jsx_runtime17.jsx)("span", { className: "text-xs text-gray-500 mb-1", children: message.sender.name }),
            (0, import_jsx_runtime17.jsxs)(
              "div",
              {
                className: cn2(
                  "px-4 py-2 rounded-lg",
                  isOwnMessage ? cn2("text-white", getContextColor(context)) : "bg-gray-100 text-gray-900"
                ),
                children: [
                  (0, import_jsx_runtime17.jsx)("p", { className: "text-sm", children: message.content }),
                  message.attachments && message.attachments.length > 0 && (0, import_jsx_runtime17.jsx)("div", { className: "mt-2 space-y-1", children: message.attachments.map((attachment) => (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center space-x-2 text-xs", children: [
                    (0, import_jsx_runtime17.jsx)(Icon, { name: "Paperclip", className: "w-3 h-3" }),
                    (0, import_jsx_runtime17.jsx)("span", { children: attachment.name })
                  ] }, attachment.id)) })
                ]
              }
            ),
            (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center mt-1 space-x-2", children: [
              (0, import_jsx_runtime17.jsx)("span", { className: "text-xs text-gray-500", children: formatDate(message.timestamp) }),
              message.status === "read" && isOwnMessage && (0, import_jsx_runtime17.jsx)(Icon, { name: "CheckCheck", className: "w-3 h-3 text-blue-500" }),
              message.reactions && message.reactions.length > 0 && (0, import_jsx_runtime17.jsx)("div", { className: "flex space-x-1", children: message.reactions.map((reaction, index) => (0, import_jsx_runtime17.jsxs)("span", { className: "text-xs bg-gray-200 px-1 rounded", children: [
                reaction.emoji,
                " ",
                reaction.users.length
              ] }, index)) })
            ] })
          ] })
        ] })
      },
      message.id
    );
  }) });
};
var MessageInput = ({
  onSend,
  onTyping,
  context = "consultant",
  placeholder = "Type a message...",
  disabled
}) => {
  const [message, setMessage] = (0, import_react17.useState)("");
  const [attachments, setAttachments] = (0, import_react17.useState)([]);
  const handleSend = () => {
    if (message.trim() || attachments.length > 0) {
      onSend(message.trim(), attachments);
      setMessage("");
      setAttachments([]);
    }
  };
  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };
  const getContextColor = (context2) => {
    const colors = {
      consultant: "text-blue-600 hover:text-blue-700",
      client: "text-green-600 hover:text-green-700",
      admin: "text-purple-600 hover:text-purple-700",
      expert: "text-orange-600 hover:text-orange-700",
      tool_creator: "text-indigo-600 hover:text-indigo-700",
      founder: "text-red-600 hover:text-red-700",
      neutral: "text-gray-600 hover:text-gray-700"
    };
    return colors[context2] || "text-gray-600 hover:text-gray-700";
  };
  return (0, import_jsx_runtime17.jsx)("div", { className: "p-4 border-t border-gray-200 bg-white", children: (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-end space-x-2", children: [
    (0, import_jsx_runtime17.jsx)("div", { className: "flex-1", children: (0, import_jsx_runtime17.jsxs)("div", { className: "relative", children: [
      (0, import_jsx_runtime17.jsx)(
        "textarea",
        {
          value: message,
          onChange: (e) => {
            setMessage(e.target.value);
            onTyping == null ? void 0 : onTyping();
          },
          onKeyPress: handleKeyPress,
          placeholder,
          disabled,
          className: "w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent",
          rows: 1,
          style: { minHeight: "44px", maxHeight: "120px" }
        }
      ),
      attachments.length > 0 && (0, import_jsx_runtime17.jsx)("div", { className: "mt-2 flex flex-wrap gap-2", children: attachments.map((file, index) => (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center space-x-2 bg-gray-100 px-2 py-1 rounded text-sm", children: [
        (0, import_jsx_runtime17.jsx)(Icon, { name: "Paperclip", className: "w-3 h-3" }),
        (0, import_jsx_runtime17.jsx)("span", { children: file.name }),
        (0, import_jsx_runtime17.jsx)(
          "button",
          {
            onClick: () => setAttachments((prev) => prev.filter((_, i) => i !== index)),
            className: "text-gray-500 hover:text-red-500",
            children: (0, import_jsx_runtime17.jsx)(Icon, { name: "X", className: "w-3 h-3" })
          }
        )
      ] }, index)) })
    ] }) }),
    (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center space-x-2", children: [
      (0, import_jsx_runtime17.jsx)(
        "input",
        {
          type: "file",
          multiple: true,
          onChange: (e) => {
            if (e.target.files) {
              setAttachments((prev) => [...prev, ...Array.from(e.target.files)]);
            }
          },
          className: "hidden",
          id: "file-upload"
        }
      ),
      (0, import_jsx_runtime17.jsx)(
        Button,
        {
          variant: "ghost",
          size: "sm",
          onClick: () => {
            var _a;
            return (_a = document.getElementById("file-upload")) == null ? void 0 : _a.click();
          },
          disabled,
          children: (0, import_jsx_runtime17.jsx)(Icon, { name: "Paperclip", className: "w-4 h-4" })
        }
      ),
      (0, import_jsx_runtime17.jsx)(
        Button,
        {
          onClick: handleSend,
          disabled: disabled || !message.trim() && attachments.length === 0,
          className: cn2("px-4 py-2", getContextColor(context)),
          children: (0, import_jsx_runtime17.jsx)(Icon, { name: "Send", className: "w-4 h-4" })
        }
      )
    ] })
  ] }) });
};
var ChatInterface = ({
  workspace,
  currentUser,
  chatId,
  context = "consultant",
  onMessageSend,
  onChatSelect,
  showSidebar = true,
  showSearch = true,
  permissions = [],
  className
}) => {
  const [selectedChat, setSelectedChat] = (0, import_react17.useState)(null);
  const [messages, setMessages] = (0, import_react17.useState)([]);
  const [chats, setChats] = (0, import_react17.useState)([]);
  const [loading, setLoading] = (0, import_react17.useState)(false);
  const { socket } = useRealTimeCollaboration();
  const { hasPermission: hasPermission2 } = useWorkspace();
  (0, import_react17.useEffect)(() => {
    const mockChats = [
      {
        id: "1",
        type: "direct",
        participants: [
          currentUser,
          { id: "2", name: "John Doe", email: "john@example.com", avatar: "/avatars/john.jpg" }
        ],
        unreadCount: 2,
        workspace: workspace.id,
        createdAt: /* @__PURE__ */ new Date(),
        lastMessage: {
          id: "1",
          content: "Hey, how are you?",
          sender: { id: "2", name: "John Doe", email: "john@example.com" },
          timestamp: /* @__PURE__ */ new Date(),
          chatId: "1",
          status: "read"
        }
      }
    ];
    setChats(mockChats);
    if (chatId) {
      const chat = mockChats.find((c) => c.id === chatId);
      if (chat) setSelectedChat(chat);
    }
  }, [workspace.id, currentUser, chatId]);
  (0, import_react17.useEffect)(() => {
    socket.on("message:new", handleNewMessage);
    socket.on("message:update", handleMessageUpdate);
    socket.on("typing:start", handleTypingStart);
    socket.on("typing:stop", handleTypingStop);
    return () => {
      socket.off("message:new");
      socket.off("message:update");
      socket.off("typing:start");
      socket.off("typing:stop");
    };
  }, [socket]);
  const handleNewMessage = (message) => {
    setMessages((prev) => [...prev, message]);
  };
  const handleMessageUpdate = (message) => {
    setMessages((prev) => prev.map((m) => m.id === message.id ? message : m));
  };
  const handleTypingStart = (indicator) => {
  };
  const handleTypingStop = (indicator) => {
  };
  const handleChatSelect = (chat) => {
    setSelectedChat(chat);
    onChatSelect == null ? void 0 : onChatSelect(chat);
    setLoading(true);
    setTimeout(() => {
      const mockMessages = [
        {
          id: "1",
          content: "Hey, how are you?",
          sender: chat.participants.find((p) => p.id !== currentUser.id) || chat.participants[0],
          timestamp: new Date(Date.now() - 36e5),
          chatId: chat.id,
          status: "read"
        },
        {
          id: "2",
          content: "I'm doing well, thanks! How about you?",
          sender: currentUser,
          timestamp: new Date(Date.now() - 3e6),
          chatId: chat.id,
          status: "read"
        }
      ];
      setMessages(mockMessages);
      setLoading(false);
    }, 500);
  };
  const handleSendMessage = (content, attachments) => {
    if (!selectedChat) return;
    const newMessage = {
      id: Date.now().toString(),
      content,
      sender: currentUser,
      timestamp: /* @__PURE__ */ new Date(),
      chatId: selectedChat.id,
      status: "sending",
      attachments: attachments == null ? void 0 : attachments.map((file) => ({
        id: Date.now().toString(),
        name: file.name,
        type: file.type,
        size: file.size,
        url: URL.createObjectURL(file)
      }))
    };
    setMessages((prev) => [...prev, newMessage]);
    onMessageSend == null ? void 0 : onMessageSend(newMessage);
    setTimeout(() => {
      setMessages((prev) => prev.map(
        (m) => m.id === newMessage.id ? { ...m, status: "sent" } : m
      ));
    }, 1e3);
  };
  return (0, import_jsx_runtime17.jsxs)("div", { className: cn2("flex h-full bg-white rounded-lg shadow-lg overflow-hidden", className), children: [
    showSidebar && (0, import_jsx_runtime17.jsx)("div", { className: "w-80 flex-shrink-0", children: (0, import_jsx_runtime17.jsx)(
      ChatList,
      {
        chats,
        selectedChat,
        onChatSelect: handleChatSelect,
        context,
        currentUser
      }
    ) }),
    (0, import_jsx_runtime17.jsx)("div", { className: "flex-1 flex flex-col", children: selectedChat ? (0, import_jsx_runtime17.jsxs)(import_jsx_runtime17.Fragment, { children: [
      (0, import_jsx_runtime17.jsx)(
        ChatHeader,
        {
          chat: selectedChat,
          context,
          currentUser
        }
      ),
      (0, import_jsx_runtime17.jsx)(
        MessageList,
        {
          messages,
          currentUser,
          context,
          loading
        }
      ),
      (0, import_jsx_runtime17.jsx)(
        MessageInput,
        {
          onSend: handleSendMessage,
          context,
          placeholder: "Type a message...",
          disabled: !hasPermission2("chat:send")
        }
      )
    ] }) : (0, import_jsx_runtime17.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, import_jsx_runtime17.jsx)(
      EmptyState,
      {
        title: "Select a conversation",
        description: "Choose a conversation from the sidebar to start chatting"
      }
    ) }) })
  ] });
};

// packages/layouts/src/components/communication/comment/CommentThread.tsx
var import_react18 = __toESM(require_react());

// packages/layouts/src/components/communication/comment/types.ts
var WORKSPACE_COMMENT_THEMES = {
  consultant: {
    primary: "#8B5CF6",
    secondary: "#A78BFA",
    accent: "#C4B5FD",
    background: "#FAFAFA",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    border: "#E5E7EB",
    success: "#10B981",
    warning: "#F59E0B",
    error: "#EF4444"
  },
  client: {
    primary: "#3B82F6",
    secondary: "#60A5FA",
    accent: "#93C5FD",
    background: "#FAFAFA",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    border: "#E5E7EB",
    success: "#10B981",
    warning: "#F59E0B",
    error: "#EF4444"
  },
  admin: {
    primary: "#EF4444",
    secondary: "#F87171",
    accent: "#FCA5A5",
    background: "#FAFAFA",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    border: "#E5E7EB",
    success: "#10B981",
    warning: "#F59E0B",
    error: "#EF4444"
  },
  expert: {
    primary: "#10B981",
    secondary: "#34D399",
    accent: "#6EE7B7",
    background: "#FAFAFA",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    border: "#E5E7EB",
    success: "#10B981",
    warning: "#F59E0B",
    error: "#EF4444"
  },
  tool_creator: {
    primary: "#F59E0B",
    secondary: "#FBBF24",
    accent: "#FCD34D",
    background: "#FAFAFA",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    border: "#E5E7EB",
    success: "#10B981",
    warning: "#F59E0B",
    error: "#EF4444"
  },
  founder: {
    primary: "#7C3AED",
    secondary: "#8B5CF6",
    accent: "#A78BFA",
    background: "#FAFAFA",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    border: "#E5E7EB",
    success: "#10B981",
    warning: "#F59E0B",
    error: "#EF4444"
  },
  neutral: {
    primary: "#6B7280",
    secondary: "#9CA3AF",
    accent: "#D1D5DB",
    background: "#FAFAFA",
    surface: "#FFFFFF",
    text: "#1F2937",
    textSecondary: "#6B7280",
    border: "#E5E7EB",
    success: "#10B981",
    warning: "#F59E0B",
    error: "#EF4444"
  }
};
var getCommentTheme = (context = "neutral") => {
  return WORKSPACE_COMMENT_THEMES[context] || WORKSPACE_COMMENT_THEMES.neutral;
};
var formatCommentTimestamp = (timestamp) => {
  const now = /* @__PURE__ */ new Date();
  const diff = now.getTime() - timestamp.getTime();
  const minutes = Math.floor(diff / 6e4);
  const hours = Math.floor(diff / 36e5);
  const days = Math.floor(diff / 864e5);
  if (minutes < 1) return "just now";
  if (minutes < 60) return `${minutes}m ago`;
  if (hours < 24) return `${hours}h ago`;
  if (days < 7) return `${days}d ago`;
  return timestamp.toLocaleDateString();
};
var getCommentPriorityColor = (priority, theme) => {
  switch (priority) {
    case "urgent":
      return theme.error;
    case "high":
      return theme.warning;
    case "medium":
      return theme.primary;
    case "low":
    default:
      return theme.textSecondary;
  }
};

// packages/layouts/src/components/communication/comment/CommentThread.tsx
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var CommentInput = ({
  onSubmit,
  onCancel,
  placeholder = "Write a comment...",
  autoFocus = false,
  className
}) => {
  const [content, setContent] = (0, import_react18.useState)("");
  const [isSubmitting, setIsSubmitting] = (0, import_react18.useState)(false);
  const handleSubmit = (0, import_react18.useCallback)(async (e) => {
    e.preventDefault();
    if (!content.trim() || isSubmitting) return;
    setIsSubmitting(true);
    try {
      await onSubmit(content.trim());
      setContent("");
    } finally {
      setIsSubmitting(false);
    }
  }, [content, onSubmit, isSubmitting]);
  const handleKeyDown = (0, import_react18.useCallback)((e) => {
    if (e.key === "Enter" && (e.metaKey || e.ctrlKey)) {
      handleSubmit(e);
    }
    if (e.key === "Escape" && onCancel) {
      onCancel();
    }
  }, [handleSubmit, onCancel]);
  return (0, import_jsx_runtime18.jsxs)("form", { onSubmit: handleSubmit, className: cn2("space-y-3", className), children: [
    (0, import_jsx_runtime18.jsx)(
      "textarea",
      {
        value: content,
        onChange: (e) => setContent(e.target.value),
        onKeyDown: handleKeyDown,
        placeholder,
        autoFocus,
        rows: 3,
        className: "w-full px-3 py-2 border border-gray-300 rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      }
    ),
    (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between", children: [
      (0, import_jsx_runtime18.jsx)("span", { className: "text-xs text-gray-500", children: "Press Cmd+Enter to submit" }),
      (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center space-x-2", children: [
        onCancel && (0, import_jsx_runtime18.jsx)(
          Button,
          {
            type: "button",
            variant: "ghost",
            size: "sm",
            onClick: onCancel,
            disabled: isSubmitting,
            children: "Cancel"
          }
        ),
        (0, import_jsx_runtime18.jsx)(
          Button,
          {
            type: "submit",
            size: "sm",
            disabled: !content.trim() || isSubmitting,
            children: isSubmitting ? "Posting..." : "Comment"
          }
        )
      ] })
    ] })
  ] });
};
var CommentItem = ({
  comment,
  currentUser,
  context = "neutral",
  depth = 0,
  onReply,
  onResolve,
  onEdit,
  onDelete,
  onReact,
  allowReplies = true,
  allowResolution = true,
  allowEditing = true,
  permissions = []
}) => {
  const [isReplying, setIsReplying] = (0, import_react18.useState)(false);
  const [isEditing, setIsEditing] = (0, import_react18.useState)(false);
  const [editContent, setEditContent] = (0, import_react18.useState)(comment.content);
  const [showActions, setShowActions] = (0, import_react18.useState)(false);
  const theme = getCommentTheme(context);
  const isAuthor = comment.author.id === (currentUser == null ? void 0 : currentUser.id);
  const canReply = allowReplies && permissions.includes("comment:reply");
  const canResolve = allowResolution && (permissions.includes("comment:resolve") || isAuthor);
  const canEdit = allowEditing && (permissions.includes("comment:edit") || isAuthor);
  const canDelete = permissions.includes("comment:delete") || isAuthor;
  const handleReply = (0, import_react18.useCallback)((content) => {
    if (onReply) {
      onReply(comment.id, content);
      setIsReplying(false);
    }
  }, [comment.id, onReply]);
  const handleEdit = (0, import_react18.useCallback)(() => {
    if (onEdit && editContent.trim() !== comment.content) {
      onEdit(comment.id, editContent.trim());
    }
    setIsEditing(false);
  }, [comment.id, comment.content, editContent, onEdit]);
  const handleReaction = (0, import_react18.useCallback)((emoji) => {
    if (onReact) {
      onReact(comment.id, emoji);
    }
  }, [comment.id, onReact]);
  const priorityColor = comment.priority ? getCommentPriorityColor(comment.priority, theme) : void 0;
  return (0, import_jsx_runtime18.jsxs)(
    "div",
    {
      className: cn2(
        "group relative",
        depth > 0 && "ml-8 border-l-2 border-gray-100 pl-4"
      ),
      onMouseEnter: () => setShowActions(true),
      onMouseLeave: () => setShowActions(false),
      children: [
        comment.priority && comment.priority !== "low" && (0, import_jsx_runtime18.jsx)(
          "div",
          {
            className: "absolute -left-1 top-3 w-2 h-2 rounded-full",
            style: { backgroundColor: priorityColor }
          }
        ),
        (0, import_jsx_runtime18.jsxs)("div", { className: "flex space-x-3", children: [
          (0, import_jsx_runtime18.jsx)(
            Avatar,
            {
              src: comment.author.avatar,
              alt: comment.author.name,
              size: "sm",
              className: "flex-shrink-0"
            }
          ),
          (0, import_jsx_runtime18.jsxs)("div", { className: "flex-1 min-w-0", children: [
            (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center space-x-2 mb-1", children: [
              (0, import_jsx_runtime18.jsx)("span", { className: "font-medium text-sm text-gray-900", children: comment.author.name }),
              (0, import_jsx_runtime18.jsx)("span", { className: "text-xs text-gray-500", children: formatCommentTimestamp(comment.timestamp) }),
              comment.edited && (0, import_jsx_runtime18.jsx)("span", { className: "text-xs text-gray-400", children: "(edited)" }),
              comment.resolved && (0, import_jsx_runtime18.jsx)(Badge, { variant: "success", size: "sm", children: "Resolved" }),
              comment.priority && comment.priority !== "low" && (0, import_jsx_runtime18.jsx)(
                Badge,
                {
                  variant: "secondary",
                  size: "sm",
                  className: "border",
                  children: comment.priority
                }
              )
            ] }),
            (0, import_jsx_runtime18.jsx)("div", { className: "mb-2", children: isEditing ? (0, import_jsx_runtime18.jsxs)("div", { className: "space-y-2", children: [
              (0, import_jsx_runtime18.jsx)(
                "textarea",
                {
                  value: editContent,
                  onChange: (e) => setEditContent(e.target.value),
                  className: "w-full px-3 py-2 border border-gray-300 rounded-md resize-none focus:outline-none focus:ring-2 focus:ring-blue-500",
                  rows: 3
                }
              ),
              (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center space-x-2", children: [
                (0, import_jsx_runtime18.jsx)(Button, { size: "sm", onClick: handleEdit, children: "Save" }),
                (0, import_jsx_runtime18.jsx)(
                  Button,
                  {
                    size: "sm",
                    variant: "ghost",
                    onClick: () => {
                      setIsEditing(false);
                      setEditContent(comment.content);
                    },
                    children: "Cancel"
                  }
                )
              ] })
            ] }) : (0, import_jsx_runtime18.jsx)("div", { className: "text-sm text-gray-700 whitespace-pre-wrap", children: comment.content }) }),
            comment.tags && comment.tags.length > 0 && (0, import_jsx_runtime18.jsx)("div", { className: "flex flex-wrap gap-1 mb-2", children: comment.tags.map((tag) => (0, import_jsx_runtime18.jsx)(Badge, { variant: "secondary", size: "sm", children: tag }, tag)) }),
            comment.reactions && comment.reactions.length > 0 && (0, import_jsx_runtime18.jsx)("div", { className: "flex items-center space-x-1 mb-2", children: comment.reactions.map((reaction) => (0, import_jsx_runtime18.jsxs)(
              "button",
              {
                onClick: () => handleReaction(reaction.emoji),
                className: "flex items-center space-x-1 px-2 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-xs",
                children: [
                  (0, import_jsx_runtime18.jsx)("span", { children: reaction.emoji }),
                  (0, import_jsx_runtime18.jsx)("span", { children: reaction.users.length })
                ]
              },
              reaction.emoji
            )) }),
            (0, import_jsx_runtime18.jsxs)("div", { className: cn2(
              "flex items-center space-x-3 text-xs text-gray-500 transition-opacity",
              showActions ? "opacity-100" : "opacity-0"
            ), children: [
              canReply && !comment.resolved && (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => setIsReplying(true),
                  className: "hover:text-gray-700",
                  children: "Reply"
                }
              ),
              canEdit && !comment.resolved && (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => setIsEditing(true),
                  className: "hover:text-gray-700",
                  children: "Edit"
                }
              ),
              canResolve && !comment.resolved && (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => onResolve == null ? void 0 : onResolve(comment.id),
                  className: "hover:text-gray-700",
                  children: "Resolve"
                }
              ),
              (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => handleReaction("👍"),
                  className: "hover:text-gray-700",
                  children: "👍"
                }
              ),
              (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => handleReaction("❤️"),
                  className: "hover:text-gray-700",
                  children: "❤️"
                }
              ),
              canDelete && (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => onDelete == null ? void 0 : onDelete(comment.id),
                  className: "hover:text-red-600",
                  children: "Delete"
                }
              )
            ] }),
            isReplying && (0, import_jsx_runtime18.jsx)("div", { className: "mt-3", children: (0, import_jsx_runtime18.jsx)(
              CommentInput,
              {
                onSubmit: handleReply,
                onCancel: () => setIsReplying(false),
                placeholder: "Write a reply...",
                autoFocus: true
              }
            ) }),
            comment.replies && comment.replies.length > 0 && (0, import_jsx_runtime18.jsx)("div", { className: "mt-4 space-y-4", children: comment.replies.map((reply) => (0, import_jsx_runtime18.jsx)(
              CommentItem,
              {
                comment: reply,
                currentUser,
                context,
                depth: depth + 1,
                onReply,
                onResolve,
                onEdit,
                onDelete,
                onReact,
                allowReplies,
                allowResolution,
                allowEditing,
                permissions
              },
              reply.id
            )) })
          ] })
        ] })
      ]
    }
  );
};
var CommentThread = ({
  comments: rawComments,
  parentId,
  parentType,
  currentUser,
  context = "neutral",
  onCommentAdd,
  onCommentReply,
  onCommentResolve,
  onCommentEdit,
  onCommentDelete,
  onCommentReact,
  allowReplies = true,
  allowResolution = true,
  allowEditing = true,
  permissions = [],
  className
}) => {
  const [showNewComment, setShowNewComment] = (0, import_react18.useState)(false);
  const [filter, setFilter] = (0, import_react18.useState)("all");
  const theme = getCommentTheme(context);
  const comments = (0, import_react18.useMemo)(() => {
    return rawComments.map((comment) => ({
      ...comment,
      status: "active"
    }));
  }, [rawComments]);
  const filteredComments = (0, import_react18.useMemo)(() => {
    return comments.filter((comment) => {
      switch (filter) {
        case "unresolved":
          return !comment.resolved;
        case "resolved":
          return comment.resolved;
        default:
          return true;
      }
    });
  }, [comments, filter]);
  const sortedComments = (0, import_react18.useMemo)(() => {
    return [...filteredComments].sort(
      (a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()
    );
  }, [filteredComments]);
  const handleNewComment = (0, import_react18.useCallback)((content) => {
    if (onCommentAdd) {
      const newComment = {
        content,
        author: currentUser,
        workspaceId: currentUser.workspace || "",
        resolved: false,
        status: "active"
      };
      onCommentAdd(newComment);
      setShowNewComment(false);
    }
  }, [currentUser, onCommentAdd]);
  const handleReply = (0, import_react18.useCallback)((parentId2, content) => {
    if (onCommentReply) {
      const newReply = {
        content,
        author: currentUser,
        parentId: parentId2,
        workspaceId: currentUser.workspace || "",
        resolved: false,
        status: "active"
      };
      onCommentReply(parentId2, newReply);
    }
  }, [currentUser, onCommentReply]);
  const canAddComment = permissions.includes("comment:create");
  return (0, import_jsx_runtime18.jsxs)(
    "div",
    {
      className: cn2("space-y-4", className),
      style: { "--comment-primary": theme.primary },
      children: [
        (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between", children: [
          (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center space-x-4", children: [
            (0, import_jsx_runtime18.jsxs)("h3", { className: "text-lg font-medium text-gray-900", children: [
              "Comments (",
              comments.length,
              ")"
            ] }),
            (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center space-x-1", children: [
              (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => setFilter("all"),
                  className: cn2(
                    "px-3 py-1 text-sm rounded-md transition-colors",
                    filter === "all" ? "bg-blue-100 text-blue-700" : "text-gray-600 hover:text-gray-900"
                  ),
                  children: "All"
                }
              ),
              (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => setFilter("unresolved"),
                  className: cn2(
                    "px-3 py-1 text-sm rounded-md transition-colors",
                    filter === "unresolved" ? "bg-blue-100 text-blue-700" : "text-gray-600 hover:text-gray-900"
                  ),
                  children: "Open"
                }
              ),
              (0, import_jsx_runtime18.jsx)(
                "button",
                {
                  onClick: () => setFilter("resolved"),
                  className: cn2(
                    "px-3 py-1 text-sm rounded-md transition-colors",
                    filter === "resolved" ? "bg-blue-100 text-blue-700" : "text-gray-600 hover:text-gray-900"
                  ),
                  children: "Resolved"
                }
              )
            ] })
          ] }),
          canAddComment && (0, import_jsx_runtime18.jsxs)(
            Button,
            {
              size: "sm",
              onClick: () => setShowNewComment(true),
              disabled: showNewComment,
              children: [
                (0, import_jsx_runtime18.jsx)(Icon, { name: "Plus", className: "w-4 h-4 mr-1" }),
                "Add Comment"
              ]
            }
          )
        ] }),
        showNewComment && (0, import_jsx_runtime18.jsx)("div", { className: "border border-gray-200 rounded-lg p-4", children: (0, import_jsx_runtime18.jsx)(
          CommentInput,
          {
            onSubmit: handleNewComment,
            onCancel: () => setShowNewComment(false),
            autoFocus: true
          }
        ) }),
        (0, import_jsx_runtime18.jsx)("div", { className: "space-y-6", children: sortedComments.length === 0 ? (0, import_jsx_runtime18.jsx)("div", { className: "text-center py-8 text-gray-500", children: filter === "all" ? "No comments yet. Be the first to comment!" : `No ${filter} comments.` }) : sortedComments.map((comment) => (0, import_jsx_runtime18.jsx)(
          CommentItem,
          {
            comment,
            currentUser,
            context,
            onReply: handleReply,
            onResolve: onCommentResolve,
            onEdit: onCommentEdit,
            onDelete: onCommentDelete,
            onReact: onCommentReact,
            allowReplies,
            allowResolution,
            allowEditing,
            permissions
          },
          comment.id
        )) })
      ]
    }
  );
};

// packages/layouts/src/components/communication/notification/NotificationCenter.tsx
var import_react19 = __toESM(require_react());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var NOTIFICATION_CATEGORIES = {
  system: "System",
  chat: "Chat",
  comment: "Comments",
  task: "Tasks",
  billing: "Billing",
  general: "General"
};
var NOTIFICATION_TYPES = {
  info: { icon: "Info", color: "blue" },
  success: { icon: "CheckCircle", color: "green" },
  warning: { icon: "AlertTriangle", color: "yellow" },
  error: { icon: "AlertCircle", color: "red" },
  mention: { icon: "AtSign", color: "purple" },
  update: { icon: "RefreshCw", color: "blue" }
};
var formatDate2 = (date) => {
  const now = /* @__PURE__ */ new Date();
  const diff = now.getTime() - date.getTime();
  const minutes = Math.floor(diff / 6e4);
  const hours = Math.floor(diff / 36e5);
  const days = Math.floor(diff / 864e5);
  if (minutes < 1) return "Just now";
  if (minutes < 60) return `${minutes}m ago`;
  if (hours < 24) return `${hours}h ago`;
  if (days < 7) return `${days}d ago`;
  return date.toLocaleDateString();
};
var formatDateGroup = (date) => {
  const now = /* @__PURE__ */ new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const yesterday = new Date(today.getTime() - 864e5);
  const notificationDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
  if (notificationDate.getTime() === today.getTime()) return "Today";
  if (notificationDate.getTime() === yesterday.getTime()) return "Yesterday";
  return date.toLocaleDateString();
};
var NotificationCenterContainer = ({ children, context }) => (0, import_jsx_runtime19.jsx)("div", { className: `
    notification-center
    bg-white dark:bg-gray-900
    border border-gray-200 dark:border-gray-700
    rounded-lg shadow-lg
    w-96 max-h-96 overflow-hidden
    ${context === "consultant" ? "border-blue-200 dark:border-blue-800" : ""}
    ${context === "client" ? "border-green-200 dark:border-green-800" : ""}
    ${context === "admin" ? "border-purple-200 dark:border-purple-800" : ""}
    ${context === "expert" ? "border-orange-200 dark:border-orange-800" : ""}
    ${context === "tool_creator" ? "border-pink-200 dark:border-pink-800" : ""}
    ${context === "founder" ? "border-yellow-200 dark:border-yellow-800" : ""}
  `, children });
var NotificationHeader = ({ children }) => (0, import_jsx_runtime19.jsx)("div", { className: "notification-header p-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between", children });
var HeaderActions = ({ children }) => (0, import_jsx_runtime19.jsx)("div", { className: "header-actions flex items-center gap-2", children });
var NotificationFilters = ({ children }) => (0, import_jsx_runtime19.jsx)("div", { className: "notification-filters p-2 border-b border-gray-200 dark:border-gray-700 flex flex-wrap gap-1", children });
var FilterButton = ({
  children,
  active,
  onClick
}) => (0, import_jsx_runtime19.jsx)(
  "button",
  {
    onClick,
    className: `
      filter-button px-3 py-1 rounded-full text-sm font-medium transition-colors
      ${active ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200" : "bg-gray-100 text-gray-600 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700"}
    `,
    children
  }
);
var NotificationList = ({ children }) => (0, import_jsx_runtime19.jsx)("div", { className: "notification-list max-h-80 overflow-y-auto", children });
var NotificationGroup = ({ children }) => (0, import_jsx_runtime19.jsx)("div", { className: "notification-group", children });
var DateHeader = ({ children }) => (0, import_jsx_runtime19.jsx)("div", { className: "date-header px-4 py-2 bg-gray-50 dark:bg-gray-800 text-sm font-medium text-gray-500 dark:text-gray-400 sticky top-0", children });
var NotificationItem = ({
  notification,
  onClick,
  onMarkAsRead,
  context
}) => {
  const typeConfig = NOTIFICATION_TYPES[notification.type];
  return (0, import_jsx_runtime19.jsx)(
    "div",
    {
      className: `
        notification-item p-4 border-b border-gray-100 dark:border-gray-800 cursor-pointer
        hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors
        ${!notification.read ? "bg-blue-50 dark:bg-blue-950" : ""}
      `,
      onClick,
      children: (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-start gap-3", children: [
        (0, import_jsx_runtime19.jsx)("div", { className: `
          notification-icon flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center
          ${typeConfig.color === "blue" ? "bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-400" : ""}
          ${typeConfig.color === "green" ? "bg-green-100 text-green-600 dark:bg-green-900 dark:text-green-400" : ""}
          ${typeConfig.color === "yellow" ? "bg-yellow-100 text-yellow-600 dark:bg-yellow-900 dark:text-yellow-400" : ""}
          ${typeConfig.color === "red" ? "bg-red-100 text-red-600 dark:bg-red-900 dark:text-red-400" : ""}
          ${typeConfig.color === "purple" ? "bg-purple-100 text-purple-600 dark:bg-purple-900 dark:text-purple-400" : ""}
        `, children: (0, import_jsx_runtime19.jsx)(Icon, { name: typeConfig.icon, size: "sm" }) }),
        (0, import_jsx_runtime19.jsxs)("div", { className: "flex-1 min-w-0", children: [
          (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-start justify-between", children: [
            (0, import_jsx_runtime19.jsxs)("div", { className: "flex-1", children: [
              (0, import_jsx_runtime19.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100 truncate", children: notification.title }),
              (0, import_jsx_runtime19.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400 mt-1", children: notification.message })
            ] }),
            (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2 ml-2", children: [
              (0, import_jsx_runtime19.jsx)("span", { className: "text-xs text-gray-500 dark:text-gray-400", children: formatDate2(notification.timestamp) }),
              !notification.read && (0, import_jsx_runtime19.jsx)("div", { className: "w-2 h-2 bg-blue-500 rounded-full" })
            ] })
          ] }),
          notification.sender && (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2 mt-2", children: [
            (0, import_jsx_runtime19.jsx)(
              Avatar,
              {
                src: notification.sender.avatar,
                alt: notification.sender.name,
                size: "xs",
                fallback: notification.sender.name.charAt(0)
              }
            ),
            (0, import_jsx_runtime19.jsx)("span", { className: "text-xs text-gray-500 dark:text-gray-400", children: notification.sender.name })
          ] }),
          notification.actions && notification.actions.length > 0 && (0, import_jsx_runtime19.jsx)("div", { className: "flex gap-2 mt-3", children: notification.actions.map((action) => (0, import_jsx_runtime19.jsx)(
            Button,
            {
              variant: action.type === "primary" ? "primary" : "secondary",
              size: "sm",
              onClick: (e) => {
                e.stopPropagation();
              },
              children: action.label
            },
            action.id
          )) })
        ] })
      ] })
    }
  );
};
var EmptyState2 = ({ message, context }) => (0, import_jsx_runtime19.jsxs)("div", { className: "empty-state p-8 text-center", children: [
  (0, import_jsx_runtime19.jsx)(Icon, { name: "Bell", size: "lg", className: "mx-auto mb-4 text-gray-400" }),
  (0, import_jsx_runtime19.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: message })
] });
var NotificationCenter = ({
  notifications,
  currentUser,
  context = "neutral",
  onNotificationClick,
  onMarkAsRead,
  onMarkAllAsRead,
  onClearAll,
  showFilters = true,
  showSettings = true,
  permissions = []
}) => {
  const [filter, setFilter] = (0, import_react19.useState)("all");
  const [showPreferences, setShowPreferences] = (0, import_react19.useState)(false);
  const hasPermission2 = (permission) => permissions.includes(permission);
  const filteredNotifications = (0, import_react19.useMemo)(() => {
    let filtered = notifications;
    if (filter === "unread") {
      filtered = filtered.filter((n) => !n.read);
    } else if (filter !== "all") {
      filtered = filtered.filter((n) => n.category === filter);
    }
    return filtered.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());
  }, [notifications, filter]);
  const groupedNotifications = (0, import_react19.useMemo)(() => {
    return filteredNotifications.reduce((groups, notification) => {
      const dateKey = formatDateGroup(notification.timestamp);
      if (!groups[dateKey]) {
        groups[dateKey] = [];
      }
      groups[dateKey].push(notification);
      return groups;
    }, {});
  }, [filteredNotifications]);
  const handleNotificationClick = (0, import_react19.useCallback)((notification) => {
    if (!notification.read && onMarkAsRead) {
      onMarkAsRead(notification.id);
    }
    if (onNotificationClick) {
      onNotificationClick(notification);
    }
  }, [onMarkAsRead, onNotificationClick]);
  const handleMarkAsRead = (0, import_react19.useCallback)((notificationId) => {
    if (onMarkAsRead) {
      onMarkAsRead(notificationId);
    }
  }, [onMarkAsRead]);
  const handleMarkAllAsRead = (0, import_react19.useCallback)(() => {
    if (onMarkAllAsRead) {
      onMarkAllAsRead();
    }
  }, [onMarkAllAsRead]);
  const handleClearAll = (0, import_react19.useCallback)(() => {
    if (onClearAll) {
      onClearAll();
    }
  }, [onClearAll]);
  const unreadCount = notifications.filter((n) => !n.read).length;
  return (0, import_jsx_runtime19.jsxs)(NotificationCenterContainer, { context, children: [
    (0, import_jsx_runtime19.jsxs)(NotificationHeader, { children: [
      (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center gap-2", children: [
        (0, import_jsx_runtime19.jsx)("h3", { className: "text-lg font-semibold", children: "Notifications" }),
        unreadCount > 0 && (0, import_jsx_runtime19.jsx)(Badge, { variant: "primary", size: "sm", children: unreadCount })
      ] }),
      (0, import_jsx_runtime19.jsxs)(HeaderActions, { children: [
        unreadCount > 0 && (0, import_jsx_runtime19.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            onClick: handleMarkAllAsRead,
            children: "Mark all as read"
          }
        ),
        notifications.length > 0 && hasPermission2("notification:clear") && (0, import_jsx_runtime19.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            onClick: handleClearAll,
            children: "Clear all"
          }
        ),
        showSettings && (0, import_jsx_runtime19.jsx)(
          Button,
          {
            variant: "ghost",
            size: "sm",
            onClick: () => setShowPreferences(true),
            children: (0, import_jsx_runtime19.jsx)(Icon, { name: "Settings", size: "sm" })
          }
        )
      ] })
    ] }),
    showFilters && (0, import_jsx_runtime19.jsxs)(NotificationFilters, { children: [
      (0, import_jsx_runtime19.jsx)(
        FilterButton,
        {
          active: filter === "all",
          onClick: () => setFilter("all"),
          children: "All"
        }
      ),
      (0, import_jsx_runtime19.jsxs)(
        FilterButton,
        {
          active: filter === "unread",
          onClick: () => setFilter("unread"),
          children: [
            "Unread ",
            unreadCount > 0 && `(${unreadCount})`
          ]
        }
      ),
      Object.entries(NOTIFICATION_CATEGORIES).map(([key, label]) => {
        const count = notifications.filter((n) => n.category === key).length;
        return count > 0 ? (0, import_jsx_runtime19.jsxs)(
          FilterButton,
          {
            active: filter === key,
            onClick: () => setFilter(key),
            children: [
              label,
              " (",
              count,
              ")"
            ]
          },
          key
        ) : null;
      })
    ] }),
    (0, import_jsx_runtime19.jsx)(NotificationList, { children: Object.keys(groupedNotifications).length === 0 ? (0, import_jsx_runtime19.jsx)(
      EmptyState2,
      {
        message: filter === "unread" ? "No unread notifications" : "No notifications",
        context
      }
    ) : Object.entries(groupedNotifications).map(([date, items]) => (0, import_jsx_runtime19.jsxs)(NotificationGroup, { children: [
      (0, import_jsx_runtime19.jsx)(DateHeader, { children: date }),
      items.map((notification) => (0, import_jsx_runtime19.jsx)(
        NotificationItem,
        {
          notification,
          onClick: () => handleNotificationClick(notification),
          onMarkAsRead: () => handleMarkAsRead(notification.id),
          context
        },
        notification.id
      ))
    ] }, date)) })
  ] });
};
export {
  ActivityFeed,
  BreadcrumbNav,
  CardGrid,
  ChatInterface,
  ClientNav,
  CommentThread,
  ConsultantNav,
  DataGrid,
  DataTable,
  FormBuilder,
  FormTemplate,
  FormWizard,
  MobileNav_default as MobileNav,
  NotificationCenter,
  SideNavigation_default as SideNavigation,
  TabNavigation,
  Timeline,
  TopNavigation,
  WorkspaceNav
};
//# sourceMappingURL=@wheel_layouts.js.map
